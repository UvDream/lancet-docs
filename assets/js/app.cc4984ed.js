(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function t(t){for(var i,l,o=t[0],u=t[1],c=t[2],m=0,p=[];m<o.length;m++)l=o[m],Object.prototype.hasOwnProperty.call(a,l)&&a[l]&&p.push(a[l][0]),a[l]=0;for(i in u)Object.prototype.hasOwnProperty.call(u,i)&&(n[i]=u[i]);for(s&&s(t);p.length;)p.shift()();return r.push.apply(r,c||[]),e()}function e(){for(var n,t=0;t<r.length;t++){for(var e=r[t],i=!0,o=1;o<e.length;o++){var u=e[o];0!==a[u]&&(i=!1)}i&&(r.splice(t--,1),n=l(l.s=e[0]))}return n}var i={},a={1:0},r=[];function l(t){if(i[t])return i[t].exports;var e=i[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,l),e.l=!0,e.exports}l.e=function(n){var t=[],e=a[n];if(0!==e)if(e)t.push(e[2]);else{var i=new Promise((function(t,i){e=a[n]=[t,i]}));t.push(e[2]=i);var r,o=document.createElement("script");o.charset="utf-8",o.timeout=120,l.nc&&o.setAttribute("nonce",l.nc),o.src=function(n){return l.p+"assets/js/"+({2:"vendors~docsearch"}[n]||n)+"."+{2:"3733af1e",3:"e76edb74",4:"f26dace8",5:"aeedc0cd",6:"bc4d3e3b",7:"4337c208",8:"5cfbf6ad",9:"285fac44",10:"298008db",11:"215a6df5",12:"fe6c64d0",13:"285748fd",14:"9947be14",15:"8b2b07b7",16:"31359266",17:"9dd4015a",18:"2235d872",19:"f373f5c8",20:"aba30e54",21:"bc3703d3",22:"d81c3100",23:"224a5f36",24:"d758f359",25:"148d47af",26:"0cd85f99",27:"850bc999",28:"53f49ea2",29:"1433104c",30:"0b3eaea9",31:"adff5f7c",32:"2d30d16e",33:"641b60d1",34:"cb492b36",35:"7f131f1b",36:"5720c6bd",37:"974ebc11",38:"b708617f",39:"5983a952",40:"efc5e780",41:"ab4b90f1",42:"e6470c35",43:"fa37ceae",44:"9fea7456",45:"05372bb7",46:"01b72abd",47:"a6f53f05",48:"346d0a52",49:"f0ad4aff",50:"ee2f0ca9",51:"98681cbd",52:"9ba41d67",53:"2e8e8a8f",54:"e77f799d",55:"d040f308",56:"5a8cac25",57:"ea59a29d",58:"d806bf6d",59:"da825bbf",60:"f64d9940",61:"92482aaf",62:"871f23fd",63:"ac58736e",64:"1503c00d"}[n]+".js"}(n);var u=new Error;r=function(t){o.onerror=o.onload=null,clearTimeout(c);var e=a[n];if(0!==e){if(e){var i=t&&("load"===t.type?"missing":t.type),r=t&&t.target&&t.target.src;u.message="Loading chunk "+n+" failed.\n("+i+": "+r+")",u.name="ChunkLoadError",u.type=i,u.request=r,e[1](u)}a[n]=void 0}};var c=setTimeout((function(){r({type:"timeout",target:o})}),12e4);o.onerror=o.onload=r,document.head.appendChild(o)}return Promise.all(t)},l.m=n,l.c=i,l.d=function(n,t,e){l.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},l.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},l.t=function(n,t){if(1&t&&(n=l(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(l.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var i in n)l.d(e,i,function(t){return n[t]}.bind(null,i));return e},l.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return l.d(t,"a",t),t},l.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},l.p="/lancet-docs/",l.oe=function(n){throw console.error(n),n};var o=window.webpackJsonp=window.webpackJsonp||[],u=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var s=u;r.push([100,0]),e()}([function(n,t,e){var i=e(54),a=i.all;n.exports=i.IS_HTMLDDA?function(n){return"function"==typeof n||n===a}:function(n){return"function"==typeof n}},function(n,t){var e=function(n){return n&&n.Math==Math&&n};n.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,t){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,t,e){var i=e(2);n.exports=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,t,e){var i=e(13),a=e(50);n.exports=function(n){if("Function"===i(n))return a(n)}},function(n,t){var e=Array.isArray;n.exports=e},function(n,t,e){var i=e(68),a="object"==typeof self&&self&&self.Object===Object&&self,r=i||a||Function("return this")();n.exports=r},function(n,t,e){"use strict";function i(n,t,e,i,a,r,l,o){var u,c="function"==typeof n?n.options:n;if(t&&(c.render=t,c.staticRenderFns=e,c._compiled=!0),i&&(c.functional=!0),r&&(c._scopeId="data-v-"+r),l?(u=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(l)},c._ssrRegister=u):a&&(u=o?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),u)if(c.functional){c._injectStyles=u;var s=c.render;c.render=function(n,t){return u.call(t),s(n,t)}}else{var m=c.beforeCreate;c.beforeCreate=m?[].concat(m,u):[u]}return{exports:n,options:c}}e.d(t,"a",(function(){return i}))},function(n,t,e){var i=e(4),a=e(30),r=i({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,t){return r(a(n),t)}},function(n,t,e){var i=e(0),a=e(54),r=a.all;n.exports=a.IS_HTMLDDA?function(n){return"object"==typeof n?null!==n:i(n)||n===r}:function(n){return"object"==typeof n?null!==n:i(n)}},function(n,t,e){var i=e(159),a=e(162);n.exports=function(n,t){var e=a(n,t);return i(e)?e:void 0}},function(n,t){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,t,e){var i=e(14),a=e(144),r=e(145),l=i?i.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":l&&l in Object(n)?a(n):r(n)}},function(n,t,e){var i=e(50),a=i({}.toString),r=i("".slice);n.exports=function(n){return r(a(n),8,-1)}},function(n,t,e){var i=e(6).Symbol;n.exports=i},function(n,t,e){var i=e(3),a=e(63),r=e(96),l=e(25),o=e(53),u=TypeError,c=Object.defineProperty,s=Object.getOwnPropertyDescriptor;t.f=i?r?function(n,t,e){if(l(n),t=o(t),l(e),"function"==typeof n&&"prototype"===t&&"value"in e&&"writable"in e&&!e.writable){var i=s(n,t);i&&i.writable&&(n[t]=e.value,e={configurable:"configurable"in e?e.configurable:i.configurable,enumerable:"enumerable"in e?e.enumerable:i.enumerable,writable:!1})}return c(n,t,e)}:c:function(n,t,e){if(l(n),t=o(t),l(e),a)try{return c(n,t,e)}catch(n){}if("get"in e||"set"in e)throw u("Accessors not supported");return"value"in e&&(n[t]=e.value),n}},function(n,t,e){var i=e(1),a=e(0),r=function(n){return a(n)?n:void 0};n.exports=function(n,t){return arguments.length<2?r(i[n]):i[n]&&i[n][t]}},function(n,t,e){var i=e(3),a=e(15),r=e(33);n.exports=i?function(n,t,e){return a.f(n,t,r(1,e))}:function(n,t,e){return n[t]=e,n}},function(n,t,e){var i=e(149),a=e(150),r=e(151),l=e(152),o=e(153);function u(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var i=n[t];this.set(i[0],i[1])}}u.prototype.clear=i,u.prototype.delete=a,u.prototype.get=r,u.prototype.has=l,u.prototype.set=o,n.exports=u},function(n,t,e){var i=e(70);n.exports=function(n,t){for(var e=n.length;e--;)if(i(n[e][0],t))return e;return-1}},function(n,t,e){var i=e(10)(Object,"create");n.exports=i},function(n,t,e){var i=e(171);n.exports=function(n,t){var e=n.__data__;return i(t)?e["string"==typeof t?"string":"hash"]:e.map}},function(n,t,e){var i=e(43);n.exports=function(n){if("string"==typeof n||i(n))return n;var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(n,t){var e=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,r=/^0o[0-7]+$/i,l=parseInt,o="object"==typeof global&&global&&global.Object===Object&&global,u="object"==typeof self&&self&&self.Object===Object&&self,c=o||u||Function("return this")(),s=Object.prototype.toString,m=Math.max,p=Math.min,d=function(){return c.Date.now()};function f(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function g(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==s.call(n)}(n))return NaN;if(f(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=f(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(e,"");var o=a.test(n);return o||r.test(n)?l(n.slice(2),o?2:8):i.test(n)?NaN:+n}n.exports=function(n,t,e){var i,a,r,l,o,u,c=0,s=!1,h=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(t){var e=i,r=a;return i=a=void 0,c=t,l=n.apply(r,e)}function k(n){return c=n,o=setTimeout(x,t),s?b(n):l}function y(n){var e=n-u;return void 0===u||e>=t||e<0||h&&n-c>=r}function x(){var n=d();if(y(n))return T(n);o=setTimeout(x,function(n){var e=t-(n-u);return h?p(e,r-(n-c)):e}(n))}function T(n){return o=void 0,v&&i?b(n):(i=a=void 0,l)}function w(){var n=d(),e=y(n);if(i=arguments,a=this,u=n,e){if(void 0===o)return k(u);if(h)return o=setTimeout(x,t),b(u)}return void 0===o&&(o=setTimeout(x,t)),l}return t=g(t)||0,f(e)&&(s=!!e.leading,r=(h="maxWait"in e)?m(g(e.maxWait)||0,t):r,v="trailing"in e?!!e.trailing:v),w.cancel=function(){void 0!==o&&clearTimeout(o),c=0,i=u=a=o=void 0},w.flush=function(){return void 0===o?l:T(d())},w}},function(n,t,e){var i,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(i=function(){var n,t,e={version:"0.2.0"},i=e.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,t,e){return n<t?t:n>e?e:n}function r(n){return 100*(-1+n)}e.configure=function(n){var t,e;for(t in n)void 0!==(e=n[t])&&n.hasOwnProperty(t)&&(i[t]=e);return this},e.status=null,e.set=function(n){var t=e.isStarted();n=a(n,i.minimum,1),e.status=1===n?null:n;var u=e.render(!t),c=u.querySelector(i.barSelector),s=i.speed,m=i.easing;return u.offsetWidth,l((function(t){""===i.positionUsing&&(i.positionUsing=e.getPositioningCSS()),o(c,function(n,t,e){var a;return(a="translate3d"===i.positionUsing?{transform:"translate3d("+r(n)+"%,0,0)"}:"translate"===i.positionUsing?{transform:"translate("+r(n)+"%,0)"}:{"margin-left":r(n)+"%"}).transition="all "+t+"ms "+e,a}(n,s,m)),1===n?(o(u,{transition:"none",opacity:1}),u.offsetWidth,setTimeout((function(){o(u,{transition:"all "+s+"ms linear",opacity:0}),setTimeout((function(){e.remove(),t()}),s)}),s)):setTimeout(t,s)})),this},e.isStarted=function(){return"number"==typeof e.status},e.start=function(){e.status||e.set(0);var n=function(){setTimeout((function(){e.status&&(e.trickle(),n())}),i.trickleSpeed)};return i.trickle&&n(),this},e.done=function(n){return n||e.status?e.inc(.3+.5*Math.random()).set(1):this},e.inc=function(n){var t=e.status;return t?("number"!=typeof n&&(n=(1-t)*a(Math.random()*t,.1,.95)),t=a(t+n,0,.994),e.set(t)):e.start()},e.trickle=function(){return e.inc(Math.random()*i.trickleRate)},n=0,t=0,e.promise=function(i){return i&&"resolved"!==i.state()?(0===t&&e.start(),n++,t++,i.always((function(){0==--t?(n=0,e.done()):e.set((n-t)/n)})),this):this},e.render=function(n){if(e.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var t=document.createElement("div");t.id="nprogress",t.innerHTML=i.template;var a,l=t.querySelector(i.barSelector),u=n?"-100":r(e.status||0),s=document.querySelector(i.parent);return o(l,{transition:"all 0 linear",transform:"translate3d("+u+"%,0,0)"}),i.showSpinner||(a=t.querySelector(i.spinnerSelector))&&p(a),s!=document.body&&c(s,"nprogress-custom-parent"),s.appendChild(t),t},e.remove=function(){s(document.documentElement,"nprogress-busy"),s(document.querySelector(i.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&p(n)},e.isRendered=function(){return!!document.getElementById("nprogress")},e.getPositioningCSS=function(){var n=document.body.style,t="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return t+"Perspective"in n?"translate3d":t+"Transform"in n?"translate":"margin"};var l=function(){var n=[];function t(){var e=n.shift();e&&e(t)}return function(e){n.push(e),1==n.length&&t()}}(),o=function(){var n=["Webkit","O","Moz","ms"],t={};function e(e){return e=e.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,t){return t.toUpperCase()})),t[e]||(t[e]=function(t){var e=document.body.style;if(t in e)return t;for(var i,a=n.length,r=t.charAt(0).toUpperCase()+t.slice(1);a--;)if((i=n[a]+r)in e)return i;return t}(e))}function i(n,t,i){t=e(t),n.style[t]=i}return function(n,t){var e,a,r=arguments;if(2==r.length)for(e in t)void 0!==(a=t[e])&&t.hasOwnProperty(e)&&i(n,e,a);else i(n,r[1],r[2])}}();function u(n,t){return("string"==typeof n?n:m(n)).indexOf(" "+t+" ")>=0}function c(n,t){var e=m(n),i=e+t;u(e,t)||(n.className=i.substring(1))}function s(n,t){var e,i=m(n);u(n,t)&&(e=i.replace(" "+t+" "," "),n.className=e.substring(1,e.length-1))}function m(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function p(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return e})?i.call(t,e,t,n):i)||(n.exports=a)},function(n,t,e){var i=e(9),a=String,r=TypeError;n.exports=function(n){if(i(n))return n;throw r(a(n)+" is not an object")}},function(n,t,e){var i=e(1),a=e(49).f,r=e(17),l=e(108),o=e(35),u=e(64),c=e(121);n.exports=function(n,t){var e,s,m,p,d,f=n.target,g=n.global,h=n.stat;if(e=g?i:h?i[f]||o(f,{}):(i[f]||{}).prototype)for(s in t){if(p=t[s],m=n.dontCallGetSet?(d=a(e,s))&&d.value:e[s],!c(g?s:f+(h?".":"#")+s,n.forced)&&void 0!==m){if(typeof p==typeof m)continue;u(p,m)}(n.sham||m&&m.sham)&&r(p,"sham",!0),l(e,s,p,n)}}},function(n,t,e){var i=e(2);n.exports=!i((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,t,e){var i=e(45),a=e(51);n.exports=function(n){return i(a(n))}},function(n,t,e){var i=e(1),a=e(60),r=e(8),l=e(62),o=e(58),u=e(57),c=a("wks"),s=i.Symbol,m=s&&s.for,p=u?s:s&&s.withoutSetter||l;n.exports=function(n){if(!r(c,n)||!o&&"string"!=typeof c[n]){var t="Symbol."+n;o&&r(s,n)?c[n]=s[n]:c[n]=u&&m?m(t):p(t)}return c[n]}},function(n,t,e){var i=e(51),a=Object;n.exports=function(n){return a(i(n))}},function(n,t,e){var i=e(119);n.exports=function(n){return i(n.length)}},function(n,t,e){var i=e(27),a=Function.prototype.call;n.exports=i?a.bind(a):function(){return a.apply(a,arguments)}},function(n,t){n.exports=function(n,t){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:t}}},function(n,t,e){var i=e(1),a=e(35),r=i["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=r},function(n,t,e){var i=e(1),a=Object.defineProperty;n.exports=function(n,t){try{a(i,n,{value:t,configurable:!0,writable:!0})}catch(e){i[n]=t}return t}},function(n,t,e){var i=e(143),a=e(11),r=Object.prototype,l=r.hasOwnProperty,o=r.propertyIsEnumerable,u=i(function(){return arguments}())?i:function(n){return a(n)&&l.call(n,"callee")&&!o.call(n,"callee")};n.exports=u},function(n,t,e){var i=e(10)(e(6),"Map");n.exports=i},function(n,t){n.exports=function(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}},function(n,t,e){var i=e(163),a=e(170),r=e(172),l=e(173),o=e(174);function u(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var i=n[t];this.set(i[0],i[1])}}u.prototype.clear=i,u.prototype.delete=a,u.prototype.get=r,u.prototype.has=l,u.prototype.set=o,n.exports=u},function(n,t){n.exports=function(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}},function(n,t){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,t,e){var i=e(5),a=e(43),r=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,l=/^\w*$/;n.exports=function(n,t){if(i(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!a(n))||(l.test(n)||!r.test(n)||null!=t&&n in Object(t))}},function(n,t,e){var i=e(12),a=e(11);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==i(n)}},function(n,t){n.exports=function(n){return n}},function(n,t,e){var i=e(4),a=e(2),r=e(13),l=Object,o=i("".split);n.exports=a((function(){return!l("z").propertyIsEnumerable(0)}))?function(n){return"String"==r(n)?o(n,""):l(n)}:l},function(n,t,e){var i=e(0),a=e(106),r=TypeError;n.exports=function(n){if(i(n))return n;throw r(a(n)+" is not a function")}},function(n,t){n.exports={}},function(n,t){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,t,e){var i=e(3),a=e(32),r=e(102),l=e(33),o=e(28),u=e(53),c=e(8),s=e(63),m=Object.getOwnPropertyDescriptor;t.f=i?m:function(n,t){if(n=o(n),t=u(t),s)try{return m(n,t)}catch(n){}if(c(n,t))return l(!a(r.f,n,t),n[t])}},function(n,t,e){var i=e(27),a=Function.prototype,r=a.call,l=i&&a.bind.bind(r,r);n.exports=function(n){return i?l(n):function(){return r.apply(n,arguments)}}},function(n,t,e){var i=e(52),a=TypeError;n.exports=function(n){if(i(n))throw a("Can't call method on "+n);return n}},function(n,t){n.exports=function(n){return null==n}},function(n,t,e){var i=e(103),a=e(55);n.exports=function(n){var t=i(n,"string");return a(t)?t:t+""}},function(n,t){var e="object"==typeof document&&document.all,i=void 0===e&&void 0!==e;n.exports={all:e,IS_HTMLDDA:i}},function(n,t,e){var i=e(16),a=e(0),r=e(56),l=e(57),o=Object;n.exports=l?function(n){return"symbol"==typeof n}:function(n){var t=i("Symbol");return a(t)&&r(t.prototype,o(n))}},function(n,t,e){var i=e(4);n.exports=i({}.isPrototypeOf)},function(n,t,e){var i=e(58);n.exports=i&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,t,e){var i=e(59),a=e(2);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&i&&i<41}))},function(n,t,e){var i,a,r=e(1),l=e(104),o=r.process,u=r.Deno,c=o&&o.versions||u&&u.version,s=c&&c.v8;s&&(a=(i=s.split("."))[0]>0&&i[0]<4?1:+(i[0]+i[1])),!a&&l&&(!(i=l.match(/Edge\/(\d+)/))||i[1]>=74)&&(i=l.match(/Chrome\/(\d+)/))&&(a=+i[1]),n.exports=a},function(n,t,e){var i=e(61),a=e(34);(n.exports=function(n,t){return a[n]||(a[n]=void 0!==t?t:{})})("versions",[]).push({version:"3.25.5",mode:i?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.25.5/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,t){n.exports=!1},function(n,t,e){var i=e(4),a=0,r=Math.random(),l=i(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+l(++a+r,36)}},function(n,t,e){var i=e(3),a=e(2),r=e(95);n.exports=!i&&!a((function(){return 7!=Object.defineProperty(r("div"),"a",{get:function(){return 7}}).a}))},function(n,t,e){var i=e(8),a=e(114),r=e(49),l=e(15);n.exports=function(n,t,e){for(var o=a(t),u=l.f,c=r.f,s=0;s<o.length;s++){var m=o[s];i(n,m)||e&&i(e,m)||u(n,m,c(t,m))}}},function(n,t,e){var i=e(118);n.exports=function(n){var t=+n;return t!=t||0===t?0:i(t)}},function(n,t,e){var i=e(4),a=e(25),r=e(131);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,t=!1,e={};try{(n=i(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(e,[]),t=e instanceof Array}catch(n){}return function(e,i){return a(e),r(i),t?n(e,i):e.__proto__=i,e}}():void 0)},function(n,t){n.exports=function(n,t){for(var e=-1,i=t.length,a=n.length;++e<i;)n[a+e]=t[e];return n}},function(n,t){var e="object"==typeof global&&global&&global.Object===Object&&global;n.exports=e},function(n,t,e){var i=e(18),a=e(154),r=e(155),l=e(156),o=e(157),u=e(158);function c(n){var t=this.__data__=new i(n);this.size=t.size}c.prototype.clear=a,c.prototype.delete=r,c.prototype.get=l,c.prototype.has=o,c.prototype.set=u,n.exports=c},function(n,t){n.exports=function(n,t){return n===t||n!=n&&t!=t}},function(n,t,e){var i=e(12),a=e(38);n.exports=function(n){if(!a(n))return!1;var t=i(n);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(n,t){var e=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return e.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,t,e){var i=e(175),a=e(11);n.exports=function n(t,e,r,l,o){return t===e||(null==t||null==e||!a(t)&&!a(e)?t!=t&&e!=e:i(t,e,r,l,n,o))}},function(n,t,e){var i=e(75),a=e(178),r=e(76);n.exports=function(n,t,e,l,o,u){var c=1&e,s=n.length,m=t.length;if(s!=m&&!(c&&m>s))return!1;var p=u.get(n),d=u.get(t);if(p&&d)return p==t&&d==n;var f=-1,g=!0,h=2&e?new i:void 0;for(u.set(n,t),u.set(t,n);++f<s;){var v=n[f],b=t[f];if(l)var k=c?l(b,v,f,t,n,u):l(v,b,f,n,t,u);if(void 0!==k){if(k)continue;g=!1;break}if(h){if(!a(t,(function(n,t){if(!r(h,t)&&(v===n||o(v,n,e,l,u)))return h.push(t)}))){g=!1;break}}else if(v!==b&&!o(v,b,e,l,u)){g=!1;break}}return u.delete(n),u.delete(t),g}},function(n,t,e){var i=e(39),a=e(176),r=e(177);function l(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new i;++t<e;)this.add(n[t])}l.prototype.add=l.prototype.push=a,l.prototype.has=r,n.exports=l},function(n,t){n.exports=function(n,t){return n.has(t)}},function(n,t,e){var i=e(188),a=e(194),r=e(81);n.exports=function(n){return r(n)?i(n):a(n)}},function(n,t,e){(function(n){var i=e(6),a=e(190),r=t&&!t.nodeType&&t,l=r&&"object"==typeof n&&n&&!n.nodeType&&n,o=l&&l.exports===r?i.Buffer:void 0,u=(o?o.isBuffer:void 0)||a;n.exports=u}).call(this,e(48)(n))},function(n,t){var e=/^(?:0|[1-9]\d*)$/;n.exports=function(n,t){var i=typeof n;return!!(t=null==t?9007199254740991:t)&&("number"==i||"symbol"!=i&&e.test(n))&&n>-1&&n%1==0&&n<t}},function(n,t,e){var i=e(191),a=e(192),r=e(193),l=r&&r.isTypedArray,o=l?a(l):i;n.exports=o},function(n,t,e){var i=e(71),a=e(41);n.exports=function(n){return null!=n&&a(n.length)&&!i(n)}},function(n,t,e){var i=e(10)(e(6),"Set");n.exports=i},function(n,t,e){var i=e(38);n.exports=function(n){return n==n&&!i(n)}},function(n,t){n.exports=function(n,t){return function(e){return null!=e&&(e[n]===t&&(void 0!==t||n in Object(e)))}}},function(n,t,e){var i=e(86),a=e(22);n.exports=function(n,t){for(var e=0,r=(t=i(t,n)).length;null!=n&&e<r;)n=n[a(t[e++])];return e&&e==r?n:void 0}},function(n,t,e){var i=e(5),a=e(42),r=e(205),l=e(208);n.exports=function(n,t){return i(n)?n:a(n,t)?[n]:r(l(n))}},function(n,t,e){},function(n,t,e){},function(n,t,e){},function(n,t,e){},function(n,t,e){var i=e(141),a=e(146),r=e(217),l=e(225),o=e(234),u=e(99),c=r((function(n){var t=u(n);return o(t)&&(t=void 0),l(i(n,1,o,!0),a(t,2))}));n.exports=c},function(n,t,e){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var i=/["'&<>]/;n.exports=function(n){var t,e=""+n,a=i.exec(e);if(!a)return e;var r="",l=0,o=0;for(l=a.index;l<e.length;l++){switch(e.charCodeAt(l)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#39;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==l&&(r+=e.substring(o,l)),o=l+1,r+=t}return o!==l?r+e.substring(o,l):r}},function(n,t,e){"use strict";var i=e(26),a=e(30),r=e(31),l=e(125),o=e(127),u=e(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)})),c=!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}();i({target:"Array",proto:!0,arity:1,forced:u||c},{push:function(n){var t=a(this),e=r(t),i=arguments.length;o(e+i);for(var u=0;u<i;u++)t[e]=arguments[u],e++;return l(t,e),e}})},function(n,t){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,t,e){var i=e(1),a=e(9),r=i.document,l=a(r)&&a(r.createElement);n.exports=function(n){return l?r.createElement(n):{}}},function(n,t,e){var i=e(3),a=e(2);n.exports=i&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,t,e){var i=e(60),a=e(62),r=i("keys");n.exports=function(n){return r[n]||(r[n]=a(n))}},function(n,t,e){var i=e(4),a=e(8),r=e(28),l=e(116).indexOf,o=e(47),u=i([].push);n.exports=function(n,t){var e,i=r(n),c=0,s=[];for(e in i)!a(o,e)&&a(i,e)&&u(s,e);for(;t.length>c;)a(i,e=t[c++])&&(~l(s,e)||u(s,e));return s}},function(n,t){n.exports=function(n){var t=null==n?0:n.length;return t?n[t-1]:void 0}},function(n,t,e){n.exports=e(242)},function(n,t,e){"use strict";var i=e(26),a=e(122).left,r=e(123),l=e(59),o=e(124);i({target:"Array",proto:!0,forced:!r("reduce")||!o&&l>79&&l<83},{reduce:function(n){var t=arguments.length;return a(this,n,t,t>1?arguments[1]:void 0)}})},function(n,t,e){"use strict";var i={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,r=a&&!i.call({1:2},1);t.f=r?function(n){var t=a(this,n);return!!t&&t.enumerable}:i},function(n,t,e){var i=e(32),a=e(9),r=e(55),l=e(105),o=e(107),u=e(29),c=TypeError,s=u("toPrimitive");n.exports=function(n,t){if(!a(n)||r(n))return n;var e,u=l(n,s);if(u){if(void 0===t&&(t="default"),e=i(u,n,t),!a(e)||r(e))return e;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),o(n,t)}},function(n,t,e){var i=e(16);n.exports=i("navigator","userAgent")||""},function(n,t,e){var i=e(46),a=e(52);n.exports=function(n,t){var e=n[t];return a(e)?void 0:i(e)}},function(n,t){var e=String;n.exports=function(n){try{return e(n)}catch(n){return"Object"}}},function(n,t,e){var i=e(32),a=e(0),r=e(9),l=TypeError;n.exports=function(n,t){var e,o;if("string"===t&&a(e=n.toString)&&!r(o=i(e,n)))return o;if(a(e=n.valueOf)&&!r(o=i(e,n)))return o;if("string"!==t&&a(e=n.toString)&&!r(o=i(e,n)))return o;throw l("Can't convert object to primitive value")}},function(n,t,e){var i=e(0),a=e(15),r=e(109),l=e(35);n.exports=function(n,t,e,o){o||(o={});var u=o.enumerable,c=void 0!==o.name?o.name:t;if(i(e)&&r(e,c,o),o.global)u?n[t]=e:l(t,e);else{try{o.unsafe?n[t]&&(u=!0):delete n[t]}catch(n){}u?n[t]=e:a.f(n,t,{value:e,enumerable:!1,configurable:!o.nonConfigurable,writable:!o.nonWritable})}return n}},function(n,t,e){var i=e(2),a=e(0),r=e(8),l=e(3),o=e(110).CONFIGURABLE,u=e(111),c=e(112),s=c.enforce,m=c.get,p=Object.defineProperty,d=l&&!i((function(){return 8!==p((function(){}),"length",{value:8}).length})),f=String(String).split("String"),g=n.exports=function(n,t,e){"Symbol("===String(t).slice(0,7)&&(t="["+String(t).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),e&&e.getter&&(t="get "+t),e&&e.setter&&(t="set "+t),(!r(n,"name")||o&&n.name!==t)&&(l?p(n,"name",{value:t,configurable:!0}):n.name=t),d&&e&&r(e,"arity")&&n.length!==e.arity&&p(n,"length",{value:e.arity});try{e&&r(e,"constructor")&&e.constructor?l&&p(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var i=s(n);return r(i,"source")||(i.source=f.join("string"==typeof t?t:"")),n};Function.prototype.toString=g((function(){return a(this)&&m(this).source||u(this)}),"toString")},function(n,t,e){var i=e(3),a=e(8),r=Function.prototype,l=i&&Object.getOwnPropertyDescriptor,o=a(r,"name"),u=o&&"something"===function(){}.name,c=o&&(!i||i&&l(r,"name").configurable);n.exports={EXISTS:o,PROPER:u,CONFIGURABLE:c}},function(n,t,e){var i=e(4),a=e(0),r=e(34),l=i(Function.toString);a(r.inspectSource)||(r.inspectSource=function(n){return l(n)}),n.exports=r.inspectSource},function(n,t,e){var i,a,r,l=e(113),o=e(1),u=e(9),c=e(17),s=e(8),m=e(34),p=e(97),d=e(47),f=o.TypeError,g=o.WeakMap;if(l||m.state){var h=m.state||(m.state=new g);h.get=h.get,h.has=h.has,h.set=h.set,i=function(n,t){if(h.has(n))throw f("Object already initialized");return t.facade=n,h.set(n,t),t},a=function(n){return h.get(n)||{}},r=function(n){return h.has(n)}}else{var v=p("state");d[v]=!0,i=function(n,t){if(s(n,v))throw f("Object already initialized");return t.facade=n,c(n,v,t),t},a=function(n){return s(n,v)?n[v]:{}},r=function(n){return s(n,v)}}n.exports={set:i,get:a,has:r,enforce:function(n){return r(n)?a(n):i(n,{})},getterFor:function(n){return function(t){var e;if(!u(t)||(e=a(t)).type!==n)throw f("Incompatible receiver, "+n+" required");return e}}}},function(n,t,e){var i=e(1),a=e(0),r=i.WeakMap;n.exports=a(r)&&/native code/.test(String(r))},function(n,t,e){var i=e(16),a=e(4),r=e(115),l=e(120),o=e(25),u=a([].concat);n.exports=i("Reflect","ownKeys")||function(n){var t=r.f(o(n)),e=l.f;return e?u(t,e(n)):t}},function(n,t,e){var i=e(98),a=e(94).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(n){return i(n,a)}},function(n,t,e){var i=e(28),a=e(117),r=e(31),l=function(n){return function(t,e,l){var o,u=i(t),c=r(u),s=a(l,c);if(n&&e!=e){for(;c>s;)if((o=u[s++])!=o)return!0}else for(;c>s;s++)if((n||s in u)&&u[s]===e)return n||s||0;return!n&&-1}};n.exports={includes:l(!0),indexOf:l(!1)}},function(n,t,e){var i=e(65),a=Math.max,r=Math.min;n.exports=function(n,t){var e=i(n);return e<0?a(e+t,0):r(e,t)}},function(n,t){var e=Math.ceil,i=Math.floor;n.exports=Math.trunc||function(n){var t=+n;return(t>0?i:e)(t)}},function(n,t,e){var i=e(65),a=Math.min;n.exports=function(n){return n>0?a(i(n),9007199254740991):0}},function(n,t){t.f=Object.getOwnPropertySymbols},function(n,t,e){var i=e(2),a=e(0),r=/#|\.prototype\./,l=function(n,t){var e=u[o(n)];return e==s||e!=c&&(a(t)?i(t):!!t)},o=l.normalize=function(n){return String(n).replace(r,".").toLowerCase()},u=l.data={},c=l.NATIVE="N",s=l.POLYFILL="P";n.exports=l},function(n,t,e){var i=e(46),a=e(30),r=e(45),l=e(31),o=TypeError,u=function(n){return function(t,e,u,c){i(e);var s=a(t),m=r(s),p=l(s),d=n?p-1:0,f=n?-1:1;if(u<2)for(;;){if(d in m){c=m[d],d+=f;break}if(d+=f,n?d<0:p<=d)throw o("Reduce of empty array with no initial value")}for(;n?d>=0:p>d;d+=f)d in m&&(c=e(c,m[d],d,s));return c}};n.exports={left:u(!1),right:u(!0)}},function(n,t,e){"use strict";var i=e(2);n.exports=function(n,t){var e=[][n];return!!e&&i((function(){e.call(null,t||function(){return 1},1)}))}},function(n,t,e){var i=e(13),a=e(1);n.exports="process"==i(a.process)},function(n,t,e){"use strict";var i=e(3),a=e(126),r=TypeError,l=Object.getOwnPropertyDescriptor,o=i&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=o?function(n,t){if(a(n)&&!l(n,"length").writable)throw r("Cannot set read only .length");return n.length=t}:function(n,t){return n.length=t}},function(n,t,e){var i=e(13);n.exports=Array.isArray||function(n){return"Array"==i(n)}},function(n,t){var e=TypeError;n.exports=function(n){if(n>9007199254740991)throw e("Maximum allowed index exceeded");return n}},function(n,t,e){var i=e(26),a=e(1),r=e(129),l=e(130),o=a.WebAssembly,u=7!==Error("e",{cause:7}).cause,c=function(n,t){var e={};e[n]=l(n,t,u),i({global:!0,constructor:!0,arity:1,forced:u},e)},s=function(n,t){if(o&&o[n]){var e={};e[n]=l("WebAssembly."+n,t,u),i({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:u},e)}};c("Error",(function(n){return function(t){return r(n,this,arguments)}})),c("EvalError",(function(n){return function(t){return r(n,this,arguments)}})),c("RangeError",(function(n){return function(t){return r(n,this,arguments)}})),c("ReferenceError",(function(n){return function(t){return r(n,this,arguments)}})),c("SyntaxError",(function(n){return function(t){return r(n,this,arguments)}})),c("TypeError",(function(n){return function(t){return r(n,this,arguments)}})),c("URIError",(function(n){return function(t){return r(n,this,arguments)}})),s("CompileError",(function(n){return function(t){return r(n,this,arguments)}})),s("LinkError",(function(n){return function(t){return r(n,this,arguments)}})),s("RuntimeError",(function(n){return function(t){return r(n,this,arguments)}}))},function(n,t,e){var i=e(27),a=Function.prototype,r=a.apply,l=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(i?l.bind(r):function(){return l.apply(r,arguments)})},function(n,t,e){"use strict";var i=e(16),a=e(8),r=e(17),l=e(56),o=e(66),u=e(64),c=e(132),s=e(133),m=e(134),p=e(138),d=e(139),f=e(140),g=e(3),h=e(61);n.exports=function(n,t,e,v){var b=v?2:1,k=n.split("."),y=k[k.length-1],x=i.apply(null,k);if(x){var T=x.prototype;if(!h&&a(T,"cause")&&delete T.cause,!e)return x;var w=i("Error"),I=t((function(n,t){var e=m(v?t:n,void 0),i=v?new x(n):new x;return void 0!==e&&r(i,"message",e),f&&r(i,"stack",d(i.stack,2)),this&&l(T,this)&&s(i,this,I),arguments.length>b&&p(i,arguments[b]),i}));if(I.prototype=T,"Error"!==y?o?o(I,w):u(I,w,{name:!0}):g&&"stackTraceLimit"in x&&(c(I,x,"stackTraceLimit"),c(I,x,"prepareStackTrace")),u(I,x),!h)try{T.name!==y&&r(T,"name",y),T.constructor=I}catch(n){}return I}}},function(n,t,e){var i=e(0),a=String,r=TypeError;n.exports=function(n){if("object"==typeof n||i(n))return n;throw r("Can't set "+a(n)+" as a prototype")}},function(n,t,e){var i=e(15).f;n.exports=function(n,t,e){e in n||i(n,e,{configurable:!0,get:function(){return t[e]},set:function(n){t[e]=n}})}},function(n,t,e){var i=e(0),a=e(9),r=e(66);n.exports=function(n,t,e){var l,o;return r&&i(l=t.constructor)&&l!==e&&a(o=l.prototype)&&o!==e.prototype&&r(n,o),n}},function(n,t,e){var i=e(135);n.exports=function(n,t){return void 0===n?arguments.length<2?"":t:i(n)}},function(n,t,e){var i=e(136),a=String;n.exports=function(n){if("Symbol"===i(n))throw TypeError("Cannot convert a Symbol value to a string");return a(n)}},function(n,t,e){var i=e(137),a=e(0),r=e(13),l=e(29)("toStringTag"),o=Object,u="Arguments"==r(function(){return arguments}());n.exports=i?r:function(n){var t,e,i;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(e=function(n,t){try{return n[t]}catch(n){}}(t=o(n),l))?e:u?r(t):"Object"==(i=r(t))&&a(t.callee)?"Arguments":i}},function(n,t,e){var i={};i[e(29)("toStringTag")]="z",n.exports="[object z]"===String(i)},function(n,t,e){var i=e(9),a=e(17);n.exports=function(n,t){i(t)&&"cause"in t&&a(n,"cause",t.cause)}},function(n,t,e){var i=e(4),a=Error,r=i("".replace),l=String(a("zxcasd").stack),o=/\n\s*at [^:]*:[^\n]*/,u=o.test(l);n.exports=function(n,t){if(u&&"string"==typeof n&&!a.prepareStackTrace)for(;t--;)n=r(n,o,"");return n}},function(n,t,e){var i=e(2),a=e(33);n.exports=!i((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,t,e){var i=e(67),a=e(142);n.exports=function n(t,e,r,l,o){var u=-1,c=t.length;for(r||(r=a),o||(o=[]);++u<c;){var s=t[u];e>0&&r(s)?e>1?n(s,e-1,r,l,o):i(o,s):l||(o[o.length]=s)}return o}},function(n,t,e){var i=e(14),a=e(36),r=e(5),l=i?i.isConcatSpreadable:void 0;n.exports=function(n){return r(n)||a(n)||!!(l&&n&&n[l])}},function(n,t,e){var i=e(12),a=e(11);n.exports=function(n){return a(n)&&"[object Arguments]"==i(n)}},function(n,t,e){var i=e(14),a=Object.prototype,r=a.hasOwnProperty,l=a.toString,o=i?i.toStringTag:void 0;n.exports=function(n){var t=r.call(n,o),e=n[o];try{n[o]=void 0;var i=!0}catch(n){}var a=l.call(n);return i&&(t?n[o]=e:delete n[o]),a}},function(n,t){var e=Object.prototype.toString;n.exports=function(n){return e.call(n)}},function(n,t,e){var i=e(147),a=e(203),r=e(44),l=e(5),o=e(214);n.exports=function(n){return"function"==typeof n?n:null==n?r:"object"==typeof n?l(n)?a(n[0],n[1]):i(n):o(n)}},function(n,t,e){var i=e(148),a=e(202),r=e(84);n.exports=function(n){var t=a(n);return 1==t.length&&t[0][2]?r(t[0][0],t[0][1]):function(e){return e===n||i(e,n,t)}}},function(n,t,e){var i=e(69),a=e(73);n.exports=function(n,t,e,r){var l=e.length,o=l,u=!r;if(null==n)return!o;for(n=Object(n);l--;){var c=e[l];if(u&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++l<o;){var s=(c=e[l])[0],m=n[s],p=c[1];if(u&&c[2]){if(void 0===m&&!(s in n))return!1}else{var d=new i;if(r)var f=r(m,p,s,n,t,d);if(!(void 0===f?a(p,m,3,r,d):f))return!1}}return!0}},function(n,t){n.exports=function(){this.__data__=[],this.size=0}},function(n,t,e){var i=e(19),a=Array.prototype.splice;n.exports=function(n){var t=this.__data__,e=i(t,n);return!(e<0)&&(e==t.length-1?t.pop():a.call(t,e,1),--this.size,!0)}},function(n,t,e){var i=e(19);n.exports=function(n){var t=this.__data__,e=i(t,n);return e<0?void 0:t[e][1]}},function(n,t,e){var i=e(19);n.exports=function(n){return i(this.__data__,n)>-1}},function(n,t,e){var i=e(19);n.exports=function(n,t){var e=this.__data__,a=i(e,n);return a<0?(++this.size,e.push([n,t])):e[a][1]=t,this}},function(n,t,e){var i=e(18);n.exports=function(){this.__data__=new i,this.size=0}},function(n,t){n.exports=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e}},function(n,t){n.exports=function(n){return this.__data__.get(n)}},function(n,t){n.exports=function(n){return this.__data__.has(n)}},function(n,t,e){var i=e(18),a=e(37),r=e(39);n.exports=function(n,t){var e=this.__data__;if(e instanceof i){var l=e.__data__;if(!a||l.length<199)return l.push([n,t]),this.size=++e.size,this;e=this.__data__=new r(l)}return e.set(n,t),this.size=e.size,this}},function(n,t,e){var i=e(71),a=e(160),r=e(38),l=e(72),o=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,s=u.toString,m=c.hasOwnProperty,p=RegExp("^"+s.call(m).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!r(n)||a(n))&&(i(n)?p:o).test(l(n))}},function(n,t,e){var i,a=e(161),r=(i=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"";n.exports=function(n){return!!r&&r in n}},function(n,t,e){var i=e(6)["__core-js_shared__"];n.exports=i},function(n,t){n.exports=function(n,t){return null==n?void 0:n[t]}},function(n,t,e){var i=e(164),a=e(18),r=e(37);n.exports=function(){this.size=0,this.__data__={hash:new i,map:new(r||a),string:new i}}},function(n,t,e){var i=e(165),a=e(166),r=e(167),l=e(168),o=e(169);function u(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var i=n[t];this.set(i[0],i[1])}}u.prototype.clear=i,u.prototype.delete=a,u.prototype.get=r,u.prototype.has=l,u.prototype.set=o,n.exports=u},function(n,t,e){var i=e(20);n.exports=function(){this.__data__=i?i(null):{},this.size=0}},function(n,t){n.exports=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t}},function(n,t,e){var i=e(20),a=Object.prototype.hasOwnProperty;n.exports=function(n){var t=this.__data__;if(i){var e=t[n];return"__lodash_hash_undefined__"===e?void 0:e}return a.call(t,n)?t[n]:void 0}},function(n,t,e){var i=e(20),a=Object.prototype.hasOwnProperty;n.exports=function(n){var t=this.__data__;return i?void 0!==t[n]:a.call(t,n)}},function(n,t,e){var i=e(20);n.exports=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=i&&void 0===t?"__lodash_hash_undefined__":t,this}},function(n,t,e){var i=e(21);n.exports=function(n){var t=i(this,n).delete(n);return this.size-=t?1:0,t}},function(n,t){n.exports=function(n){var t=typeof n;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==n:null===n}},function(n,t,e){var i=e(21);n.exports=function(n){return i(this,n).get(n)}},function(n,t,e){var i=e(21);n.exports=function(n){return i(this,n).has(n)}},function(n,t,e){var i=e(21);n.exports=function(n,t){var e=i(this,n),a=e.size;return e.set(n,t),this.size+=e.size==a?0:1,this}},function(n,t,e){var i=e(69),a=e(74),r=e(179),l=e(182),o=e(198),u=e(5),c=e(78),s=e(80),m="[object Object]",p=Object.prototype.hasOwnProperty;n.exports=function(n,t,e,d,f,g){var h=u(n),v=u(t),b=h?"[object Array]":o(n),k=v?"[object Array]":o(t),y=(b="[object Arguments]"==b?m:b)==m,x=(k="[object Arguments]"==k?m:k)==m,T=b==k;if(T&&c(n)){if(!c(t))return!1;h=!0,y=!1}if(T&&!y)return g||(g=new i),h||s(n)?a(n,t,e,d,f,g):r(n,t,b,e,d,f,g);if(!(1&e)){var w=y&&p.call(n,"__wrapped__"),I=x&&p.call(t,"__wrapped__");if(w||I){var q=w?n.value():n,P=I?t.value():t;return g||(g=new i),f(q,P,e,d,g)}}return!!T&&(g||(g=new i),l(n,t,e,d,f,g))}},function(n,t){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,t){n.exports=function(n){return this.__data__.has(n)}},function(n,t){n.exports=function(n,t){for(var e=-1,i=null==n?0:n.length;++e<i;)if(t(n[e],e,n))return!0;return!1}},function(n,t,e){var i=e(14),a=e(180),r=e(70),l=e(74),o=e(181),u=e(40),c=i?i.prototype:void 0,s=c?c.valueOf:void 0;n.exports=function(n,t,e,i,c,m,p){switch(e){case"[object DataView]":if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=t.byteLength||!m(new a(n),new a(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return r(+n,+t);case"[object Error]":return n.name==t.name&&n.message==t.message;case"[object RegExp]":case"[object String]":return n==t+"";case"[object Map]":var d=o;case"[object Set]":var f=1&i;if(d||(d=u),n.size!=t.size&&!f)return!1;var g=p.get(n);if(g)return g==t;i|=2,p.set(n,t);var h=l(d(n),d(t),i,c,m,p);return p.delete(n),h;case"[object Symbol]":if(s)return s.call(n)==s.call(t)}return!1}},function(n,t,e){var i=e(6).Uint8Array;n.exports=i},function(n,t){n.exports=function(n){var t=-1,e=Array(n.size);return n.forEach((function(n,i){e[++t]=[i,n]})),e}},function(n,t,e){var i=e(183),a=Object.prototype.hasOwnProperty;n.exports=function(n,t,e,r,l,o){var u=1&e,c=i(n),s=c.length;if(s!=i(t).length&&!u)return!1;for(var m=s;m--;){var p=c[m];if(!(u?p in t:a.call(t,p)))return!1}var d=o.get(n),f=o.get(t);if(d&&f)return d==t&&f==n;var g=!0;o.set(n,t),o.set(t,n);for(var h=u;++m<s;){var v=n[p=c[m]],b=t[p];if(r)var k=u?r(b,v,p,t,n,o):r(v,b,p,n,t,o);if(!(void 0===k?v===b||l(v,b,e,r,o):k)){g=!1;break}h||(h="constructor"==p)}if(g&&!h){var y=n.constructor,x=t.constructor;y==x||!("constructor"in n)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof x&&x instanceof x||(g=!1)}return o.delete(n),o.delete(t),g}},function(n,t,e){var i=e(184),a=e(185),r=e(77);n.exports=function(n){return i(n,r,a)}},function(n,t,e){var i=e(67),a=e(5);n.exports=function(n,t,e){var r=t(n);return a(n)?r:i(r,e(n))}},function(n,t,e){var i=e(186),a=e(187),r=Object.prototype.propertyIsEnumerable,l=Object.getOwnPropertySymbols,o=l?function(n){return null==n?[]:(n=Object(n),i(l(n),(function(t){return r.call(n,t)})))}:a;n.exports=o},function(n,t){n.exports=function(n,t){for(var e=-1,i=null==n?0:n.length,a=0,r=[];++e<i;){var l=n[e];t(l,e,n)&&(r[a++]=l)}return r}},function(n,t){n.exports=function(){return[]}},function(n,t,e){var i=e(189),a=e(36),r=e(5),l=e(78),o=e(79),u=e(80),c=Object.prototype.hasOwnProperty;n.exports=function(n,t){var e=r(n),s=!e&&a(n),m=!e&&!s&&l(n),p=!e&&!s&&!m&&u(n),d=e||s||m||p,f=d?i(n.length,String):[],g=f.length;for(var h in n)!t&&!c.call(n,h)||d&&("length"==h||m&&("offset"==h||"parent"==h)||p&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||o(h,g))||f.push(h);return f}},function(n,t){n.exports=function(n,t){for(var e=-1,i=Array(n);++e<n;)i[e]=t(e);return i}},function(n,t){n.exports=function(){return!1}},function(n,t,e){var i=e(12),a=e(41),r=e(11),l={};l["[object Float32Array]"]=l["[object Float64Array]"]=l["[object Int8Array]"]=l["[object Int16Array]"]=l["[object Int32Array]"]=l["[object Uint8Array]"]=l["[object Uint8ClampedArray]"]=l["[object Uint16Array]"]=l["[object Uint32Array]"]=!0,l["[object Arguments]"]=l["[object Array]"]=l["[object ArrayBuffer]"]=l["[object Boolean]"]=l["[object DataView]"]=l["[object Date]"]=l["[object Error]"]=l["[object Function]"]=l["[object Map]"]=l["[object Number]"]=l["[object Object]"]=l["[object RegExp]"]=l["[object Set]"]=l["[object String]"]=l["[object WeakMap]"]=!1,n.exports=function(n){return r(n)&&a(n.length)&&!!l[i(n)]}},function(n,t){n.exports=function(n){return function(t){return n(t)}}},function(n,t,e){(function(n){var i=e(68),a=t&&!t.nodeType&&t,r=a&&"object"==typeof n&&n&&!n.nodeType&&n,l=r&&r.exports===a&&i.process,o=function(){try{var n=r&&r.require&&r.require("util").types;return n||l&&l.binding&&l.binding("util")}catch(n){}}();n.exports=o}).call(this,e(48)(n))},function(n,t,e){var i=e(195),a=e(196),r=Object.prototype.hasOwnProperty;n.exports=function(n){if(!i(n))return a(n);var t=[];for(var e in Object(n))r.call(n,e)&&"constructor"!=e&&t.push(e);return t}},function(n,t){var e=Object.prototype;n.exports=function(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||e)}},function(n,t,e){var i=e(197)(Object.keys,Object);n.exports=i},function(n,t){n.exports=function(n,t){return function(e){return n(t(e))}}},function(n,t,e){var i=e(199),a=e(37),r=e(200),l=e(82),o=e(201),u=e(12),c=e(72),s=c(i),m=c(a),p=c(r),d=c(l),f=c(o),g=u;(i&&"[object DataView]"!=g(new i(new ArrayBuffer(1)))||a&&"[object Map]"!=g(new a)||r&&"[object Promise]"!=g(r.resolve())||l&&"[object Set]"!=g(new l)||o&&"[object WeakMap]"!=g(new o))&&(g=function(n){var t=u(n),e="[object Object]"==t?n.constructor:void 0,i=e?c(e):"";if(i)switch(i){case s:return"[object DataView]";case m:return"[object Map]";case p:return"[object Promise]";case d:return"[object Set]";case f:return"[object WeakMap]"}return t}),n.exports=g},function(n,t,e){var i=e(10)(e(6),"DataView");n.exports=i},function(n,t,e){var i=e(10)(e(6),"Promise");n.exports=i},function(n,t,e){var i=e(10)(e(6),"WeakMap");n.exports=i},function(n,t,e){var i=e(83),a=e(77);n.exports=function(n){for(var t=a(n),e=t.length;e--;){var r=t[e],l=n[r];t[e]=[r,l,i(l)]}return t}},function(n,t,e){var i=e(73),a=e(204),r=e(211),l=e(42),o=e(83),u=e(84),c=e(22);n.exports=function(n,t){return l(n)&&o(t)?u(c(n),t):function(e){var l=a(e,n);return void 0===l&&l===t?r(e,n):i(t,l,3)}}},function(n,t,e){var i=e(85);n.exports=function(n,t,e){var a=null==n?void 0:i(n,t);return void 0===a?e:a}},function(n,t,e){var i=e(206),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,r=/\\(\\)?/g,l=i((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(a,(function(n,e,i,a){t.push(i?a.replace(r,"$1"):e||n)})),t}));n.exports=l},function(n,t,e){var i=e(207);n.exports=function(n){var t=i(n,(function(n){return 500===e.size&&e.clear(),n})),e=t.cache;return t}},function(n,t,e){var i=e(39);function a(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var e=function(){var i=arguments,a=t?t.apply(this,i):i[0],r=e.cache;if(r.has(a))return r.get(a);var l=n.apply(this,i);return e.cache=r.set(a,l)||r,l};return e.cache=new(a.Cache||i),e}a.Cache=i,n.exports=a},function(n,t,e){var i=e(209);n.exports=function(n){return null==n?"":i(n)}},function(n,t,e){var i=e(14),a=e(210),r=e(5),l=e(43),o=i?i.prototype:void 0,u=o?o.toString:void 0;n.exports=function n(t){if("string"==typeof t)return t;if(r(t))return a(t,n)+"";if(l(t))return u?u.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},function(n,t){n.exports=function(n,t){for(var e=-1,i=null==n?0:n.length,a=Array(i);++e<i;)a[e]=t(n[e],e,n);return a}},function(n,t,e){var i=e(212),a=e(213);n.exports=function(n,t){return null!=n&&a(n,t,i)}},function(n,t){n.exports=function(n,t){return null!=n&&t in Object(n)}},function(n,t,e){var i=e(86),a=e(36),r=e(5),l=e(79),o=e(41),u=e(22);n.exports=function(n,t,e){for(var c=-1,s=(t=i(t,n)).length,m=!1;++c<s;){var p=u(t[c]);if(!(m=null!=n&&e(n,p)))break;n=n[p]}return m||++c!=s?m:!!(s=null==n?0:n.length)&&o(s)&&l(p,s)&&(r(n)||a(n))}},function(n,t,e){var i=e(215),a=e(216),r=e(42),l=e(22);n.exports=function(n){return r(n)?i(l(n)):a(n)}},function(n,t){n.exports=function(n){return function(t){return null==t?void 0:t[n]}}},function(n,t,e){var i=e(85);n.exports=function(n){return function(t){return i(t,n)}}},function(n,t,e){var i=e(44),a=e(218),r=e(220);n.exports=function(n,t){return r(a(n,t,i),n+"")}},function(n,t,e){var i=e(219),a=Math.max;n.exports=function(n,t,e){return t=a(void 0===t?n.length-1:t,0),function(){for(var r=arguments,l=-1,o=a(r.length-t,0),u=Array(o);++l<o;)u[l]=r[t+l];l=-1;for(var c=Array(t+1);++l<t;)c[l]=r[l];return c[t]=e(u),i(n,this,c)}}},function(n,t){n.exports=function(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}},function(n,t,e){var i=e(221),a=e(224)(i);n.exports=a},function(n,t,e){var i=e(222),a=e(223),r=e(44),l=a?function(n,t){return a(n,"toString",{configurable:!0,enumerable:!1,value:i(t),writable:!0})}:r;n.exports=l},function(n,t){n.exports=function(n){return function(){return n}}},function(n,t,e){var i=e(10),a=function(){try{var n=i(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,t){var e=Date.now;n.exports=function(n){var t=0,i=0;return function(){var a=e(),r=16-(a-i);if(i=a,r>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(void 0,arguments)}}},function(n,t,e){var i=e(75),a=e(226),r=e(231),l=e(76),o=e(232),u=e(40);n.exports=function(n,t,e){var c=-1,s=a,m=n.length,p=!0,d=[],f=d;if(e)p=!1,s=r;else if(m>=200){var g=t?null:o(n);if(g)return u(g);p=!1,s=l,f=new i}else f=t?[]:d;n:for(;++c<m;){var h=n[c],v=t?t(h):h;if(h=e||0!==h?h:0,p&&v==v){for(var b=f.length;b--;)if(f[b]===v)continue n;t&&f.push(v),d.push(h)}else s(f,v,e)||(f!==d&&f.push(v),d.push(h))}return d}},function(n,t,e){var i=e(227);n.exports=function(n,t){return!!(null==n?0:n.length)&&i(n,t,0)>-1}},function(n,t,e){var i=e(228),a=e(229),r=e(230);n.exports=function(n,t,e){return t==t?r(n,t,e):i(n,a,e)}},function(n,t){n.exports=function(n,t,e,i){for(var a=n.length,r=e+(i?1:-1);i?r--:++r<a;)if(t(n[r],r,n))return r;return-1}},function(n,t){n.exports=function(n){return n!=n}},function(n,t){n.exports=function(n,t,e){for(var i=e-1,a=n.length;++i<a;)if(n[i]===t)return i;return-1}},function(n,t){n.exports=function(n,t,e){for(var i=-1,a=null==n?0:n.length;++i<a;)if(e(t,n[i]))return!0;return!1}},function(n,t,e){var i=e(82),a=e(233),r=e(40),l=i&&1/r(new i([,-0]))[1]==1/0?function(n){return new i(n)}:a;n.exports=l},function(n,t){n.exports=function(){}},function(n,t,e){var i=e(81),a=e(11);n.exports=function(n){return a(n)&&i(n)}},function(n,t,e){"use strict";e(87)},function(n,t,e){},function(n,t,e){},function(n,t,e){},function(n,t,e){"use strict";e(88)},function(n,t,e){"use strict";e(89)},function(n,t,e){"use strict";e(90)},function(n,t,e){"use strict";e.r(t);
/*!
 * Vue.js v2.7.13
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var i=Object.freeze({}),a=Array.isArray;function r(n){return null==n}function l(n){return null!=n}function o(n){return!0===n}function u(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function s(n){return null!==n&&"object"==typeof n}var m=Object.prototype.toString;function p(n){return"[object Object]"===m.call(n)}function d(n){return"[object RegExp]"===m.call(n)}function f(n){var t=parseFloat(String(n));return t>=0&&Math.floor(t)===t&&isFinite(n)}function g(n){return l(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function h(n){return null==n?"":Array.isArray(n)||p(n)&&n.toString===m?JSON.stringify(n,null,2):String(n)}function v(n){var t=parseFloat(n);return isNaN(t)?n:t}function b(n,t){for(var e=Object.create(null),i=n.split(","),a=0;a<i.length;a++)e[i[a]]=!0;return t?function(n){return e[n.toLowerCase()]}:function(n){return e[n]}}b("slot,component",!0);var k=b("key,ref,slot,slot-scope,is");function y(n,t){var e=n.length;if(e){if(t===n[e-1])return void(n.length=e-1);var i=n.indexOf(t);if(i>-1)return n.splice(i,1)}}var x=Object.prototype.hasOwnProperty;function T(n,t){return x.call(n,t)}function w(n){var t=Object.create(null);return function(e){return t[e]||(t[e]=n(e))}}var I=/-(\w)/g,q=w((function(n){return n.replace(I,(function(n,t){return t?t.toUpperCase():""}))})),P=w((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),S=/\B([A-Z])/g,C=w((function(n){return n.replace(S,"-$1").toLowerCase()}));var E=Function.prototype.bind?function(n,t){return n.bind(t)}:function(n,t){function e(e){var i=arguments.length;return i?i>1?n.apply(t,arguments):n.call(t,e):n.call(t)}return e._length=n.length,e};function z(n,t){t=t||0;for(var e=n.length-t,i=new Array(e);e--;)i[e]=n[e+t];return i}function _(n,t){for(var e in t)n[e]=t[e];return n}function D(n){for(var t={},e=0;e<n.length;e++)n[e]&&_(t,n[e]);return t}function A(n,t,e){}var L=function(n,t,e){return!1},N=function(n){return n};function O(n,t){if(n===t)return!0;var e=s(n),i=s(t);if(!e||!i)return!e&&!i&&String(n)===String(t);try{var a=Array.isArray(n),r=Array.isArray(t);if(a&&r)return n.length===t.length&&n.every((function(n,e){return O(n,t[e])}));if(n instanceof Date&&t instanceof Date)return n.getTime()===t.getTime();if(a||r)return!1;var l=Object.keys(n),o=Object.keys(t);return l.length===o.length&&l.every((function(e){return O(n[e],t[e])}))}catch(n){return!1}}function R(n,t){for(var e=0;e<n.length;e++)if(O(n[e],t))return e;return-1}function j(n){var t=!1;return function(){t||(t=!0,n.apply(this,arguments))}}function F(n,t){return n===t?0===n&&1/n!=1/t:n==n||t==t}var M=["component","directive","filter"],B=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:L,isReservedAttr:L,isUnknownElement:L,getTagNamespace:A,parsePlatformTagName:N,mustUseProp:L,async:!0,_lifecycleHooks:B},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(n){var t=(n+"").charCodeAt(0);return 36===t||95===t}function $(n,t,e,i){Object.defineProperty(n,t,{value:e,enumerable:!!i,writable:!0,configurable:!0})}var G=new RegExp("[^".concat(H.source,".$_\\d]"));var Q="__proto__"in{},W="undefined"!=typeof window,K=W&&window.navigator.userAgent.toLowerCase(),Z=K&&/msie|trident/.test(K),J=K&&K.indexOf("msie 9.0")>0,X=K&&K.indexOf("edge/")>0;K&&K.indexOf("android");var Y=K&&/iphone|ipad|ipod|ios/.test(K);K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K);var nn,tn=K&&K.match(/firefox\/(\d+)/),en={}.watch,an=!1;if(W)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){an=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var ln=function(){return void 0===nn&&(nn=!W&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},on=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function un(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,sn="undefined"!=typeof Symbol&&un(Symbol)&&"undefined"!=typeof Reflect&&un(Reflect.ownKeys);cn="undefined"!=typeof Set&&un(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var mn=null;function pn(n){void 0===n&&(n=null),n||mn&&mn._scope.off(),mn=n,n&&n._scope.on()}var dn=function(){function n(n,t,e,i,a,r,l,o){this.tag=n,this.data=t,this.children=e,this.text=i,this.elm=a,this.ns=void 0,this.context=r,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=l,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=o,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),fn=function(n){void 0===n&&(n="");var t=new dn;return t.text=n,t.isComment=!0,t};function gn(n){return new dn(void 0,void 0,void 0,String(n))}function hn(n){var t=new dn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return t.ns=n.ns,t.isStatic=n.isStatic,t.key=n.key,t.isComment=n.isComment,t.fnContext=n.fnContext,t.fnOptions=n.fnOptions,t.fnScopeId=n.fnScopeId,t.asyncMeta=n.asyncMeta,t.isCloned=!0,t}var vn=0,bn=[],kn=function(){function n(){this._pending=!1,this.id=vn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,bn.push(this))},n.prototype.depend=function(t){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var t=this.subs.filter((function(n){return n}));for(var e=0,i=t.length;e<i;e++){0,t[e].update()}},n}();kn.target=null;var yn=[];function xn(n){yn.push(n),kn.target=n}function Tn(){yn.pop(),kn.target=yn[yn.length-1]}var wn=Array.prototype,In=Object.create(wn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var t=wn[n];$(In,n,(function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var a,r=t.apply(this,e),l=this.__ob__;switch(n){case"push":case"unshift":a=e;break;case"splice":a=e.slice(2)}return a&&l.observeArray(a),l.dep.notify(),r}))}));var qn=new WeakMap;function Pn(n){return Sn(n,!0),$(n,"__v_isShallow",!0),n}function Sn(n,t){if(!Cn(n)){Nn(n,t,ln());0}}function Cn(n){return!(!n||!n.__v_isReadonly)}var En=Object.getOwnPropertyNames(In),zn={},_n=!0;function Dn(n){_n=n}var An={notify:A,depend:A,addSub:A,removeSub:A},Ln=function(){function n(n,t,e){if(void 0===t&&(t=!1),void 0===e&&(e=!1),this.value=n,this.shallow=t,this.mock=e,this.dep=e?An:new kn,this.vmCount=0,$(n,"__ob__",this),a(n)){if(!e)if(Q)n.__proto__=In;else for(var i=0,r=En.length;i<r;i++){$(n,o=En[i],In[o])}t||this.observeArray(n)}else{var l=Object.keys(n);for(i=0;i<l.length;i++){var o;On(n,o=l[i],zn,void 0,t,e)}}}return n.prototype.observeArray=function(n){for(var t=0,e=n.length;t<e;t++)Nn(n[t],!1,this.mock)},n}();function Nn(n,t,e){return n&&T(n,"__ob__")&&n.__ob__ instanceof Ln?n.__ob__:!_n||!e&&ln()||!a(n)&&!p(n)||!Object.isExtensible(n)||n.__v_skip||qn.has(n)||Mn(n)||n instanceof dn?void 0:new Ln(n,t,e)}function On(n,t,e,i,r,l){var o=new kn,u=Object.getOwnPropertyDescriptor(n,t);if(!u||!1!==u.configurable){var c=u&&u.get,s=u&&u.set;c&&!s||e!==zn&&2!==arguments.length||(e=n[t]);var m=!r&&Nn(e,!1,l);return Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var t=c?c.call(n):e;return kn.target&&(o.depend(),m&&(m.dep.depend(),a(t)&&Fn(t))),Mn(t)&&!r?t.value:t},set:function(t){var i=c?c.call(n):e;if(F(i,t)){if(s)s.call(n,t);else{if(c)return;if(!r&&Mn(i)&&!Mn(t))return void(i.value=t);e=t}m=!r&&Nn(t,!1,l),o.notify()}}}),o}}function Rn(n,t,e){if(!Cn(n)){var i=n.__ob__;return a(n)&&f(t)?(n.length=Math.max(n.length,t),n.splice(t,1,e),i&&!i.shallow&&i.mock&&Nn(e,!1,!0),e):t in n&&!(t in Object.prototype)?(n[t]=e,e):n._isVue||i&&i.vmCount?e:i?(On(i.value,t,e,void 0,i.shallow,i.mock),i.dep.notify(),e):(n[t]=e,e)}}function jn(n,t){if(a(n)&&f(t))n.splice(t,1);else{var e=n.__ob__;n._isVue||e&&e.vmCount||Cn(n)||T(n,t)&&(delete n[t],e&&e.dep.notify())}}function Fn(n){for(var t=void 0,e=0,i=n.length;e<i;e++)(t=n[e])&&t.__ob__&&t.__ob__.dep.depend(),a(t)&&Fn(t)}function Mn(n){return!(!n||!0!==n.__v_isRef)}function Bn(n,t,e){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var n=t[e];if(Mn(n))return n.value;var i=n&&n.__ob__;return i&&i.dep.depend(),n},set:function(n){var i=t[e];Mn(i)&&!Mn(n)?i.value=n:t[e]=n}})}new WeakMap,new WeakMap;"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Un;var Hn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Un,!n&&Un&&(this.index=(Un.scopes||(Un.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var t=Un;try{return Un=this,n()}finally{Un=t}}else 0},n.prototype.on=function(){Un=this},n.prototype.off=function(){Un=this.parent},n.prototype.stop=function(n){if(this.active){var t=void 0,e=void 0;for(t=0,e=this.effects.length;t<e;t++)this.effects[t].teardown();for(t=0,e=this.cleanups.length;t<e;t++)this.cleanups[t]();if(this.scopes)for(t=0,e=this.scopes.length;t<e;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!n){var i=this.parent.scopes.pop();i&&i!==this&&(this.parent.scopes[this.index]=i,i.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Vn(n){var t=n._provided,e=n.$parent&&n.$parent._provided;return e===t?n._provided=Object.create(e):t}var $n=w((function(n){var t="&"===n.charAt(0),e="~"===(n=t?n.slice(1):n).charAt(0),i="!"===(n=e?n.slice(1):n).charAt(0);return{name:n=i?n.slice(1):n,once:e,capture:i,passive:t}}));function Gn(n,t){function e(){var n=e.fns;if(!a(n))return Ct(n,null,arguments,t,"v-on handler");for(var i=n.slice(),r=0;r<i.length;r++)Ct(i[r],null,arguments,t,"v-on handler")}return e.fns=n,e}function Qn(n,t,e,i,a,l){var u,c,s,m;for(u in n)c=n[u],s=t[u],m=$n(u),r(c)||(r(s)?(r(c.fns)&&(c=n[u]=Gn(c,l)),o(m.once)&&(c=n[u]=a(m.name,c,m.capture)),e(m.name,c,m.capture,m.passive,m.params)):c!==s&&(s.fns=c,n[u]=s));for(u in t)r(n[u])&&i((m=$n(u)).name,t[u],m.capture)}function Wn(n,t,e){var i;n instanceof dn&&(n=n.data.hook||(n.data.hook={}));var a=n[t];function u(){e.apply(this,arguments),y(i.fns,u)}r(a)?i=Gn([u]):l(a.fns)&&o(a.merged)?(i=a).fns.push(u):i=Gn([a,u]),i.merged=!0,n[t]=i}function Kn(n,t,e,i,a){if(l(t)){if(T(t,e))return n[e]=t[e],a||delete t[e],!0;if(T(t,i))return n[e]=t[i],a||delete t[i],!0}return!1}function Zn(n){return u(n)?[gn(n)]:a(n)?function n(t,e){var i,c,s,m,p=[];for(i=0;i<t.length;i++)r(c=t[i])||"boolean"==typeof c||(s=p.length-1,m=p[s],a(c)?c.length>0&&(Jn((c=n(c,"".concat(e||"","_").concat(i)))[0])&&Jn(m)&&(p[s]=gn(m.text+c[0].text),c.shift()),p.push.apply(p,c)):u(c)?Jn(m)?p[s]=gn(m.text+c):""!==c&&p.push(gn(c)):Jn(c)&&Jn(m)?p[s]=gn(m.text+c.text):(o(t._isVList)&&l(c.tag)&&r(c.key)&&l(e)&&(c.key="__vlist".concat(e,"_").concat(i,"__")),p.push(c)));return p}(n):void 0}function Jn(n){return l(n)&&l(n.text)&&!1===n.isComment}function Xn(n,t){var e,i,r,o,u=null;if(a(n)||"string"==typeof n)for(u=new Array(n.length),e=0,i=n.length;e<i;e++)u[e]=t(n[e],e);else if("number"==typeof n)for(u=new Array(n),e=0;e<n;e++)u[e]=t(e+1,e);else if(s(n))if(sn&&n[Symbol.iterator]){u=[];for(var c=n[Symbol.iterator](),m=c.next();!m.done;)u.push(t(m.value,u.length)),m=c.next()}else for(r=Object.keys(n),u=new Array(r.length),e=0,i=r.length;e<i;e++)o=r[e],u[e]=t(n[o],o,e);return l(u)||(u=[]),u._isVList=!0,u}function Yn(n,t,e,i){var a,r=this.$scopedSlots[n];r?(e=e||{},i&&(e=_(_({},i),e)),a=r(e)||(c(t)?t():t)):a=this.$slots[n]||(c(t)?t():t);var l=e&&e.slot;return l?this.$createElement("template",{slot:l},a):a}function nt(n){return _e(this.$options,"filters",n,!0)||N}function tt(n,t){return a(n)?-1===n.indexOf(t):n!==t}function et(n,t,e,i,a){var r=U.keyCodes[t]||e;return a&&i&&!U.keyCodes[t]?tt(a,i):r?tt(r,n):i?C(i)!==t:void 0===n}function it(n,t,e,i,r){if(e)if(s(e)){a(e)&&(e=D(e));var l=void 0,o=function(a){if("class"===a||"style"===a||k(a))l=n;else{var o=n.attrs&&n.attrs.type;l=i||U.mustUseProp(t,o,a)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var u=q(a),c=C(a);u in l||c in l||(l[a]=e[a],r&&((n.on||(n.on={}))["update:".concat(a)]=function(n){e[a]=n}))};for(var u in e)o(u)}else;return n}function at(n,t){var e=this._staticTrees||(this._staticTrees=[]),i=e[n];return i&&!t||lt(i=e[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),i}function rt(n,t,e){return lt(n,"__once__".concat(t).concat(e?"_".concat(e):""),!0),n}function lt(n,t,e){if(a(n))for(var i=0;i<n.length;i++)n[i]&&"string"!=typeof n[i]&&ot(n[i],"".concat(t,"_").concat(i),e);else ot(n,t,e)}function ot(n,t,e){n.isStatic=!0,n.key=t,n.isOnce=e}function ut(n,t){if(t)if(p(t)){var e=n.on=n.on?_({},n.on):{};for(var i in t){var a=e[i],r=t[i];e[i]=a?[].concat(a,r):r}}else;return n}function ct(n,t,e,i){t=t||{$stable:!e};for(var r=0;r<n.length;r++){var l=n[r];a(l)?ct(l,t,e):l&&(l.proxy&&(l.fn.proxy=!0),t[l.key]=l.fn)}return i&&(t.$key=i),t}function st(n,t){for(var e=0;e<t.length;e+=2){var i=t[e];"string"==typeof i&&i&&(n[t[e]]=t[e+1])}return n}function mt(n,t){return"string"==typeof n?t+n:n}function pt(n){n._o=rt,n._n=v,n._s=h,n._l=Xn,n._t=Yn,n._q=O,n._i=R,n._m=at,n._f=nt,n._k=et,n._b=it,n._v=gn,n._e=fn,n._u=ct,n._g=ut,n._d=st,n._p=mt}function dt(n,t){if(!n||!n.length)return{};for(var e={},i=0,a=n.length;i<a;i++){var r=n[i],l=r.data;if(l&&l.attrs&&l.attrs.slot&&delete l.attrs.slot,r.context!==t&&r.fnContext!==t||!l||null==l.slot)(e.default||(e.default=[])).push(r);else{var o=l.slot,u=e[o]||(e[o]=[]);"template"===r.tag?u.push.apply(u,r.children||[]):u.push(r)}}for(var c in e)e[c].every(ft)&&delete e[c];return e}function ft(n){return n.isComment&&!n.asyncFactory||" "===n.text}function gt(n){return n.isComment&&n.asyncFactory}function ht(n,t,e,a){var r,l=Object.keys(e).length>0,o=t?!!t.$stable:!l,u=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(o&&a&&a!==i&&u===a.$key&&!l&&!a.$hasNormal)return a;for(var c in r={},t)t[c]&&"$"!==c[0]&&(r[c]=vt(n,e,c,t[c]))}else r={};for(var s in e)s in r||(r[s]=bt(e,s));return t&&Object.isExtensible(t)&&(t._normalized=r),$(r,"$stable",o),$(r,"$key",u),$(r,"$hasNormal",l),r}function vt(n,t,e,i){var r=function(){var t=mn;pn(n);var e=arguments.length?i.apply(null,arguments):i({}),r=(e=e&&"object"==typeof e&&!a(e)?[e]:Zn(e))&&e[0];return pn(t),e&&(!r||1===e.length&&r.isComment&&!gt(r))?void 0:e};return i.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function bt(n,t){return function(){return n[t]}}function kt(n){return{get attrs(){if(!n._attrsProxy){var t=n._attrsProxy={};$(t,"_v_attr_proxy",!0),yt(t,n.$attrs,i,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||yt(n._listenersProxy={},n.$listeners,i,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||Tt(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:E(n.$emit,n),expose:function(t){t&&Object.keys(t).forEach((function(e){return Bn(n,t,e)}))}}}function yt(n,t,e,i,a){var r=!1;for(var l in t)l in n?t[l]!==e[l]&&(r=!0):(r=!0,xt(n,l,i,a));for(var l in n)l in t||(r=!0,delete n[l]);return r}function xt(n,t,e,i){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){return e[i][t]}})}function Tt(n,t){for(var e in t)n[e]=t[e];for(var e in n)e in t||delete n[e]}var wt=null;function It(n,t){return(n.__esModule||sn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),s(n)?t.extend(n):n}function qt(n){if(a(n))for(var t=0;t<n.length;t++){var e=n[t];if(l(e)&&(l(e.componentOptions)||gt(e)))return e}}function Pt(n,t,e,i,m,p){return(a(e)||u(e))&&(m=i,i=e,e=void 0),o(p)&&(m=2),function(n,t,e,i,u){if(l(e)&&l(e.__ob__))return fn();l(e)&&l(e.is)&&(t=e.is);if(!t)return fn();0;a(i)&&c(i[0])&&((e=e||{}).scopedSlots={default:i[0]},i.length=0);2===u?i=Zn(i):1===u&&(i=function(n){for(var t=0;t<n.length;t++)if(a(n[t]))return Array.prototype.concat.apply([],n);return n}(i));var m,p;if("string"==typeof t){var d=void 0;p=n.$vnode&&n.$vnode.ns||U.getTagNamespace(t),m=U.isReservedTag(t)?new dn(U.parsePlatformTagName(t),e,i,void 0,void 0,n):e&&e.pre||!l(d=_e(n.$options,"components",t))?new dn(t,e,i,void 0,void 0,n):xe(d,e,n,i,t)}else m=xe(t,e,n,i);return a(m)?m:l(m)?(l(p)&&function n(t,e,i){t.ns=e,"foreignObject"===t.tag&&(e=void 0,i=!0);if(l(t.children))for(var a=0,u=t.children.length;a<u;a++){var c=t.children[a];l(c.tag)&&(r(c.ns)||o(i)&&"svg"!==c.tag)&&n(c,e,i)}}(m,p),l(e)&&function(n){s(n.style)&&Ht(n.style);s(n.class)&&Ht(n.class)}(e),m):fn()}(n,t,e,i,m)}function St(n,t,e){xn();try{if(t)for(var i=t;i=i.$parent;){var a=i.$options.errorCaptured;if(a)for(var r=0;r<a.length;r++)try{if(!1===a[r].call(i,n,t,e))return}catch(n){Et(n,i,"errorCaptured hook")}}Et(n,t,e)}finally{Tn()}}function Ct(n,t,e,i,a){var r;try{(r=e?n.apply(t,e):n.call(t))&&!r._isVue&&g(r)&&!r._handled&&(r.catch((function(n){return St(n,i,a+" (Promise/async)")})),r._handled=!0)}catch(n){St(n,i,a)}return r}function Et(n,t,e){if(U.errorHandler)try{return U.errorHandler.call(null,n,t,e)}catch(t){t!==n&&zt(t,null,"config.errorHandler")}zt(n,t,e)}function zt(n,t,e){if(!W||"undefined"==typeof console)throw n;console.error(n)}var _t,Dt=!1,At=[],Lt=!1;function Nt(){Lt=!1;var n=At.slice(0);At.length=0;for(var t=0;t<n.length;t++)n[t]()}if("undefined"!=typeof Promise&&un(Promise)){var Ot=Promise.resolve();_t=function(){Ot.then(Nt),Y&&setTimeout(A)},Dt=!0}else if(Z||"undefined"==typeof MutationObserver||!un(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())_t="undefined"!=typeof setImmediate&&un(setImmediate)?function(){setImmediate(Nt)}:function(){setTimeout(Nt,0)};else{var Rt=1,jt=new MutationObserver(Nt),Ft=document.createTextNode(String(Rt));jt.observe(Ft,{characterData:!0}),_t=function(){Rt=(Rt+1)%2,Ft.data=String(Rt)},Dt=!0}function Mt(n,t){var e;if(At.push((function(){if(n)try{n.call(t)}catch(n){St(n,t,"nextTick")}else e&&e(t)})),Lt||(Lt=!0,_t()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){e=n}))}function Bt(n){return function(t,e){if(void 0===e&&(e=mn),e)return function(n,t,e){var i=n.$options;i[t]=Se(i[t],e)}(e,n,t)}}Bt("beforeMount"),Bt("mounted"),Bt("beforeUpdate"),Bt("updated"),Bt("beforeDestroy"),Bt("destroyed"),Bt("activated"),Bt("deactivated"),Bt("serverPrefetch"),Bt("renderTracked"),Bt("renderTriggered"),Bt("errorCaptured");var Ut=new cn;function Ht(n){return function n(t,e){var i,r,l=a(t);if(!l&&!s(t)||t.__v_skip||Object.isFrozen(t)||t instanceof dn)return;if(t.__ob__){var o=t.__ob__.dep.id;if(e.has(o))return;e.add(o)}if(l)for(i=t.length;i--;)n(t[i],e);else if(Mn(t))n(t.value,e);else for(r=Object.keys(t),i=r.length;i--;)n(t[r[i]],e)}(n,Ut),Ut.clear(),n}var Vt,$t=0,Gt=function(){function n(n,t,e,i,a){var r,l;r=this,void 0===(l=Un&&!Un._vm?Un:n?n._scope:void 0)&&(l=Un),l&&l.active&&l.effects.push(r),(this.vm=n)&&a&&(n._watcher=this),i?(this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync,this.before=i.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=e,this.id=++$t,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",c(t)?this.getter=t:(this.getter=function(n){if(!G.test(n)){var t=n.split(".");return function(n){for(var e=0;e<t.length;e++){if(!n)return;n=n[t[e]]}return n}}}(t),this.getter||(this.getter=A)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;xn(this);var t=this.vm;try{n=this.getter.call(t,t)}catch(n){if(!this.user)throw n;St(n,t,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Ht(n),Tn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var t=n.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(n),this.depIds.has(t)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var t=this.deps[n];this.newDepIds.has(t.id)||t.removeSub(this)}var e=this.depIds;this.depIds=this.newDepIds,this.newDepIds=e,this.newDepIds.clear(),e=this.deps,this.deps=this.newDeps,this.newDeps=e,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():de(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||s(n)||this.deep){var t=this.value;if(this.value=n,this.user){var e='callback for watcher "'.concat(this.expression,'"');Ct(this.cb,this.vm,[n,t],this.vm,e)}else this.cb.call(this.vm,n,t)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&y(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Qt(n,t){Vt.$on(n,t)}function Wt(n,t){Vt.$off(n,t)}function Kt(n,t){var e=Vt;return function i(){var a=t.apply(null,arguments);null!==a&&e.$off(n,i)}}function Zt(n,t,e){Vt=n,Qn(t,e||{},Qt,Wt,Kt,n),Vt=void 0}var Jt=null;function Xt(n){var t=Jt;return Jt=n,function(){Jt=t}}function Yt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function ne(n,t){if(t){if(n._directInactive=!1,Yt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var e=0;e<n.$children.length;e++)ne(n.$children[e]);te(n,"activated")}}function te(n,t,e,i){void 0===i&&(i=!0),xn();var a=mn;i&&pn(n);var r=n.$options[t],l="".concat(t," hook");if(r)for(var o=0,u=r.length;o<u;o++)Ct(r[o],n,e||null,n,l);n._hasHookEvent&&n.$emit("hook:"+t),i&&pn(a),Tn()}var ee=[],ie=[],ae={},re=!1,le=!1,oe=0;var ue=0,ce=Date.now;if(W&&!Z){var se=window.performance;se&&"function"==typeof se.now&&ce()>document.createEvent("Event").timeStamp&&(ce=function(){return se.now()})}var me=function(n,t){if(n.post){if(!t.post)return 1}else if(t.post)return-1;return n.id-t.id};function pe(){var n,t;for(ue=ce(),le=!0,ee.sort(me),oe=0;oe<ee.length;oe++)(n=ee[oe]).before&&n.before(),t=n.id,ae[t]=null,n.run();var e=ie.slice(),i=ee.slice();oe=ee.length=ie.length=0,ae={},re=le=!1,function(n){for(var t=0;t<n.length;t++)n[t]._inactive=!0,ne(n[t],!0)}(e),function(n){var t=n.length;for(;t--;){var e=n[t],i=e.vm;i&&i._watcher===e&&i._isMounted&&!i._isDestroyed&&te(i,"updated")}}(i),function(){for(var n=0;n<bn.length;n++){var t=bn[n];t.subs=t.subs.filter((function(n){return n})),t._pending=!1}bn.length=0}(),on&&U.devtools&&on.emit("flush")}function de(n){var t=n.id;if(null==ae[t]&&(n!==kn.target||!n.noRecurse)){if(ae[t]=!0,le){for(var e=ee.length-1;e>oe&&ee[e].id>n.id;)e--;ee.splice(e+1,0,n)}else ee.push(n);re||(re=!0,Mt(pe))}}function fe(n,t){if(n){for(var e=Object.create(null),i=sn?Reflect.ownKeys(n):Object.keys(n),a=0;a<i.length;a++){var r=i[a];if("__ob__"!==r){var l=n[r].from;if(l in t._provided)e[r]=t._provided[l];else if("default"in n[r]){var o=n[r].default;e[r]=c(o)?o.call(t):o}else 0}}return e}}function ge(n,t,e,r,l){var u,c=this,s=l.options;T(r,"_uid")?(u=Object.create(r))._original=r:(u=r,r=r._original);var m=o(s._compiled),p=!m;this.data=n,this.props=t,this.children=e,this.parent=r,this.listeners=n.on||i,this.injections=fe(s.inject,r),this.slots=function(){return c.$slots||ht(r,n.scopedSlots,c.$slots=dt(e,r)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ht(r,n.scopedSlots,this.slots())}}),m&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=ht(r,n.scopedSlots,this.$slots)),s._scopeId?this._c=function(n,t,e,i){var l=Pt(u,n,t,e,i,p);return l&&!a(l)&&(l.fnScopeId=s._scopeId,l.fnContext=r),l}:this._c=function(n,t,e,i){return Pt(u,n,t,e,i,p)}}function he(n,t,e,i,a){var r=hn(n);return r.fnContext=e,r.fnOptions=i,t.slot&&((r.data||(r.data={})).slot=t.slot),r}function ve(n,t){for(var e in t)n[q(e)]=t[e]}function be(n){return n.name||n.__name||n._componentTag}pt(ge.prototype);var ke={init:function(n,t){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var e=n;ke.prepatch(e,e)}else{(n.componentInstance=function(n,t){var e={_isComponent:!0,_parentVnode:n,parent:t},i=n.data.inlineTemplate;l(i)&&(e.render=i.render,e.staticRenderFns=i.staticRenderFns);return new n.componentOptions.Ctor(e)}(n,Jt)).$mount(t?n.elm:void 0,t)}},prepatch:function(n,t){var e=t.componentOptions;!function(n,t,e,a,r){var l=a.data.scopedSlots,o=n.$scopedSlots,u=!!(l&&!l.$stable||o!==i&&!o.$stable||l&&n.$scopedSlots.$key!==l.$key||!l&&n.$scopedSlots.$key),c=!!(r||n.$options._renderChildren||u),s=n.$vnode;n.$options._parentVnode=a,n.$vnode=a,n._vnode&&(n._vnode.parent=a),n.$options._renderChildren=r;var m=a.data.attrs||i;n._attrsProxy&&yt(n._attrsProxy,m,s.data&&s.data.attrs||i,n,"$attrs")&&(c=!0),n.$attrs=m,e=e||i;var p=n.$options._parentListeners;if(n._listenersProxy&&yt(n._listenersProxy,e,p||i,n,"$listeners"),n.$listeners=n.$options._parentListeners=e,Zt(n,e,p),t&&n.$options.props){Dn(!1);for(var d=n._props,f=n.$options._propKeys||[],g=0;g<f.length;g++){var h=f[g],v=n.$options.props;d[h]=De(h,v,t,n)}Dn(!0),n.$options.propsData=t}c&&(n.$slots=dt(r,a.context),n.$forceUpdate())}(t.componentInstance=n.componentInstance,e.propsData,e.listeners,t,e.children)},insert:function(n){var t,e=n.context,i=n.componentInstance;i._isMounted||(i._isMounted=!0,te(i,"mounted")),n.data.keepAlive&&(e._isMounted?((t=i)._inactive=!1,ie.push(t)):ne(i,!0))},destroy:function(n){var t=n.componentInstance;t._isDestroyed||(n.data.keepAlive?function n(t,e){if(!(e&&(t._directInactive=!0,Yt(t))||t._inactive)){t._inactive=!0;for(var i=0;i<t.$children.length;i++)n(t.$children[i]);te(t,"deactivated")}}(t,!0):t.$destroy())}},ye=Object.keys(ke);function xe(n,t,e,u,c){if(!r(n)){var m=e.$options._base;if(s(n)&&(n=m.extend(n)),"function"==typeof n){var p;if(r(n.cid)&&void 0===(n=function(n,t){if(o(n.error)&&l(n.errorComp))return n.errorComp;if(l(n.resolved))return n.resolved;var e=wt;if(e&&l(n.owners)&&-1===n.owners.indexOf(e)&&n.owners.push(e),o(n.loading)&&l(n.loadingComp))return n.loadingComp;if(e&&!l(n.owners)){var i=n.owners=[e],a=!0,u=null,c=null;e.$on("hook:destroyed",(function(){return y(i,e)}));var m=function(n){for(var t=0,e=i.length;t<e;t++)i[t].$forceUpdate();n&&(i.length=0,null!==u&&(clearTimeout(u),u=null),null!==c&&(clearTimeout(c),c=null))},p=j((function(e){n.resolved=It(e,t),a?i.length=0:m(!0)})),d=j((function(t){l(n.errorComp)&&(n.error=!0,m(!0))})),f=n(p,d);return s(f)&&(g(f)?r(n.resolved)&&f.then(p,d):g(f.component)&&(f.component.then(p,d),l(f.error)&&(n.errorComp=It(f.error,t)),l(f.loading)&&(n.loadingComp=It(f.loading,t),0===f.delay?n.loading=!0:u=setTimeout((function(){u=null,r(n.resolved)&&r(n.error)&&(n.loading=!0,m(!1))}),f.delay||200)),l(f.timeout)&&(c=setTimeout((function(){c=null,r(n.resolved)&&d(null)}),f.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(p=n,m)))return function(n,t,e,i,a){var r=fn();return r.asyncFactory=n,r.asyncMeta={data:t,context:e,children:i,tag:a},r}(p,t,e,u,c);t=t||{},Ge(n),l(t.model)&&function(n,t){var e=n.model&&n.model.prop||"value",i=n.model&&n.model.event||"input";(t.attrs||(t.attrs={}))[e]=t.model.value;var r=t.on||(t.on={}),o=r[i],u=t.model.callback;l(o)?(a(o)?-1===o.indexOf(u):o!==u)&&(r[i]=[u].concat(o)):r[i]=u}(n.options,t);var d=function(n,t,e){var i=t.options.props;if(!r(i)){var a={},o=n.attrs,u=n.props;if(l(o)||l(u))for(var c in i){var s=C(c);Kn(a,u,c,s,!0)||Kn(a,o,c,s,!1)}return a}}(t,n);if(o(n.options.functional))return function(n,t,e,r,o){var u=n.options,c={},s=u.props;if(l(s))for(var m in s)c[m]=De(m,s,t||i);else l(e.attrs)&&ve(c,e.attrs),l(e.props)&&ve(c,e.props);var p=new ge(e,c,o,r,n),d=u.render.call(null,p._c,p);if(d instanceof dn)return he(d,e,p.parent,u,p);if(a(d)){for(var f=Zn(d)||[],g=new Array(f.length),h=0;h<f.length;h++)g[h]=he(f[h],e,p.parent,u,p);return g}}(n,d,t,e,u);var f=t.on;if(t.on=t.nativeOn,o(n.options.abstract)){var h=t.slot;t={},h&&(t.slot=h)}!function(n){for(var t=n.hook||(n.hook={}),e=0;e<ye.length;e++){var i=ye[e],a=t[i],r=ke[i];a===r||a&&a._merged||(t[i]=a?Te(r,a):r)}}(t);var v=be(n.options)||c;return new dn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),t,void 0,void 0,void 0,e,{Ctor:n,propsData:d,listeners:f,tag:c,children:u},p)}}}function Te(n,t){var e=function(e,i){n(e,i),t(e,i)};return e._merged=!0,e}var we=A,Ie=U.optionMergeStrategies;function qe(n,t){if(!t)return n;for(var e,i,a,r=sn?Reflect.ownKeys(t):Object.keys(t),l=0;l<r.length;l++)"__ob__"!==(e=r[l])&&(i=n[e],a=t[e],T(n,e)?i!==a&&p(i)&&p(a)&&qe(i,a):Rn(n,e,a));return n}function Pe(n,t,e){return e?function(){var i=c(t)?t.call(e,e):t,a=c(n)?n.call(e,e):n;return i?qe(i,a):a}:t?n?function(){return qe(c(t)?t.call(this,this):t,c(n)?n.call(this,this):n)}:t:n}function Se(n,t){var e=t?n?n.concat(t):a(t)?t:[t]:n;return e?function(n){for(var t=[],e=0;e<n.length;e++)-1===t.indexOf(n[e])&&t.push(n[e]);return t}(e):e}function Ce(n,t,e,i){var a=Object.create(n||null);return t?_(a,t):a}Ie.data=function(n,t,e){return e?Pe(n,t,e):t&&"function"!=typeof t?n:Pe(n,t)},B.forEach((function(n){Ie[n]=Se})),M.forEach((function(n){Ie[n+"s"]=Ce})),Ie.watch=function(n,t,e,i){if(n===en&&(n=void 0),t===en&&(t=void 0),!t)return Object.create(n||null);if(!n)return t;var r={};for(var l in _(r,n),t){var o=r[l],u=t[l];o&&!a(o)&&(o=[o]),r[l]=o?o.concat(u):a(u)?u:[u]}return r},Ie.props=Ie.methods=Ie.inject=Ie.computed=function(n,t,e,i){if(!n)return t;var a=Object.create(null);return _(a,n),t&&_(a,t),a},Ie.provide=Pe;var Ee=function(n,t){return void 0===t?n:t};function ze(n,t,e){if(c(t)&&(t=t.options),function(n,t){var e=n.props;if(e){var i,r,l={};if(a(e))for(i=e.length;i--;)"string"==typeof(r=e[i])&&(l[q(r)]={type:null});else if(p(e))for(var o in e)r=e[o],l[q(o)]=p(r)?r:{type:r};else 0;n.props=l}}(t),function(n,t){var e=n.inject;if(e){var i=n.inject={};if(a(e))for(var r=0;r<e.length;r++)i[e[r]]={from:e[r]};else if(p(e))for(var l in e){var o=e[l];i[l]=p(o)?_({from:l},o):{from:o}}else 0}}(t),function(n){var t=n.directives;if(t)for(var e in t){var i=t[e];c(i)&&(t[e]={bind:i,update:i})}}(t),!t._base&&(t.extends&&(n=ze(n,t.extends,e)),t.mixins))for(var i=0,r=t.mixins.length;i<r;i++)n=ze(n,t.mixins[i],e);var l,o={};for(l in n)u(l);for(l in t)T(n,l)||u(l);function u(i){var a=Ie[i]||Ee;o[i]=a(n[i],t[i],e,i)}return o}function _e(n,t,e,i){if("string"==typeof e){var a=n[t];if(T(a,e))return a[e];var r=q(e);if(T(a,r))return a[r];var l=P(r);return T(a,l)?a[l]:a[e]||a[r]||a[l]}}function De(n,t,e,i){var a=t[n],r=!T(e,n),l=e[n],o=Oe(Boolean,a.type);if(o>-1)if(r&&!T(a,"default"))l=!1;else if(""===l||l===C(n)){var u=Oe(String,a.type);(u<0||o<u)&&(l=!0)}if(void 0===l){l=function(n,t,e){if(!T(t,"default"))return;var i=t.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[e]&&void 0!==n._props[e])return n._props[e];return c(i)&&"Function"!==Le(t.type)?i.call(n):i}(i,a,n);var s=_n;Dn(!0),Nn(l),Dn(s)}return l}var Ae=/^\s*function (\w+)/;function Le(n){var t=n&&n.toString().match(Ae);return t?t[1]:""}function Ne(n,t){return Le(n)===Le(t)}function Oe(n,t){if(!a(t))return Ne(t,n)?0:-1;for(var e=0,i=t.length;e<i;e++)if(Ne(t[e],n))return e;return-1}var Re={enumerable:!0,configurable:!0,get:A,set:A};function je(n,t,e){Re.get=function(){return this[t][e]},Re.set=function(n){this[t][e]=n},Object.defineProperty(n,e,Re)}function Fe(n){var t=n.$options;if(t.props&&function(n,t){var e=n.$options.propsData||{},i=n._props=Pn({}),a=n.$options._propKeys=[];n.$parent&&Dn(!1);var r=function(r){a.push(r);var l=De(r,t,e,n);On(i,r,l),r in n||je(n,"_props",r)};for(var l in t)r(l);Dn(!0)}(n,t.props),function(n){var t=n.$options,e=t.setup;if(e){var i=n._setupContext=kt(n);pn(n),xn();var a=Ct(e,null,[n._props||Pn({}),i],n,"setup");if(Tn(),pn(),c(a))t.render=a;else if(s(a))if(n._setupState=a,a.__sfc){var r=n._setupProxy={};for(var l in a)"__sfc"!==l&&Bn(r,a,l)}else for(var l in a)V(l)||Bn(n,a,l);else 0}}(n),t.methods&&function(n,t){n.$options.props;for(var e in t)n[e]="function"!=typeof t[e]?A:E(t[e],n)}(n,t.methods),t.data)!function(n){var t=n.$options.data;p(t=n._data=c(t)?function(n,t){xn();try{return n.call(t,t)}catch(n){return St(n,t,"data()"),{}}finally{Tn()}}(t,n):t||{})||(t={});var e=Object.keys(t),i=n.$options.props,a=(n.$options.methods,e.length);for(;a--;){var r=e[a];0,i&&T(i,r)||V(r)||je(n,"_data",r)}var l=Nn(t);l&&l.vmCount++}(n);else{var e=Nn(n._data={});e&&e.vmCount++}t.computed&&function(n,t){var e=n._computedWatchers=Object.create(null),i=ln();for(var a in t){var r=t[a],l=c(r)?r:r.get;0,i||(e[a]=new Gt(n,l||A,A,Me)),a in n||Be(n,a,r)}}(n,t.computed),t.watch&&t.watch!==en&&function(n,t){for(var e in t){var i=t[e];if(a(i))for(var r=0;r<i.length;r++)Ve(n,e,i[r]);else Ve(n,e,i)}}(n,t.watch)}var Me={lazy:!0};function Be(n,t,e){var i=!ln();c(e)?(Re.get=i?Ue(t):He(e),Re.set=A):(Re.get=e.get?i&&!1!==e.cache?Ue(t):He(e.get):A,Re.set=e.set||A),Object.defineProperty(n,t,Re)}function Ue(n){return function(){var t=this._computedWatchers&&this._computedWatchers[n];if(t)return t.dirty&&t.evaluate(),kn.target&&t.depend(),t.value}}function He(n){return function(){return n.call(this,this)}}function Ve(n,t,e,i){return p(e)&&(i=e,e=e.handler),"string"==typeof e&&(e=n[e]),n.$watch(t,e,i)}var $e=0;function Ge(n){var t=n.options;if(n.super){var e=Ge(n.super);if(e!==n.superOptions){n.superOptions=e;var i=function(n){var t,e=n.options,i=n.sealedOptions;for(var a in e)e[a]!==i[a]&&(t||(t={}),t[a]=e[a]);return t}(n);i&&_(n.extendOptions,i),(t=n.options=ze(e,n.extendOptions)).name&&(t.components[t.name]=n)}}return t}function Qe(n){this._init(n)}function We(n){n.cid=0;var t=1;n.extend=function(n){n=n||{};var e=this,i=e.cid,a=n._Ctor||(n._Ctor={});if(a[i])return a[i];var r=be(n)||be(e.options);var l=function(n){this._init(n)};return(l.prototype=Object.create(e.prototype)).constructor=l,l.cid=t++,l.options=ze(e.options,n),l.super=e,l.options.props&&function(n){var t=n.options.props;for(var e in t)je(n.prototype,"_props",e)}(l),l.options.computed&&function(n){var t=n.options.computed;for(var e in t)Be(n.prototype,e,t[e])}(l),l.extend=e.extend,l.mixin=e.mixin,l.use=e.use,M.forEach((function(n){l[n]=e[n]})),r&&(l.options.components[r]=l),l.superOptions=e.options,l.extendOptions=n,l.sealedOptions=_({},l.options),a[i]=l,l}}function Ke(n){return n&&(be(n.Ctor.options)||n.tag)}function Ze(n,t){return a(n)?n.indexOf(t)>-1:"string"==typeof n?n.split(",").indexOf(t)>-1:!!d(n)&&n.test(t)}function Je(n,t){var e=n.cache,i=n.keys,a=n._vnode;for(var r in e){var l=e[r];if(l){var o=l.name;o&&!t(o)&&Xe(e,r,i,a)}}}function Xe(n,t,e,i){var a=n[t];!a||i&&a.tag===i.tag||a.componentInstance.$destroy(),n[t]=null,y(e,t)}Qe.prototype._init=function(n){var t=this;t._uid=$e++,t._isVue=!0,t.__v_skip=!0,t._scope=new Hn(!0),t._scope._vm=!0,n&&n._isComponent?function(n,t){var e=n.$options=Object.create(n.constructor.options),i=t._parentVnode;e.parent=t.parent,e._parentVnode=i;var a=i.componentOptions;e.propsData=a.propsData,e._parentListeners=a.listeners,e._renderChildren=a.children,e._componentTag=a.tag,t.render&&(e.render=t.render,e.staticRenderFns=t.staticRenderFns)}(t,n):t.$options=ze(Ge(t.constructor),n||{},t),t._renderProxy=t,t._self=t,function(n){var t=n.$options,e=t.parent;if(e&&!t.abstract){for(;e.$options.abstract&&e.$parent;)e=e.$parent;e.$children.push(n)}n.$parent=e,n.$root=e?e.$root:n,n.$children=[],n.$refs={},n._provided=e?e._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(t),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var t=n.$options._parentListeners;t&&Zt(n,t)}(t),function(n){n._vnode=null,n._staticTrees=null;var t=n.$options,e=n.$vnode=t._parentVnode,a=e&&e.context;n.$slots=dt(t._renderChildren,a),n.$scopedSlots=e?ht(n.$parent,e.data.scopedSlots,n.$slots):i,n._c=function(t,e,i,a){return Pt(n,t,e,i,a,!1)},n.$createElement=function(t,e,i,a){return Pt(n,t,e,i,a,!0)};var r=e&&e.data;On(n,"$attrs",r&&r.attrs||i,null,!0),On(n,"$listeners",t._parentListeners||i,null,!0)}(t),te(t,"beforeCreate",void 0,!1),function(n){var t=fe(n.$options.inject,n);t&&(Dn(!1),Object.keys(t).forEach((function(e){On(n,e,t[e])})),Dn(!0))}(t),Fe(t),function(n){var t=n.$options.provide;if(t){var e=c(t)?t.call(n):t;if(!s(e))return;for(var i=Vn(n),a=sn?Reflect.ownKeys(e):Object.keys(e),r=0;r<a.length;r++){var l=a[r];Object.defineProperty(i,l,Object.getOwnPropertyDescriptor(e,l))}}}(t),te(t,"created"),t.$options.el&&t.$mount(t.$options.el)},function(n){var t={get:function(){return this._data}},e={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",t),Object.defineProperty(n.prototype,"$props",e),n.prototype.$set=Rn,n.prototype.$delete=jn,n.prototype.$watch=function(n,t,e){if(p(t))return Ve(this,n,t,e);(e=e||{}).user=!0;var i=new Gt(this,n,t,e);if(e.immediate){var a='callback for immediate watcher "'.concat(i.expression,'"');xn(),Ct(t,this,[i.value],this,a),Tn()}return function(){i.teardown()}}}(Qe),function(n){var t=/^hook:/;n.prototype.$on=function(n,e){var i=this;if(a(n))for(var r=0,l=n.length;r<l;r++)i.$on(n[r],e);else(i._events[n]||(i._events[n]=[])).push(e),t.test(n)&&(i._hasHookEvent=!0);return i},n.prototype.$once=function(n,t){var e=this;function i(){e.$off(n,i),t.apply(e,arguments)}return i.fn=t,e.$on(n,i),e},n.prototype.$off=function(n,t){var e=this;if(!arguments.length)return e._events=Object.create(null),e;if(a(n)){for(var i=0,r=n.length;i<r;i++)e.$off(n[i],t);return e}var l,o=e._events[n];if(!o)return e;if(!t)return e._events[n]=null,e;for(var u=o.length;u--;)if((l=o[u])===t||l.fn===t){o.splice(u,1);break}return e},n.prototype.$emit=function(n){var t=this,e=t._events[n];if(e){e=e.length>1?z(e):e;for(var i=z(arguments,1),a='event handler for "'.concat(n,'"'),r=0,l=e.length;r<l;r++)Ct(e[r],t,i,t,a)}return t}}(Qe),function(n){n.prototype._update=function(n,t){var e=this,i=e.$el,a=e._vnode,r=Xt(e);e._vnode=n,e.$el=a?e.__patch__(a,n):e.__patch__(e.$el,n,t,!1),r(),i&&(i.__vue__=null),e.$el&&(e.$el.__vue__=e);for(var l=e;l&&l.$vnode&&l.$parent&&l.$vnode===l.$parent._vnode;)l.$parent.$el=l.$el,l=l.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){te(n,"beforeDestroy"),n._isBeingDestroyed=!0;var t=n.$parent;!t||t._isBeingDestroyed||n.$options.abstract||y(t.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),te(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Qe),function(n){pt(n.prototype),n.prototype.$nextTick=function(n){return Mt(n,this)},n.prototype._render=function(){var n,t=this,e=t.$options,i=e.render,r=e._parentVnode;r&&t._isMounted&&(t.$scopedSlots=ht(t.$parent,r.data.scopedSlots,t.$slots,t.$scopedSlots),t._slotsProxy&&Tt(t._slotsProxy,t.$scopedSlots)),t.$vnode=r;try{pn(t),wt=t,n=i.call(t._renderProxy,t.$createElement)}catch(e){St(e,t,"render"),n=t._vnode}finally{wt=null,pn()}return a(n)&&1===n.length&&(n=n[0]),n instanceof dn||(n=fn()),n.parent=r,n}}(Qe);var Ye=[String,RegExp,Array],ni={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ye,exclude:Ye,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,t=this.keys,e=this.vnodeToCache,i=this.keyToCache;if(e){var a=e.tag,r=e.componentInstance,l=e.componentOptions;n[i]={name:Ke(l),tag:a,componentInstance:r},t.push(i),this.max&&t.length>parseInt(this.max)&&Xe(n,t[0],t,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Xe(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(t){Je(n,(function(n){return Ze(t,n)}))})),this.$watch("exclude",(function(t){Je(n,(function(n){return!Ze(t,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,t=qt(n),e=t&&t.componentOptions;if(e){var i=Ke(e),a=this.include,r=this.exclude;if(a&&(!i||!Ze(a,i))||r&&i&&Ze(r,i))return t;var l=this.cache,o=this.keys,u=null==t.key?e.Ctor.cid+(e.tag?"::".concat(e.tag):""):t.key;l[u]?(t.componentInstance=l[u].componentInstance,y(o,u),o.push(u)):(this.vnodeToCache=t,this.keyToCache=u),t.data.keepAlive=!0}return t||n&&n[0]}}};!function(n){var t={get:function(){return U}};Object.defineProperty(n,"config",t),n.util={warn:we,extend:_,mergeOptions:ze,defineReactive:On},n.set=Rn,n.delete=jn,n.nextTick=Mt,n.observable=function(n){return Nn(n),n},n.options=Object.create(null),M.forEach((function(t){n.options[t+"s"]=Object.create(null)})),n.options._base=n,_(n.options.components,ni),function(n){n.use=function(n){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(n)>-1)return this;var e=z(arguments,1);return e.unshift(this),c(n.install)?n.install.apply(n,e):c(n)&&n.apply(null,e),t.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=ze(this.options,n),this}}(n),We(n),function(n){M.forEach((function(t){n[t]=function(n,e){return e?("component"===t&&p(e)&&(e.name=e.name||n,e=this.options._base.extend(e)),"directive"===t&&c(e)&&(e={bind:e,update:e}),this.options[t+"s"][n]=e,e):this.options[t+"s"][n]}}))}(n)}(Qe),Object.defineProperty(Qe.prototype,"$isServer",{get:ln}),Object.defineProperty(Qe.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Qe,"FunctionalRenderContext",{value:ge}),Qe.version="2.7.13";var ti=b("style,class"),ei=b("input,textarea,option,select,progress"),ii=b("contenteditable,draggable,spellcheck"),ai=b("events,caret,typing,plaintext-only"),ri=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),li="http://www.w3.org/1999/xlink",oi=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},ui=function(n){return oi(n)?n.slice(6,n.length):""},ci=function(n){return null==n||!1===n};function si(n){for(var t=n.data,e=n,i=n;l(i.componentInstance);)(i=i.componentInstance._vnode)&&i.data&&(t=mi(i.data,t));for(;l(e=e.parent);)e&&e.data&&(t=mi(t,e.data));return function(n,t){if(l(n)||l(t))return pi(n,di(t));return""}(t.staticClass,t.class)}function mi(n,t){return{staticClass:pi(n.staticClass,t.staticClass),class:l(n.class)?[n.class,t.class]:t.class}}function pi(n,t){return n?t?n+" "+t:n:t||""}function di(n){return Array.isArray(n)?function(n){for(var t,e="",i=0,a=n.length;i<a;i++)l(t=di(n[i]))&&""!==t&&(e&&(e+=" "),e+=t);return e}(n):s(n)?function(n){var t="";for(var e in n)n[e]&&(t&&(t+=" "),t+=e);return t}(n):"string"==typeof n?n:""}var fi={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},gi=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),hi=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),vi=function(n){return gi(n)||hi(n)};var bi=Object.create(null);var ki=b("text,number,password,search,email,tel,url");var yi=Object.freeze({__proto__:null,createElement:function(n,t){var e=document.createElement(n);return"select"!==n||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&e.setAttribute("multiple","multiple"),e},createElementNS:function(n,t){return document.createElementNS(fi[n],t)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,t,e){n.insertBefore(t,e)},removeChild:function(n,t){n.removeChild(t)},appendChild:function(n,t){n.appendChild(t)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,t){n.textContent=t},setStyleScope:function(n,t){n.setAttribute(t,"")}}),xi={create:function(n,t){Ti(t)},update:function(n,t){n.data.ref!==t.data.ref&&(Ti(n,!0),Ti(t))},destroy:function(n){Ti(n,!0)}};function Ti(n,t){var e=n.data.ref;if(l(e)){var i=n.context,r=n.componentInstance||n.elm,o=t?null:r,u=t?void 0:r;if(c(e))Ct(e,i,[o],i,"template ref function");else{var s=n.data.refInFor,m="string"==typeof e||"number"==typeof e,p=Mn(e),d=i.$refs;if(m||p)if(s){var f=m?d[e]:e.value;t?a(f)&&y(f,r):a(f)?f.includes(r)||f.push(r):m?(d[e]=[r],wi(i,e,d[e])):e.value=[r]}else if(m){if(t&&d[e]!==r)return;d[e]=u,wi(i,e,o)}else if(p){if(t&&e.value!==r)return;e.value=o}else 0}}}function wi(n,t,e){var i=n._setupState;i&&T(i,t)&&(Mn(i[t])?i[t].value=e:i[t]=e)}var Ii=new dn("",{},[]),qi=["create","activate","update","remove","destroy"];function Pi(n,t){return n.key===t.key&&n.asyncFactory===t.asyncFactory&&(n.tag===t.tag&&n.isComment===t.isComment&&l(n.data)===l(t.data)&&function(n,t){if("input"!==n.tag)return!0;var e,i=l(e=n.data)&&l(e=e.attrs)&&e.type,a=l(e=t.data)&&l(e=e.attrs)&&e.type;return i===a||ki(i)&&ki(a)}(n,t)||o(n.isAsyncPlaceholder)&&r(t.asyncFactory.error))}function Si(n,t,e){var i,a,r={};for(i=t;i<=e;++i)l(a=n[i].key)&&(r[a]=i);return r}var Ci={create:Ei,update:Ei,destroy:function(n){Ei(n,Ii)}};function Ei(n,t){(n.data.directives||t.data.directives)&&function(n,t){var e,i,a,r=n===Ii,l=t===Ii,o=_i(n.data.directives,n.context),u=_i(t.data.directives,t.context),c=[],s=[];for(e in u)i=o[e],a=u[e],i?(a.oldValue=i.value,a.oldArg=i.arg,Ai(a,"update",t,n),a.def&&a.def.componentUpdated&&s.push(a)):(Ai(a,"bind",t,n),a.def&&a.def.inserted&&c.push(a));if(c.length){var m=function(){for(var e=0;e<c.length;e++)Ai(c[e],"inserted",t,n)};r?Wn(t,"insert",m):m()}s.length&&Wn(t,"postpatch",(function(){for(var e=0;e<s.length;e++)Ai(s[e],"componentUpdated",t,n)}));if(!r)for(e in o)u[e]||Ai(o[e],"unbind",n,n,l)}(n,t)}var zi=Object.create(null);function _i(n,t){var e,i,a=Object.create(null);if(!n)return a;for(e=0;e<n.length;e++){if((i=n[e]).modifiers||(i.modifiers=zi),a[Di(i)]=i,t._setupState&&t._setupState.__sfc){var r=i.def||_e(t,"_setupState","v-"+i.name);i.def="function"==typeof r?{bind:r,update:r}:r}i.def=i.def||_e(t.$options,"directives",i.name)}return a}function Di(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Ai(n,t,e,i,a){var r=n.def&&n.def[t];if(r)try{r(e.elm,n,e,i,a)}catch(i){St(i,e.context,"directive ".concat(n.name," ").concat(t," hook"))}}var Li=[xi,Ci];function Ni(n,t){var e=t.componentOptions;if(!(l(e)&&!1===e.Ctor.options.inheritAttrs||r(n.data.attrs)&&r(t.data.attrs))){var i,a,u=t.elm,c=n.data.attrs||{},s=t.data.attrs||{};for(i in(l(s.__ob__)||o(s._v_attr_proxy))&&(s=t.data.attrs=_({},s)),s)a=s[i],c[i]!==a&&Oi(u,i,a,t.data.pre);for(i in(Z||X)&&s.value!==c.value&&Oi(u,"value",s.value),c)r(s[i])&&(oi(i)?u.removeAttributeNS(li,ui(i)):ii(i)||u.removeAttribute(i))}}function Oi(n,t,e,i){i||n.tagName.indexOf("-")>-1?Ri(n,t,e):ri(t)?ci(e)?n.removeAttribute(t):(e="allowfullscreen"===t&&"EMBED"===n.tagName?"true":t,n.setAttribute(t,e)):ii(t)?n.setAttribute(t,function(n,t){return ci(t)||"false"===t?"false":"contenteditable"===n&&ai(t)?t:"true"}(t,e)):oi(t)?ci(e)?n.removeAttributeNS(li,ui(t)):n.setAttributeNS(li,t,e):Ri(n,t,e)}function Ri(n,t,e){if(ci(e))n.removeAttribute(t);else{if(Z&&!J&&"TEXTAREA"===n.tagName&&"placeholder"===t&&""!==e&&!n.__ieph){var i=function(t){t.stopImmediatePropagation(),n.removeEventListener("input",i)};n.addEventListener("input",i),n.__ieph=!0}n.setAttribute(t,e)}}var ji={create:Ni,update:Ni};function Fi(n,t){var e=t.elm,i=t.data,a=n.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var o=si(t),u=e._transitionClasses;l(u)&&(o=pi(o,di(u))),o!==e._prevClass&&(e.setAttribute("class",o),e._prevClass=o)}}var Mi,Bi={create:Fi,update:Fi};function Ui(n,t,e){var i=Mi;return function a(){var r=t.apply(null,arguments);null!==r&&$i(n,a,e,i)}}var Hi=Dt&&!(tn&&Number(tn[1])<=53);function Vi(n,t,e,i){if(Hi){var a=ue,r=t;t=r._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return r.apply(this,arguments)}}Mi.addEventListener(n,t,an?{capture:e,passive:i}:e)}function $i(n,t,e,i){(i||Mi).removeEventListener(n,t._wrapper||t,e)}function Gi(n,t){if(!r(n.data.on)||!r(t.data.on)){var e=t.data.on||{},i=n.data.on||{};Mi=t.elm||n.elm,function(n){if(l(n.__r)){var t=Z?"change":"input";n[t]=[].concat(n.__r,n[t]||[]),delete n.__r}l(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(e),Qn(e,i,Vi,$i,Ui,t.context),Mi=void 0}}var Qi,Wi={create:Gi,update:Gi,destroy:function(n){return Gi(n,Ii)}};function Ki(n,t){if(!r(n.data.domProps)||!r(t.data.domProps)){var e,i,a=t.elm,u=n.data.domProps||{},c=t.data.domProps||{};for(e in(l(c.__ob__)||o(c._v_attr_proxy))&&(c=t.data.domProps=_({},c)),u)e in c||(a[e]="");for(e in c){if(i=c[e],"textContent"===e||"innerHTML"===e){if(t.children&&(t.children.length=0),i===u[e])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===e&&"PROGRESS"!==a.tagName){a._value=i;var s=r(i)?"":String(i);Zi(a,s)&&(a.value=s)}else if("innerHTML"===e&&hi(a.tagName)&&r(a.innerHTML)){(Qi=Qi||document.createElement("div")).innerHTML="<svg>".concat(i,"</svg>");for(var m=Qi.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;m.firstChild;)a.appendChild(m.firstChild)}else if(i!==u[e])try{a[e]=i}catch(n){}}}}function Zi(n,t){return!n.composing&&("OPTION"===n.tagName||function(n,t){var e=!0;try{e=document.activeElement!==n}catch(n){}return e&&n.value!==t}(n,t)||function(n,t){var e=n.value,i=n._vModifiers;if(l(i)){if(i.number)return v(e)!==v(t);if(i.trim)return e.trim()!==t.trim()}return e!==t}(n,t))}var Ji={create:Ki,update:Ki},Xi=w((function(n){var t={},e=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var i=n.split(e);i.length>1&&(t[i[0].trim()]=i[1].trim())}})),t}));function Yi(n){var t=na(n.style);return n.staticStyle?_(n.staticStyle,t):t}function na(n){return Array.isArray(n)?D(n):"string"==typeof n?Xi(n):n}var ta,ea=/^--/,ia=/\s*!important$/,aa=function(n,t,e){if(ea.test(t))n.style.setProperty(t,e);else if(ia.test(e))n.style.setProperty(C(t),e.replace(ia,""),"important");else{var i=la(t);if(Array.isArray(e))for(var a=0,r=e.length;a<r;a++)n.style[i]=e[a];else n.style[i]=e}},ra=["Webkit","Moz","ms"],la=w((function(n){if(ta=ta||document.createElement("div").style,"filter"!==(n=q(n))&&n in ta)return n;for(var t=n.charAt(0).toUpperCase()+n.slice(1),e=0;e<ra.length;e++){var i=ra[e]+t;if(i in ta)return i}}));function oa(n,t){var e=t.data,i=n.data;if(!(r(e.staticStyle)&&r(e.style)&&r(i.staticStyle)&&r(i.style))){var a,o,u=t.elm,c=i.staticStyle,s=i.normalizedStyle||i.style||{},m=c||s,p=na(t.data.style)||{};t.data.normalizedStyle=l(p.__ob__)?_({},p):p;var d=function(n,t){var e,i={};if(t)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(e=Yi(a.data))&&_(i,e);(e=Yi(n.data))&&_(i,e);for(var r=n;r=r.parent;)r.data&&(e=Yi(r.data))&&_(i,e);return i}(t,!0);for(o in m)r(d[o])&&aa(u,o,"");for(o in d)(a=d[o])!==m[o]&&aa(u,o,null==a?"":a)}}var ua={create:oa,update:oa},ca=/\s+/;function sa(n,t){if(t&&(t=t.trim()))if(n.classList)t.indexOf(" ")>-1?t.split(ca).forEach((function(t){return n.classList.add(t)})):n.classList.add(t);else{var e=" ".concat(n.getAttribute("class")||""," ");e.indexOf(" "+t+" ")<0&&n.setAttribute("class",(e+t).trim())}}function ma(n,t){if(t&&(t=t.trim()))if(n.classList)t.indexOf(" ")>-1?t.split(ca).forEach((function(t){return n.classList.remove(t)})):n.classList.remove(t),n.classList.length||n.removeAttribute("class");else{for(var e=" ".concat(n.getAttribute("class")||""," "),i=" "+t+" ";e.indexOf(i)>=0;)e=e.replace(i," ");(e=e.trim())?n.setAttribute("class",e):n.removeAttribute("class")}}function pa(n){if(n){if("object"==typeof n){var t={};return!1!==n.css&&_(t,da(n.name||"v")),_(t,n),t}return"string"==typeof n?da(n):void 0}}var da=w((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),fa=W&&!J,ha="transition",va="transitionend",ba="animation",ka="animationend";fa&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ha="WebkitTransition",va="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ba="WebkitAnimation",ka="webkitAnimationEnd"));var ya=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function xa(n){ya((function(){ya(n)}))}function Ta(n,t){var e=n._transitionClasses||(n._transitionClasses=[]);e.indexOf(t)<0&&(e.push(t),sa(n,t))}function wa(n,t){n._transitionClasses&&y(n._transitionClasses,t),ma(n,t)}function Ia(n,t,e){var i=Pa(n,t),a=i.type,r=i.timeout,l=i.propCount;if(!a)return e();var o="transition"===a?va:ka,u=0,c=function(){n.removeEventListener(o,s),e()},s=function(t){t.target===n&&++u>=l&&c()};setTimeout((function(){u<l&&c()}),r+1),n.addEventListener(o,s)}var qa=/\b(transform|all)(,|$)/;function Pa(n,t){var e,i=window.getComputedStyle(n),a=(i[ha+"Delay"]||"").split(", "),r=(i[ha+"Duration"]||"").split(", "),l=Sa(a,r),o=(i[ba+"Delay"]||"").split(", "),u=(i[ba+"Duration"]||"").split(", "),c=Sa(o,u),s=0,m=0;return"transition"===t?l>0&&(e="transition",s=l,m=r.length):"animation"===t?c>0&&(e="animation",s=c,m=u.length):m=(e=(s=Math.max(l,c))>0?l>c?"transition":"animation":null)?"transition"===e?r.length:u.length:0,{type:e,timeout:s,propCount:m,hasTransform:"transition"===e&&qa.test(i[ha+"Property"])}}function Sa(n,t){for(;n.length<t.length;)n=n.concat(n);return Math.max.apply(null,t.map((function(t,e){return Ca(t)+Ca(n[e])})))}function Ca(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Ea(n,t){var e=n.elm;l(e._leaveCb)&&(e._leaveCb.cancelled=!0,e._leaveCb());var i=pa(n.data.transition);if(!r(i)&&!l(e._enterCb)&&1===e.nodeType){for(var a=i.css,o=i.type,u=i.enterClass,m=i.enterToClass,p=i.enterActiveClass,d=i.appearClass,f=i.appearToClass,g=i.appearActiveClass,h=i.beforeEnter,b=i.enter,k=i.afterEnter,y=i.enterCancelled,x=i.beforeAppear,T=i.appear,w=i.afterAppear,I=i.appearCancelled,q=i.duration,P=Jt,S=Jt.$vnode;S&&S.parent;)P=S.context,S=S.parent;var C=!P._isMounted||!n.isRootInsert;if(!C||T||""===T){var E=C&&d?d:u,z=C&&g?g:p,_=C&&f?f:m,D=C&&x||h,A=C&&c(T)?T:b,L=C&&w||k,N=C&&I||y,O=v(s(q)?q.enter:q);0;var R=!1!==a&&!J,F=Da(A),M=e._enterCb=j((function(){R&&(wa(e,_),wa(e,z)),M.cancelled?(R&&wa(e,E),N&&N(e)):L&&L(e),e._enterCb=null}));n.data.show||Wn(n,"insert",(function(){var t=e.parentNode,i=t&&t._pending&&t._pending[n.key];i&&i.tag===n.tag&&i.elm._leaveCb&&i.elm._leaveCb(),A&&A(e,M)})),D&&D(e),R&&(Ta(e,E),Ta(e,z),xa((function(){wa(e,E),M.cancelled||(Ta(e,_),F||(_a(O)?setTimeout(M,O):Ia(e,o,M)))}))),n.data.show&&(t&&t(),A&&A(e,M)),R||F||M()}}}function za(n,t){var e=n.elm;l(e._enterCb)&&(e._enterCb.cancelled=!0,e._enterCb());var i=pa(n.data.transition);if(r(i)||1!==e.nodeType)return t();if(!l(e._leaveCb)){var a=i.css,o=i.type,u=i.leaveClass,c=i.leaveToClass,m=i.leaveActiveClass,p=i.beforeLeave,d=i.leave,f=i.afterLeave,g=i.leaveCancelled,h=i.delayLeave,b=i.duration,k=!1!==a&&!J,y=Da(d),x=v(s(b)?b.leave:b);0;var T=e._leaveCb=j((function(){e.parentNode&&e.parentNode._pending&&(e.parentNode._pending[n.key]=null),k&&(wa(e,c),wa(e,m)),T.cancelled?(k&&wa(e,u),g&&g(e)):(t(),f&&f(e)),e._leaveCb=null}));h?h(w):w()}function w(){T.cancelled||(!n.data.show&&e.parentNode&&((e.parentNode._pending||(e.parentNode._pending={}))[n.key]=n),p&&p(e),k&&(Ta(e,u),Ta(e,m),xa((function(){wa(e,u),T.cancelled||(Ta(e,c),y||(_a(x)?setTimeout(T,x):Ia(e,o,T)))}))),d&&d(e,T),k||y||T())}}function _a(n){return"number"==typeof n&&!isNaN(n)}function Da(n){if(r(n))return!1;var t=n.fns;return l(t)?Da(Array.isArray(t)?t[0]:t):(n._length||n.length)>1}function Aa(n,t){!0!==t.data.show&&Ea(t)}var La=function(n){var t,e,i={},c=n.modules,s=n.nodeOps;for(t=0;t<qi.length;++t)for(i[qi[t]]=[],e=0;e<c.length;++e)l(c[e][qi[t]])&&i[qi[t]].push(c[e][qi[t]]);function m(n){var t=s.parentNode(n);l(t)&&s.removeChild(t,n)}function p(n,t,e,a,r,u,c){if(l(n.elm)&&l(u)&&(n=u[c]=hn(n)),n.isRootInsert=!r,!function(n,t,e,a){var r=n.data;if(l(r)){var u=l(n.componentInstance)&&r.keepAlive;if(l(r=r.hook)&&l(r=r.init)&&r(n,!1),l(n.componentInstance))return d(n,t),f(e,n.elm,a),o(u)&&function(n,t,e,a){var r,o=n;for(;o.componentInstance;)if(o=o.componentInstance._vnode,l(r=o.data)&&l(r=r.transition)){for(r=0;r<i.activate.length;++r)i.activate[r](Ii,o);t.push(o);break}f(e,n.elm,a)}(n,t,e,a),!0}}(n,t,e,a)){var m=n.data,p=n.children,h=n.tag;l(h)?(n.elm=n.ns?s.createElementNS(n.ns,h):s.createElement(h,n),k(n),g(n,p,t),l(m)&&v(n,t),f(e,n.elm,a)):o(n.isComment)?(n.elm=s.createComment(n.text),f(e,n.elm,a)):(n.elm=s.createTextNode(n.text),f(e,n.elm,a))}}function d(n,t){l(n.data.pendingInsert)&&(t.push.apply(t,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(v(n,t),k(n)):(Ti(n),t.push(n))}function f(n,t,e){l(n)&&(l(e)?s.parentNode(e)===n&&s.insertBefore(n,t,e):s.appendChild(n,t))}function g(n,t,e){if(a(t)){0;for(var i=0;i<t.length;++i)p(t[i],e,n.elm,null,!0,t,i)}else u(n.text)&&s.appendChild(n.elm,s.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return l(n.tag)}function v(n,e){for(var a=0;a<i.create.length;++a)i.create[a](Ii,n);l(t=n.data.hook)&&(l(t.create)&&t.create(Ii,n),l(t.insert)&&e.push(n))}function k(n){var t;if(l(t=n.fnScopeId))s.setStyleScope(n.elm,t);else for(var e=n;e;)l(t=e.context)&&l(t=t.$options._scopeId)&&s.setStyleScope(n.elm,t),e=e.parent;l(t=Jt)&&t!==n.context&&t!==n.fnContext&&l(t=t.$options._scopeId)&&s.setStyleScope(n.elm,t)}function y(n,t,e,i,a,r){for(;i<=a;++i)p(e[i],r,n,t,!1,e,i)}function x(n){var t,e,a=n.data;if(l(a))for(l(t=a.hook)&&l(t=t.destroy)&&t(n),t=0;t<i.destroy.length;++t)i.destroy[t](n);if(l(t=n.children))for(e=0;e<n.children.length;++e)x(n.children[e])}function T(n,t,e){for(;t<=e;++t){var i=n[t];l(i)&&(l(i.tag)?(w(i),x(i)):m(i.elm))}}function w(n,t){if(l(t)||l(n.data)){var e,a=i.remove.length+1;for(l(t)?t.listeners+=a:t=function(n,t){function e(){0==--e.listeners&&m(n)}return e.listeners=t,e}(n.elm,a),l(e=n.componentInstance)&&l(e=e._vnode)&&l(e.data)&&w(e,t),e=0;e<i.remove.length;++e)i.remove[e](n,t);l(e=n.data.hook)&&l(e=e.remove)?e(n,t):t()}else m(n.elm)}function I(n,t,e,i){for(var a=e;a<i;a++){var r=t[a];if(l(r)&&Pi(n,r))return a}}function q(n,t,e,a,u,c){if(n!==t){l(t.elm)&&l(a)&&(t=a[u]=hn(t));var m=t.elm=n.elm;if(o(n.isAsyncPlaceholder))l(t.asyncFactory.resolved)?C(n.elm,t,e):t.isAsyncPlaceholder=!0;else if(o(t.isStatic)&&o(n.isStatic)&&t.key===n.key&&(o(t.isCloned)||o(t.isOnce)))t.componentInstance=n.componentInstance;else{var d,f=t.data;l(f)&&l(d=f.hook)&&l(d=d.prepatch)&&d(n,t);var g=n.children,v=t.children;if(l(f)&&h(t)){for(d=0;d<i.update.length;++d)i.update[d](n,t);l(d=f.hook)&&l(d=d.update)&&d(n,t)}r(t.text)?l(g)&&l(v)?g!==v&&function(n,t,e,i,a){var o,u,c,m=0,d=0,f=t.length-1,g=t[0],h=t[f],v=e.length-1,b=e[0],k=e[v],x=!a;for(0;m<=f&&d<=v;)r(g)?g=t[++m]:r(h)?h=t[--f]:Pi(g,b)?(q(g,b,i,e,d),g=t[++m],b=e[++d]):Pi(h,k)?(q(h,k,i,e,v),h=t[--f],k=e[--v]):Pi(g,k)?(q(g,k,i,e,v),x&&s.insertBefore(n,g.elm,s.nextSibling(h.elm)),g=t[++m],k=e[--v]):Pi(h,b)?(q(h,b,i,e,d),x&&s.insertBefore(n,h.elm,g.elm),h=t[--f],b=e[++d]):(r(o)&&(o=Si(t,m,f)),r(u=l(b.key)?o[b.key]:I(b,t,m,f))?p(b,i,n,g.elm,!1,e,d):Pi(c=t[u],b)?(q(c,b,i,e,d),t[u]=void 0,x&&s.insertBefore(n,c.elm,g.elm)):p(b,i,n,g.elm,!1,e,d),b=e[++d]);m>f?y(n,r(e[v+1])?null:e[v+1].elm,e,d,v,i):d>v&&T(t,m,f)}(m,g,v,e,c):l(v)?(l(n.text)&&s.setTextContent(m,""),y(m,null,v,0,v.length-1,e)):l(g)?T(g,0,g.length-1):l(n.text)&&s.setTextContent(m,""):n.text!==t.text&&s.setTextContent(m,t.text),l(f)&&l(d=f.hook)&&l(d=d.postpatch)&&d(n,t)}}}function P(n,t,e){if(o(e)&&l(n.parent))n.parent.data.pendingInsert=t;else for(var i=0;i<t.length;++i)t[i].data.hook.insert(t[i])}var S=b("attrs,class,staticClass,staticStyle,key");function C(n,t,e,i){var a,r=t.tag,u=t.data,c=t.children;if(i=i||u&&u.pre,t.elm=n,o(t.isComment)&&l(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(l(u)&&(l(a=u.hook)&&l(a=a.init)&&a(t,!0),l(a=t.componentInstance)))return d(t,e),!0;if(l(r)){if(l(c))if(n.hasChildNodes())if(l(a=u)&&l(a=a.domProps)&&l(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var s=!0,m=n.firstChild,p=0;p<c.length;p++){if(!m||!C(m,c[p],e,i)){s=!1;break}m=m.nextSibling}if(!s||m)return!1}else g(t,c,e);if(l(u)){var f=!1;for(var h in u)if(!S(h)){f=!0,v(t,e);break}!f&&u.class&&Ht(u.class)}}else n.data!==t.text&&(n.data=t.text);return!0}return function(n,t,e,a){if(!r(t)){var u,c=!1,m=[];if(r(n))c=!0,p(t,m);else{var d=l(n.nodeType);if(!d&&Pi(n,t))q(n,t,m,null,null,a);else{if(d){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),e=!0),o(e)&&C(n,t,m))return P(t,m,!0),n;u=n,n=new dn(s.tagName(u).toLowerCase(),{},[],void 0,u)}var f=n.elm,g=s.parentNode(f);if(p(t,m,f._leaveCb?null:g,s.nextSibling(f)),l(t.parent))for(var v=t.parent,b=h(t);v;){for(var k=0;k<i.destroy.length;++k)i.destroy[k](v);if(v.elm=t.elm,b){for(var y=0;y<i.create.length;++y)i.create[y](Ii,v);var w=v.data.hook.insert;if(w.merged)for(var I=1;I<w.fns.length;I++)w.fns[I]()}else Ti(v);v=v.parent}l(g)?T([n],0,0):l(n.tag)&&x(n)}}return P(t,m,c),t.elm}l(n)&&x(n)}}({nodeOps:yi,modules:[ji,Bi,Wi,Ji,ua,W?{create:Aa,activate:Aa,remove:function(n,t){!0!==n.data.show?za(n,t):t()}}:{}].concat(Li)});J&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Ua(n,"input")}));var Na={inserted:function(n,t,e,i){"select"===e.tag?(i.elm&&!i.elm._vOptions?Wn(e,"postpatch",(function(){Na.componentUpdated(n,t,e)})):Oa(n,t,e.context),n._vOptions=[].map.call(n.options,Fa)):("textarea"===e.tag||ki(n.type))&&(n._vModifiers=t.modifiers,t.modifiers.lazy||(n.addEventListener("compositionstart",Ma),n.addEventListener("compositionend",Ba),n.addEventListener("change",Ba),J&&(n.vmodel=!0)))},componentUpdated:function(n,t,e){if("select"===e.tag){Oa(n,t,e.context);var i=n._vOptions,a=n._vOptions=[].map.call(n.options,Fa);if(a.some((function(n,t){return!O(n,i[t])})))(n.multiple?t.value.some((function(n){return ja(n,a)})):t.value!==t.oldValue&&ja(t.value,a))&&Ua(n,"change")}}};function Oa(n,t,e){Ra(n,t,e),(Z||X)&&setTimeout((function(){Ra(n,t,e)}),0)}function Ra(n,t,e){var i=t.value,a=n.multiple;if(!a||Array.isArray(i)){for(var r,l,o=0,u=n.options.length;o<u;o++)if(l=n.options[o],a)r=R(i,Fa(l))>-1,l.selected!==r&&(l.selected=r);else if(O(Fa(l),i))return void(n.selectedIndex!==o&&(n.selectedIndex=o));a||(n.selectedIndex=-1)}}function ja(n,t){return t.every((function(t){return!O(t,n)}))}function Fa(n){return"_value"in n?n._value:n.value}function Ma(n){n.target.composing=!0}function Ba(n){n.target.composing&&(n.target.composing=!1,Ua(n.target,"input"))}function Ua(n,t){var e=document.createEvent("HTMLEvents");e.initEvent(t,!0,!0),n.dispatchEvent(e)}function Ha(n){return!n.componentInstance||n.data&&n.data.transition?n:Ha(n.componentInstance._vnode)}var Va={model:Na,show:{bind:function(n,t,e){var i=t.value,a=(e=Ha(e)).data&&e.data.transition,r=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;i&&a?(e.data.show=!0,Ea(e,(function(){n.style.display=r}))):n.style.display=i?r:"none"},update:function(n,t,e){var i=t.value;!i!=!t.oldValue&&((e=Ha(e)).data&&e.data.transition?(e.data.show=!0,i?Ea(e,(function(){n.style.display=n.__vOriginalDisplay})):za(e,(function(){n.style.display="none"}))):n.style.display=i?n.__vOriginalDisplay:"none")},unbind:function(n,t,e,i,a){a||(n.style.display=n.__vOriginalDisplay)}}},$a={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ga(n){var t=n&&n.componentOptions;return t&&t.Ctor.options.abstract?Ga(qt(t.children)):n}function Qa(n){var t={},e=n.$options;for(var i in e.propsData)t[i]=n[i];var a=e._parentListeners;for(var i in a)t[q(i)]=a[i];return t}function Wa(n,t){if(/\d-keep-alive$/.test(t.tag))return n("keep-alive",{props:t.componentOptions.propsData})}var Ka=function(n){return n.tag||gt(n)},Za=function(n){return"show"===n.name},Ja={name:"transition",props:$a,abstract:!0,render:function(n){var t=this,e=this.$slots.default;if(e&&(e=e.filter(Ka)).length){0;var i=this.mode;0;var a=e[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var r=Ga(a);if(!r)return a;if(this._leaving)return Wa(n,a);var l="__transition-".concat(this._uid,"-");r.key=null==r.key?r.isComment?l+"comment":l+r.tag:u(r.key)?0===String(r.key).indexOf(l)?r.key:l+r.key:r.key;var o=(r.data||(r.data={})).transition=Qa(this),c=this._vnode,s=Ga(c);if(r.data.directives&&r.data.directives.some(Za)&&(r.data.show=!0),s&&s.data&&!function(n,t){return t.key===n.key&&t.tag===n.tag}(r,s)&&!gt(s)&&(!s.componentInstance||!s.componentInstance._vnode.isComment)){var m=s.data.transition=_({},o);if("out-in"===i)return this._leaving=!0,Wn(m,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),Wa(n,a);if("in-out"===i){if(gt(r))return c;var p,d=function(){p()};Wn(o,"afterEnter",d),Wn(o,"enterCancelled",d),Wn(m,"delayLeave",(function(n){p=n}))}}return a}}},Xa=_({tag:String,moveClass:String},$a);function Ya(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function nr(n){n.data.newPos=n.elm.getBoundingClientRect()}function tr(n){var t=n.data.pos,e=n.data.newPos,i=t.left-e.left,a=t.top-e.top;if(i||a){n.data.moved=!0;var r=n.elm.style;r.transform=r.WebkitTransform="translate(".concat(i,"px,").concat(a,"px)"),r.transitionDuration="0s"}}delete Xa.mode;var er={Transition:Ja,TransitionGroup:{props:Xa,beforeMount:function(){var n=this,t=this._update;this._update=function(e,i){var a=Xt(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),t.call(n,e,i)}},render:function(n){for(var t=this.tag||this.$vnode.data.tag||"span",e=Object.create(null),i=this.prevChildren=this.children,a=this.$slots.default||[],r=this.children=[],l=Qa(this),o=0;o<a.length;o++){if((s=a[o]).tag)if(null!=s.key&&0!==String(s.key).indexOf("__vlist"))r.push(s),e[s.key]=s,(s.data||(s.data={})).transition=l;else;}if(i){var u=[],c=[];for(o=0;o<i.length;o++){var s;(s=i[o]).data.transition=l,s.data.pos=s.elm.getBoundingClientRect(),e[s.key]?u.push(s):c.push(s)}this.kept=n(t,null,u),this.removed=c}return n(t,null,r)},updated:function(){var n=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,t)&&(n.forEach(Ya),n.forEach(nr),n.forEach(tr),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var e=n.elm,i=e.style;Ta(e,t),i.transform=i.WebkitTransform=i.transitionDuration="",e.addEventListener(va,e._moveCb=function n(i){i&&i.target!==e||i&&!/transform$/.test(i.propertyName)||(e.removeEventListener(va,n),e._moveCb=null,wa(e,t))})}})))},methods:{hasMove:function(n,t){if(!fa)return!1;if(this._hasMove)return this._hasMove;var e=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){ma(e,n)})),sa(e,t),e.style.display="none",this.$el.appendChild(e);var i=Pa(e);return this.$el.removeChild(e),this._hasMove=i.hasTransform}}}};function ir(n,t){for(var e in t)n[e]=t[e];return n}Qe.config.mustUseProp=function(n,t,e){return"value"===e&&ei(n)&&"button"!==t||"selected"===e&&"option"===n||"checked"===e&&"input"===n||"muted"===e&&"video"===n},Qe.config.isReservedTag=vi,Qe.config.isReservedAttr=ti,Qe.config.getTagNamespace=function(n){return hi(n)?"svg":"math"===n?"math":void 0},Qe.config.isUnknownElement=function(n){if(!W)return!0;if(vi(n))return!1;if(n=n.toLowerCase(),null!=bi[n])return bi[n];var t=document.createElement(n);return n.indexOf("-")>-1?bi[n]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:bi[n]=/HTMLUnknownElement/.test(t.toString())},_(Qe.options.directives,Va),_(Qe.options.components,er),Qe.prototype.__patch__=W?La:A,Qe.prototype.$mount=function(n,t){return function(n,t,e){var i;n.$el=t,n.$options.render||(n.$options.render=fn),te(n,"beforeMount"),i=function(){n._update(n._render(),e)},new Gt(n,i,A,{before:function(){n._isMounted&&!n._isDestroyed&&te(n,"beforeUpdate")}},!0),e=!1;var a=n._preWatchers;if(a)for(var r=0;r<a.length;r++)a[r].run();return null==n.$vnode&&(n._isMounted=!0,te(n,"mounted")),n}(this,n=n&&W?function(n){if("string"==typeof n){var t=document.querySelector(n);return t||document.createElement("div")}return n}(n):void 0,t)},W&&setTimeout((function(){U.devtools&&on&&on.emit("init",Qe)}),0);var ar=/[!'()*]/g,rr=function(n){return"%"+n.charCodeAt(0).toString(16)},lr=/%2C/g,or=function(n){return encodeURIComponent(n).replace(ar,rr).replace(lr,",")};function ur(n){try{return decodeURIComponent(n)}catch(n){0}return n}var cr=function(n){return null==n||"object"==typeof n?n:String(n)};function sr(n){var t={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var e=n.replace(/\+/g," ").split("="),i=ur(e.shift()),a=e.length>0?ur(e.join("=")):null;void 0===t[i]?t[i]=a:Array.isArray(t[i])?t[i].push(a):t[i]=[t[i],a]})),t):t}function mr(n){var t=n?Object.keys(n).map((function(t){var e=n[t];if(void 0===e)return"";if(null===e)return or(t);if(Array.isArray(e)){var i=[];return e.forEach((function(n){void 0!==n&&(null===n?i.push(or(t)):i.push(or(t)+"="+or(n)))})),i.join("&")}return or(t)+"="+or(e)})).filter((function(n){return n.length>0})).join("&"):null;return t?"?"+t:""}var pr=/\/?$/;function dr(n,t,e,i){var a=i&&i.options.stringifyQuery,r=t.query||{};try{r=fr(r)}catch(n){}var l={name:t.name||n&&n.name,meta:n&&n.meta||{},path:t.path||"/",hash:t.hash||"",query:r,params:t.params||{},fullPath:vr(t,a),matched:n?hr(n):[]};return e&&(l.redirectedFrom=vr(e,a)),Object.freeze(l)}function fr(n){if(Array.isArray(n))return n.map(fr);if(n&&"object"==typeof n){var t={};for(var e in n)t[e]=fr(n[e]);return t}return n}var gr=dr(null,{path:"/"});function hr(n){for(var t=[];n;)t.unshift(n),n=n.parent;return t}function vr(n,t){var e=n.path,i=n.query;void 0===i&&(i={});var a=n.hash;return void 0===a&&(a=""),(e||"/")+(t||mr)(i)+a}function br(n,t,e){return t===gr?n===t:!!t&&(n.path&&t.path?n.path.replace(pr,"")===t.path.replace(pr,"")&&(e||n.hash===t.hash&&kr(n.query,t.query)):!(!n.name||!t.name)&&(n.name===t.name&&(e||n.hash===t.hash&&kr(n.query,t.query)&&kr(n.params,t.params))))}function kr(n,t){if(void 0===n&&(n={}),void 0===t&&(t={}),!n||!t)return n===t;var e=Object.keys(n).sort(),i=Object.keys(t).sort();return e.length===i.length&&e.every((function(e,a){var r=n[e];if(i[a]!==e)return!1;var l=t[e];return null==r||null==l?r===l:"object"==typeof r&&"object"==typeof l?kr(r,l):String(r)===String(l)}))}function yr(n){for(var t=0;t<n.matched.length;t++){var e=n.matched[t];for(var i in e.instances){var a=e.instances[i],r=e.enteredCbs[i];if(a&&r){delete e.enteredCbs[i];for(var l=0;l<r.length;l++)a._isBeingDestroyed||r[l](a)}}}}var xr={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,t){var e=t.props,i=t.children,a=t.parent,r=t.data;r.routerView=!0;for(var l=a.$createElement,o=e.name,u=a.$route,c=a._routerViewCache||(a._routerViewCache={}),s=0,m=!1;a&&a._routerRoot!==a;){var p=a.$vnode?a.$vnode.data:{};p.routerView&&s++,p.keepAlive&&a._directInactive&&a._inactive&&(m=!0),a=a.$parent}if(r.routerViewDepth=s,m){var d=c[o],f=d&&d.component;return f?(d.configProps&&Tr(f,r,d.route,d.configProps),l(f,r,i)):l()}var g=u.matched[s],h=g&&g.components[o];if(!g||!h)return c[o]=null,l();c[o]={component:h},r.registerRouteInstance=function(n,t){var e=g.instances[o];(t&&e!==n||!t&&e===n)&&(g.instances[o]=t)},(r.hook||(r.hook={})).prepatch=function(n,t){g.instances[o]=t.componentInstance},r.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==g.instances[o]&&(g.instances[o]=n.componentInstance),yr(u)};var v=g.props&&g.props[o];return v&&(ir(c[o],{route:u,configProps:v}),Tr(h,r,u,v)),l(h,r,i)}};function Tr(n,t,e,i){var a=t.props=function(n,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(n);case"boolean":return t?n.params:void 0;default:0}}(e,i);if(a){a=t.props=ir({},a);var r=t.attrs=t.attrs||{};for(var l in a)n.props&&l in n.props||(r[l]=a[l],delete a[l])}}function wr(n,t,e){var i=n.charAt(0);if("/"===i)return n;if("?"===i||"#"===i)return t+n;var a=t.split("/");e&&a[a.length-1]||a.pop();for(var r=n.replace(/^\//,"").split("/"),l=0;l<r.length;l++){var o=r[l];".."===o?a.pop():"."!==o&&a.push(o)}return""!==a[0]&&a.unshift(""),a.join("/")}function Ir(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var qr=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Pr=Mr,Sr=Dr,Cr=function(n,t){return Lr(Dr(n,t),t)},Er=Lr,zr=Fr,_r=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Dr(n,t){for(var e,i=[],a=0,r=0,l="",o=t&&t.delimiter||"/";null!=(e=_r.exec(n));){var u=e[0],c=e[1],s=e.index;if(l+=n.slice(r,s),r=s+u.length,c)l+=c[1];else{var m=n[r],p=e[2],d=e[3],f=e[4],g=e[5],h=e[6],v=e[7];l&&(i.push(l),l="");var b=null!=p&&null!=m&&m!==p,k="+"===h||"*"===h,y="?"===h||"*"===h,x=e[2]||o,T=f||g;i.push({name:d||a++,prefix:p||"",delimiter:x,optional:y,repeat:k,partial:b,asterisk:!!v,pattern:T?Or(T):v?".*":"[^"+Nr(x)+"]+?"})}}return r<n.length&&(l+=n.substr(r)),l&&i.push(l),i}function Ar(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Lr(n,t){for(var e=new Array(n.length),i=0;i<n.length;i++)"object"==typeof n[i]&&(e[i]=new RegExp("^(?:"+n[i].pattern+")$",jr(t)));return function(t,i){for(var a="",r=t||{},l=(i||{}).pretty?Ar:encodeURIComponent,o=0;o<n.length;o++){var u=n[o];if("string"!=typeof u){var c,s=r[u.name];if(null==s){if(u.optional){u.partial&&(a+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(qr(s)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(s)+"`");if(0===s.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var m=0;m<s.length;m++){if(c=l(s[m]),!e[o].test(c))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===m?u.prefix:u.delimiter)+c}}else{if(c=u.asterisk?encodeURI(s).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):l(s),!e[o].test(c))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+c+'"');a+=u.prefix+c}}else a+=u}return a}}function Nr(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Or(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Rr(n,t){return n.keys=t,n}function jr(n){return n&&n.sensitive?"":"i"}function Fr(n,t,e){qr(t)||(e=t||e,t=[]);for(var i=(e=e||{}).strict,a=!1!==e.end,r="",l=0;l<n.length;l++){var o=n[l];if("string"==typeof o)r+=Nr(o);else{var u=Nr(o.prefix),c="(?:"+o.pattern+")";t.push(o),o.repeat&&(c+="(?:"+u+c+")*"),r+=c=o.optional?o.partial?u+"("+c+")?":"(?:"+u+"("+c+"))?":u+"("+c+")"}}var s=Nr(e.delimiter||"/"),m=r.slice(-s.length)===s;return i||(r=(m?r.slice(0,-s.length):r)+"(?:"+s+"(?=$))?"),r+=a?"$":i&&m?"":"(?="+s+"|$)",Rr(new RegExp("^"+r,jr(e)),t)}function Mr(n,t,e){return qr(t)||(e=t||e,t=[]),e=e||{},n instanceof RegExp?function(n,t){var e=n.source.match(/\((?!\?)/g);if(e)for(var i=0;i<e.length;i++)t.push({name:i,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Rr(n,t)}(n,t):qr(n)?function(n,t,e){for(var i=[],a=0;a<n.length;a++)i.push(Mr(n[a],t,e).source);return Rr(new RegExp("(?:"+i.join("|")+")",jr(e)),t)}(n,t,e):function(n,t,e){return Fr(Dr(n,e),t,e)}(n,t,e)}Pr.parse=Sr,Pr.compile=Cr,Pr.tokensToFunction=Er,Pr.tokensToRegExp=zr;var Br=Object.create(null);function Ur(n,t,e){t=t||{};try{var i=Br[n]||(Br[n]=Pr.compile(n));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),i(t,{pretty:!0})}catch(n){return""}finally{delete t[0]}}function Hr(n,t,e,i){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var r=(a=ir({},n)).params;return r&&"object"==typeof r&&(a.params=ir({},r)),a}if(!a.path&&a.params&&t){(a=ir({},a))._normalized=!0;var l=ir(ir({},t.params),a.params);if(t.name)a.name=t.name,a.params=l;else if(t.matched.length){var o=t.matched[t.matched.length-1].path;a.path=Ur(o,l,t.path)}else 0;return a}var u=function(n){var t="",e="",i=n.indexOf("#");i>=0&&(t=n.slice(i),n=n.slice(0,i));var a=n.indexOf("?");return a>=0&&(e=n.slice(a+1),n=n.slice(0,a)),{path:n,query:e,hash:t}}(a.path||""),c=t&&t.path||"/",s=u.path?wr(u.path,c,e||a.append):c,m=function(n,t,e){void 0===t&&(t={});var i,a=e||sr;try{i=a(n||"")}catch(n){i={}}for(var r in t){var l=t[r];i[r]=Array.isArray(l)?l.map(cr):cr(l)}return i}(u.query,a.query,i&&i.options.parseQuery),p=a.hash||u.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:s,query:m,hash:p}}var Vr,$r=function(){},Gr={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var t=this,e=this.$router,i=this.$route,a=e.resolve(this.to,i,this.append),r=a.location,l=a.route,o=a.href,u={},c=e.options.linkActiveClass,s=e.options.linkExactActiveClass,m=null==c?"router-link-active":c,p=null==s?"router-link-exact-active":s,d=null==this.activeClass?m:this.activeClass,f=null==this.exactActiveClass?p:this.exactActiveClass,g=l.redirectedFrom?dr(null,Hr(l.redirectedFrom),null,e):l;u[f]=br(i,g,this.exactPath),u[d]=this.exact||this.exactPath?u[f]:function(n,t){return 0===n.path.replace(pr,"/").indexOf(t.path.replace(pr,"/"))&&(!t.hash||n.hash===t.hash)&&function(n,t){for(var e in t)if(!(e in n))return!1;return!0}(n.query,t.query)}(i,g);var h=u[f]?this.ariaCurrentValue:null,v=function(n){Qr(n)&&(t.replace?e.replace(r,$r):e.push(r,$r))},b={click:Qr};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var k={class:u},y=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:o,route:l,navigate:v,isActive:u[d],isExactActive:u[f]});if(y){if(1===y.length)return y[0];if(y.length>1||!y.length)return 0===y.length?n():n("span",{},y)}if("a"===this.tag)k.on=b,k.attrs={href:o,"aria-current":h};else{var x=function n(t){var e;if(t)for(var i=0;i<t.length;i++){if("a"===(e=t[i]).tag)return e;if(e.children&&(e=n(e.children)))return e}}(this.$slots.default);if(x){x.isStatic=!1;var T=x.data=ir({},x.data);for(var w in T.on=T.on||{},T.on){var I=T.on[w];w in b&&(T.on[w]=Array.isArray(I)?I:[I])}for(var q in b)q in T.on?T.on[q].push(b[q]):T.on[q]=v;var P=x.data.attrs=ir({},x.data.attrs);P.href=o,P["aria-current"]=h}else k.on=b}return n(this.tag,k,this.$slots.default)}};function Qr(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var t=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return n.preventDefault&&n.preventDefault(),!0}}var Wr="undefined"!=typeof window;function Kr(n,t,e,i,a){var r=t||[],l=e||Object.create(null),o=i||Object.create(null);n.forEach((function(n){!function n(t,e,i,a,r,l){var o=a.path,u=a.name;0;var c=a.pathToRegexpOptions||{},s=function(n,t,e){e||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==t)return n;return Ir(t.path+"/"+n)}(o,r,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var m={path:s,regex:Zr(s,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:u,parent:r,matchAs:l,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var r=l?Ir(l+"/"+a.path):void 0;n(t,e,i,a,m,r)}));e[m.path]||(t.push(m.path),e[m.path]=m);if(void 0!==a.alias)for(var p=Array.isArray(a.alias)?a.alias:[a.alias],d=0;d<p.length;++d){0;var f={path:p[d],children:a.children};n(t,e,i,f,r,m.path||"/")}u&&(i[u]||(i[u]=m))}(r,l,o,n,a)}));for(var u=0,c=r.length;u<c;u++)"*"===r[u]&&(r.push(r.splice(u,1)[0]),c--,u--);return{pathList:r,pathMap:l,nameMap:o}}function Zr(n,t){return Pr(n,[],t)}function Jr(n,t){var e=Kr(n),i=e.pathList,a=e.pathMap,r=e.nameMap;function l(n,e,l){var o=Hr(n,e,!1,t),c=o.name;if(c){var s=r[c];if(!s)return u(null,o);var m=s.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof o.params&&(o.params={}),e&&"object"==typeof e.params)for(var p in e.params)!(p in o.params)&&m.indexOf(p)>-1&&(o.params[p]=e.params[p]);return o.path=Ur(s.path,o.params),u(s,o,l)}if(o.path){o.params={};for(var d=0;d<i.length;d++){var f=i[d],g=a[f];if(Xr(g.regex,o.path,o.params))return u(g,o,l)}}return u(null,o)}function o(n,e){var i=n.redirect,a="function"==typeof i?i(dr(n,e,null,t)):i;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return u(null,e);var o=a,c=o.name,s=o.path,m=e.query,p=e.hash,d=e.params;if(m=o.hasOwnProperty("query")?o.query:m,p=o.hasOwnProperty("hash")?o.hash:p,d=o.hasOwnProperty("params")?o.params:d,c){r[c];return l({_normalized:!0,name:c,query:m,hash:p,params:d},void 0,e)}if(s){var f=function(n,t){return wr(n,t.parent?t.parent.path:"/",!0)}(s,n);return l({_normalized:!0,path:Ur(f,d),query:m,hash:p},void 0,e)}return u(null,e)}function u(n,e,i){return n&&n.redirect?o(n,i||e):n&&n.matchAs?function(n,t,e){var i=l({_normalized:!0,path:Ur(e,t.params)});if(i){var a=i.matched,r=a[a.length-1];return t.params=i.params,u(r,t)}return u(null,t)}(0,e,n.matchAs):dr(n,e,i,t)}return{match:l,addRoute:function(n,t){var e="object"!=typeof n?r[n]:void 0;Kr([t||n],i,a,r,e),e&&e.alias.length&&Kr(e.alias.map((function(n){return{path:n,children:[t]}})),i,a,r,e)},getRoutes:function(){return i.map((function(n){return a[n]}))},addRoutes:function(n){Kr(n,i,a,r)}}}function Xr(n,t,e){var i=t.match(n);if(!i)return!1;if(!e)return!0;for(var a=1,r=i.length;a<r;++a){var l=n.keys[a-1];l&&(e[l.name||"pathMatch"]="string"==typeof i[a]?ur(i[a]):i[a])}return!0}var Yr=Wr&&window.performance&&window.performance.now?window.performance:Date;function nl(){return Yr.now().toFixed(3)}var tl=nl();function el(){return tl}function il(n){return tl=n}var al=Object.create(null);function rl(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(n,""),e=ir({},window.history.state);return e.key=el(),window.history.replaceState(e,"",t),window.addEventListener("popstate",ul),function(){window.removeEventListener("popstate",ul)}}function ll(n,t,e,i){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var r=function(){var n=el();if(n)return al[n]}(),l=a.call(n,t,e,i?r:null);l&&("function"==typeof l.then?l.then((function(n){dl(n,r)})).catch((function(n){0})):dl(l,r))}))}}function ol(){var n=el();n&&(al[n]={x:window.pageXOffset,y:window.pageYOffset})}function ul(n){ol(),n.state&&n.state.key&&il(n.state.key)}function cl(n){return ml(n.x)||ml(n.y)}function sl(n){return{x:ml(n.x)?n.x:window.pageXOffset,y:ml(n.y)?n.y:window.pageYOffset}}function ml(n){return"number"==typeof n}var pl=/^#\d/;function dl(n,t){var e,i="object"==typeof n;if(i&&"string"==typeof n.selector){var a=pl.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var r=n.offset&&"object"==typeof n.offset?n.offset:{};t=function(n,t){var e=document.documentElement.getBoundingClientRect(),i=n.getBoundingClientRect();return{x:i.left-e.left-t.x,y:i.top-e.top-t.y}}(a,r={x:ml((e=r).x)?e.x:0,y:ml(e.y)?e.y:0})}else cl(n)&&(t=sl(n))}else i&&cl(n)&&(t=sl(n));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:n.behavior}):window.scrollTo(t.x,t.y))}var fl,gl=Wr&&((-1===(fl=window.navigator.userAgent).indexOf("Android 2.")&&-1===fl.indexOf("Android 4.0")||-1===fl.indexOf("Mobile Safari")||-1!==fl.indexOf("Chrome")||-1!==fl.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function hl(n,t){ol();var e=window.history;try{if(t){var i=ir({},e.state);i.key=el(),e.replaceState(i,"",n)}else e.pushState({key:il(nl())},"",n)}catch(e){window.location[t?"replace":"assign"](n)}}function vl(n){hl(n,!0)}var bl={redirected:2,aborted:4,cancelled:8,duplicated:16};function kl(n,t){return xl(n,t,bl.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var t={};return Tl.forEach((function(e){e in n&&(t[e]=n[e])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}function yl(n,t){return xl(n,t,bl.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function xl(n,t,e,i){var a=new Error(i);return a._isRouter=!0,a.from=n,a.to=t,a.type=e,a}var Tl=["params","query","hash"];function wl(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function Il(n,t){return wl(n)&&n._isRouter&&(null==t||n.type===t)}function ql(n,t,e){var i=function(a){a>=n.length?e():n[a]?t(n[a],(function(){i(a+1)})):i(a+1)};i(0)}function Pl(n){return function(t,e,i){var a=!1,r=0,l=null;Sl(n,(function(n,t,e,o){if("function"==typeof n&&void 0===n.cid){a=!0,r++;var u,c=zl((function(t){var a;((a=t).__esModule||El&&"Module"===a[Symbol.toStringTag])&&(t=t.default),n.resolved="function"==typeof t?t:Vr.extend(t),e.components[o]=t,--r<=0&&i()})),s=zl((function(n){var t="Failed to resolve async component "+o+": "+n;l||(l=wl(n)?n:new Error(t),i(l))}));try{u=n(c,s)}catch(n){s(n)}if(u)if("function"==typeof u.then)u.then(c,s);else{var m=u.component;m&&"function"==typeof m.then&&m.then(c,s)}}})),a||i()}}function Sl(n,t){return Cl(n.map((function(n){return Object.keys(n.components).map((function(e){return t(n.components[e],n.instances[e],n,e)}))})))}function Cl(n){return Array.prototype.concat.apply([],n)}var El="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function zl(n){var t=!1;return function(){for(var e=[],i=arguments.length;i--;)e[i]=arguments[i];if(!t)return t=!0,n.apply(this,e)}}var _l=function(n,t){this.router=n,this.base=function(n){if(!n)if(Wr){var t=document.querySelector("base");n=(n=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(t),this.current=gr,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Dl(n,t,e,i){var a=Sl(n,(function(n,i,a,r){var l=function(n,t){"function"!=typeof n&&(n=Vr.extend(n));return n.options[t]}(n,t);if(l)return Array.isArray(l)?l.map((function(n){return e(n,i,a,r)})):e(l,i,a,r)}));return Cl(i?a.reverse():a)}function Al(n,t){if(t)return function(){return n.apply(t,arguments)}}_l.prototype.listen=function(n){this.cb=n},_l.prototype.onReady=function(n,t){this.ready?n():(this.readyCbs.push(n),t&&this.readyErrorCbs.push(t))},_l.prototype.onError=function(n){this.errorCbs.push(n)},_l.prototype.transitionTo=function(n,t,e){var i,a=this;try{i=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(t){t(n)})),n}var r=this.current;this.confirmTransition(i,(function(){a.updateRoute(i),t&&t(i),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(i,r)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(i)})))}),(function(n){e&&e(n),n&&!a.ready&&(Il(n,bl.redirected)&&r===gr||(a.ready=!0,a.readyErrorCbs.forEach((function(t){t(n)}))))}))},_l.prototype.confirmTransition=function(n,t,e){var i=this,a=this.current;this.pending=n;var r,l,o=function(n){!Il(n)&&wl(n)&&(i.errorCbs.length?i.errorCbs.forEach((function(t){t(n)})):console.error(n)),e&&e(n)},u=n.matched.length-1,c=a.matched.length-1;if(br(n,a)&&u===c&&n.matched[u]===a.matched[c])return this.ensureURL(),n.hash&&ll(this.router,a,n,!1),o(((l=xl(r=a,n,bl.duplicated,'Avoided redundant navigation to current location: "'+r.fullPath+'".')).name="NavigationDuplicated",l));var s=function(n,t){var e,i=Math.max(n.length,t.length);for(e=0;e<i&&n[e]===t[e];e++);return{updated:t.slice(0,e),activated:t.slice(e),deactivated:n.slice(e)}}(this.current.matched,n.matched),m=s.updated,p=s.deactivated,d=s.activated,f=[].concat(function(n){return Dl(n,"beforeRouteLeave",Al,!0)}(p),this.router.beforeHooks,function(n){return Dl(n,"beforeRouteUpdate",Al)}(m),d.map((function(n){return n.beforeEnter})),Pl(d)),g=function(t,e){if(i.pending!==n)return o(yl(a,n));try{t(n,a,(function(t){!1===t?(i.ensureURL(!0),o(function(n,t){return xl(n,t,bl.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(a,n))):wl(t)?(i.ensureURL(!0),o(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(o(kl(a,n)),"object"==typeof t&&t.replace?i.replace(t):i.push(t)):e(t)}))}catch(n){o(n)}};ql(f,g,(function(){ql(function(n){return Dl(n,"beforeRouteEnter",(function(n,t,e,i){return function(n,t,e){return function(i,a,r){return n(i,a,(function(n){"function"==typeof n&&(t.enteredCbs[e]||(t.enteredCbs[e]=[]),t.enteredCbs[e].push(n)),r(n)}))}}(n,e,i)}))}(d).concat(i.router.resolveHooks),g,(function(){if(i.pending!==n)return o(yl(a,n));i.pending=null,t(n),i.router.app&&i.router.app.$nextTick((function(){yr(n)}))}))}))},_l.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},_l.prototype.setupListeners=function(){},_l.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=gr,this.pending=null};var Ll=function(n){function t(t,e){n.call(this,t,e),this._startLocation=Nl(this.base)}return n&&(t.__proto__=n),t.prototype=Object.create(n&&n.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var t=this.router,e=t.options.scrollBehavior,i=gl&&e;i&&this.listeners.push(rl());var a=function(){var e=n.current,a=Nl(n.base);n.current===gr&&a===n._startLocation||n.transitionTo(a,(function(n){i&&ll(t,n,e,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},t.prototype.go=function(n){window.history.go(n)},t.prototype.push=function(n,t,e){var i=this,a=this.current;this.transitionTo(n,(function(n){hl(Ir(i.base+n.fullPath)),ll(i.router,n,a,!1),t&&t(n)}),e)},t.prototype.replace=function(n,t,e){var i=this,a=this.current;this.transitionTo(n,(function(n){vl(Ir(i.base+n.fullPath)),ll(i.router,n,a,!1),t&&t(n)}),e)},t.prototype.ensureURL=function(n){if(Nl(this.base)!==this.current.fullPath){var t=Ir(this.base+this.current.fullPath);n?hl(t):vl(t)}},t.prototype.getCurrentLocation=function(){return Nl(this.base)},t}(_l);function Nl(n){var t=window.location.pathname,e=t.toLowerCase(),i=n.toLowerCase();return!n||e!==i&&0!==e.indexOf(Ir(i+"/"))||(t=t.slice(n.length)),(t||"/")+window.location.search+window.location.hash}var Ol=function(n){function t(t,e,i){n.call(this,t,e),i&&function(n){var t=Nl(n);if(!/^\/#/.test(t))return window.location.replace(Ir(n+"/#"+t)),!0}(this.base)||Rl()}return n&&(t.__proto__=n),t.prototype=Object.create(n&&n.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,e=gl&&t;e&&this.listeners.push(rl());var i=function(){var t=n.current;Rl()&&n.transitionTo(jl(),(function(i){e&&ll(n.router,i,t,!0),gl||Bl(i.fullPath)}))},a=gl?"popstate":"hashchange";window.addEventListener(a,i),this.listeners.push((function(){window.removeEventListener(a,i)}))}},t.prototype.push=function(n,t,e){var i=this,a=this.current;this.transitionTo(n,(function(n){Ml(n.fullPath),ll(i.router,n,a,!1),t&&t(n)}),e)},t.prototype.replace=function(n,t,e){var i=this,a=this.current;this.transitionTo(n,(function(n){Bl(n.fullPath),ll(i.router,n,a,!1),t&&t(n)}),e)},t.prototype.go=function(n){window.history.go(n)},t.prototype.ensureURL=function(n){var t=this.current.fullPath;jl()!==t&&(n?Ml(t):Bl(t))},t.prototype.getCurrentLocation=function(){return jl()},t}(_l);function Rl(){var n=jl();return"/"===n.charAt(0)||(Bl("/"+n),!1)}function jl(){var n=window.location.href,t=n.indexOf("#");return t<0?"":n=n.slice(t+1)}function Fl(n){var t=window.location.href,e=t.indexOf("#");return(e>=0?t.slice(0,e):t)+"#"+n}function Ml(n){gl?hl(Fl(n)):window.location.hash=n}function Bl(n){gl?vl(Fl(n)):window.location.replace(Fl(n))}var Ul=function(n){function t(t,e){n.call(this,t,e),this.stack=[],this.index=-1}return n&&(t.__proto__=n),t.prototype=Object.create(n&&n.prototype),t.prototype.constructor=t,t.prototype.push=function(n,t,e){var i=this;this.transitionTo(n,(function(n){i.stack=i.stack.slice(0,i.index+1).concat(n),i.index++,t&&t(n)}),e)},t.prototype.replace=function(n,t,e){var i=this;this.transitionTo(n,(function(n){i.stack=i.stack.slice(0,i.index).concat(n),t&&t(n)}),e)},t.prototype.go=function(n){var t=this,e=this.index+n;if(!(e<0||e>=this.stack.length)){var i=this.stack[e];this.confirmTransition(i,(function(){var n=t.current;t.index=e,t.updateRoute(i),t.router.afterHooks.forEach((function(t){t&&t(i,n)}))}),(function(n){Il(n,bl.duplicated)&&(t.index=e)}))}},t.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},t.prototype.ensureURL=function(){},t}(_l),Hl=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Jr(n.routes||[],this);var t=n.mode||"hash";switch(this.fallback="history"===t&&!gl&&!1!==n.fallback,this.fallback&&(t="hash"),Wr||(t="abstract"),this.mode=t,t){case"history":this.history=new Ll(this,n.base);break;case"hash":this.history=new Ol(this,n.base,this.fallback);break;case"abstract":this.history=new Ul(this,n.base);break;default:0}},Vl={currentRoute:{configurable:!0}};Hl.prototype.match=function(n,t,e){return this.matcher.match(n,t,e)},Vl.currentRoute.get=function(){return this.history&&this.history.current},Hl.prototype.init=function(n){var t=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var e=t.apps.indexOf(n);e>-1&&t.apps.splice(e,1),t.app===n&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=n;var e=this.history;if(e instanceof Ll||e instanceof Ol){var i=function(n){e.setupListeners(),function(n){var i=e.current,a=t.options.scrollBehavior;gl&&a&&"fullPath"in n&&ll(t,n,i,!1)}(n)};e.transitionTo(e.getCurrentLocation(),i,i)}e.listen((function(n){t.apps.forEach((function(t){t._route=n}))}))}},Hl.prototype.beforeEach=function(n){return Gl(this.beforeHooks,n)},Hl.prototype.beforeResolve=function(n){return Gl(this.resolveHooks,n)},Hl.prototype.afterEach=function(n){return Gl(this.afterHooks,n)},Hl.prototype.onReady=function(n,t){this.history.onReady(n,t)},Hl.prototype.onError=function(n){this.history.onError(n)},Hl.prototype.push=function(n,t,e){var i=this;if(!t&&!e&&"undefined"!=typeof Promise)return new Promise((function(t,e){i.history.push(n,t,e)}));this.history.push(n,t,e)},Hl.prototype.replace=function(n,t,e){var i=this;if(!t&&!e&&"undefined"!=typeof Promise)return new Promise((function(t,e){i.history.replace(n,t,e)}));this.history.replace(n,t,e)},Hl.prototype.go=function(n){this.history.go(n)},Hl.prototype.back=function(){this.go(-1)},Hl.prototype.forward=function(){this.go(1)},Hl.prototype.getMatchedComponents=function(n){var t=n?n.matched?n:this.resolve(n).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(n){return Object.keys(n.components).map((function(t){return n.components[t]}))}))):[]},Hl.prototype.resolve=function(n,t,e){var i=Hr(n,t=t||this.history.current,e,this),a=this.match(i,t),r=a.redirectedFrom||a.fullPath;return{location:i,route:a,href:function(n,t,e){var i="hash"===e?"#"+t:t;return n?Ir(n+"/"+i):i}(this.history.base,r,this.mode),normalizedTo:i,resolved:a}},Hl.prototype.getRoutes=function(){return this.matcher.getRoutes()},Hl.prototype.addRoute=function(n,t){this.matcher.addRoute(n,t),this.history.current!==gr&&this.history.transitionTo(this.history.getCurrentLocation())},Hl.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==gr&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Hl.prototype,Vl);var $l=Hl;function Gl(n,t){return n.push(t),function(){var e=n.indexOf(t);e>-1&&n.splice(e,1)}}Hl.install=function n(t){if(!n.installed||Vr!==t){n.installed=!0,Vr=t;var e=function(n){return void 0!==n},i=function(n,t){var i=n.$options._parentVnode;e(i)&&e(i=i.data)&&e(i=i.registerRouteInstance)&&i(n,t)};t.mixin({beforeCreate:function(){e(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,i(this,this)},destroyed:function(){i(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",xr),t.component("RouterLink",Gr);var a=t.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},Hl.version="3.6.5",Hl.isNavigationFailure=Il,Hl.NavigationFailureType=bl,Hl.START_LOCATION=gr,Wr&&window.Vue&&window.Vue.use(Hl);e(101);e(93),e(128);var Ql={NotFound:()=>e.e(7).then(e.bind(null,296)),Layout:()=>Promise.all([e.e(0),e.e(3)]).then(e.bind(null,295))},Wl={"v-3de6dc1b":()=>e.e(9).then(e.bind(null,299)),"v-11cd6253":()=>e.e(10).then(e.bind(null,300)),"v-5988e3c3":()=>e.e(11).then(e.bind(null,301)),"v-1257634a":()=>e.e(8).then(e.bind(null,302)),"v-1e385ae6":()=>e.e(12).then(e.bind(null,303)),"v-368631d7":()=>e.e(13).then(e.bind(null,304)),"v-38013f32":()=>e.e(14).then(e.bind(null,305)),"v-25df5650":()=>e.e(17).then(e.bind(null,306)),"v-14aef820":()=>e.e(15).then(e.bind(null,307)),"v-7db894a8":()=>e.e(16).then(e.bind(null,308)),"v-af9dc740":()=>e.e(20).then(e.bind(null,309)),"v-eafafcc0":()=>e.e(19).then(e.bind(null,310)),"v-d479db00":()=>e.e(18).then(e.bind(null,311)),"v-6fb9ed78":()=>e.e(21).then(e.bind(null,312)),"v-faf4082a":()=>e.e(26).then(e.bind(null,313)),"v-1eab5fab":()=>e.e(22).then(e.bind(null,314)),"v-3ba32a6b":()=>e.e(24).then(e.bind(null,315)),"v-bb5bdf2a":()=>e.e(23).then(e.bind(null,316)),"v-6c0207eb":()=>e.e(25).then(e.bind(null,317)),"v-404af24b":()=>e.e(27).then(e.bind(null,318)),"v-3024f548":()=>e.e(29).then(e.bind(null,319)),"v-1aad432b":()=>e.e(28).then(e.bind(null,320)),"v-78f7ce20":()=>e.e(30).then(e.bind(null,321)),"v-c68b7ec0":()=>e.e(31).then(e.bind(null,322)),"v-11a307a0":()=>e.e(34).then(e.bind(null,323)),"v-09112c40":()=>e.e(32).then(e.bind(null,324)),"v-63ac6c31":()=>e.e(38).then(e.bind(null,325)),"v-90bb1d7c":()=>e.e(33).then(e.bind(null,326)),"v-b8d3fc58":()=>e.e(35).then(e.bind(null,327)),"v-35c54d06":()=>e.e(40).then(e.bind(null,328)),"v-20bbec40":()=>e.e(36).then(e.bind(null,329)),"v-d2ed45ea":()=>e.e(41).then(e.bind(null,330)),"v-ee866dce":()=>e.e(42).then(e.bind(null,331)),"v-6a4bd66a":()=>e.e(39).then(e.bind(null,332)),"v-c4e05192":()=>e.e(37).then(e.bind(null,333)),"v-33c981ea":()=>e.e(45).then(e.bind(null,334)),"v-109492a7":()=>e.e(44).then(e.bind(null,335)),"v-405589eb":()=>e.e(47).then(e.bind(null,336)),"v-aaa1c32a":()=>e.e(43).then(e.bind(null,337)),"v-328c7eea":()=>e.e(51).then(e.bind(null,338)),"v-2dcb6ecd":()=>e.e(50).then(e.bind(null,339)),"v-2a30ca6a":()=>e.e(53).then(e.bind(null,340)),"v-438800cf":()=>e.e(48).then(e.bind(null,341)),"v-4e804dcb":()=>e.e(49).then(e.bind(null,342)),"v-6f2c17ea":()=>e.e(55).then(e.bind(null,343)),"v-66f145a5":()=>e.e(52).then(e.bind(null,344)),"v-4e265ee9":()=>e.e(58).then(e.bind(null,345)),"v-427e034b":()=>e.e(46).then(e.bind(null,346)),"v-09e82d2b":()=>e.e(57).then(e.bind(null,347)),"v-4877d186":()=>e.e(54).then(e.bind(null,348)),"v-92dc50aa":()=>e.e(61).then(e.bind(null,349)),"v-5ad110d6":()=>e.e(59).then(e.bind(null,350)),"v-0e3c0313":()=>e.e(60).then(e.bind(null,351)),"v-2df7ad8b":()=>e.e(63).then(e.bind(null,352)),"v-a9b572d6":()=>e.e(62).then(e.bind(null,353)),"v-20b2563b":()=>e.e(56).then(e.bind(null,354))};function Kl(n){const t=Object.create(null);return function(e){return t[e]||(t[e]=n(e))}}const Zl=/-(\w)/g,Jl=Kl(n=>n.replace(Zl,(n,t)=>t?t.toUpperCase():"")),Xl=/\B([A-Z])/g,Yl=Kl(n=>n.replace(Xl,"-$1").toLowerCase()),no=Kl(n=>n.charAt(0).toUpperCase()+n.slice(1));function to(n,t){if(!t)return;if(n(t))return n(t);return t.includes("-")?n(no(Jl(t))):n(no(t))||n(Yl(t))}const eo=Object.assign({},Ql,Wl),io=n=>eo[n],ao=n=>Wl[n],ro=n=>Ql[n],lo=n=>Qe.component(n);function oo(n){return to(ao,n)}function uo(n){return to(ro,n)}function co(n){return to(io,n)}function so(n){return to(lo,n)}function mo(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!so(n)&&co(n)){const t=await co(n)();Qe.component(n,t.default)}}))}function po(n,t){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=t)}var fo=e(91),go=e.n(fo),ho=e(92),vo=e.n(ho),bo={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,t])=>t),this.$ssrContext){const t=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=t)?n.map(n=>{let t="<meta";return Object.keys(n).forEach(e=>{t+=` ${e}="${vo()(n[e])}"`}),t+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=yo(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=xo(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return go()([{name:"description",content:this.$description}],n,this.siteMeta,To)},updateCanonicalLink(){ko(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",yo(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){xo(null,this.currentMetaTags),ko()}};function ko(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function yo(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function xo(n,t){if(t&&[...t].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const t=document.createElement("meta");return Object.keys(n).forEach(e=>{t.setAttribute(e,n[e])}),document.head.appendChild(t),t})}function To(n){for(const t of["name","property","itemprop"])if(n.hasOwnProperty(t))return n[t]+t;return JSON.stringify(n)}var wo=e(23),Io=e.n(wo),qo={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:Io()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter(t=>n.some(n=>n.hash===t.hash)),e=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),i=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),a=window.innerHeight+e;for(let n=0;n<t.length;n++){const r=t[n],l=t[n+1],o=0===n&&0===e||e>=r.parentElement.offsetTop+10&&(!l||e<l.parentElement.offsetTop-10),u=decodeURIComponent(this.$route.hash);if(o&&u!==decodeURIComponent(r.hash)){const e=r;if(a===i)for(let e=n+1;e<t.length;e++)if(u===decodeURIComponent(t[e].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(e.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Po=e(24),So=e.n(Po),Co={mounted(){So.a.configure({showSpinner:!1}),this.$router.beforeEach((n,t,e)=>{n.path===t.path||Qe.component(n.name)||So.a.start(),e()}),this.$router.afterEach(()=>{So.a.done(),this.isSidebarOpen=!1})}},Eo={props:{parent:Object,code:String,options:{align:String,color:String,backgroundTransition:Boolean,backgroundColor:String,successText:String,staticIcon:Boolean}},data:()=>({success:!1,originalBackground:null,originalTransition:null}),computed:{alignStyle(){let n={};return n[this.options.align]="7.5px",n},iconClass(){return this.options.staticIcon?"":"hover"}},mounted(){this.originalTransition=this.parent.style.transition,this.originalBackground=this.parent.style.background},beforeDestroy(){this.parent.style.transition=this.originalTransition,this.parent.style.background=this.originalBackground},methods:{hexToRgb(n){let t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}:null},copyToClipboard(n){if(navigator.clipboard)navigator.clipboard.writeText(this.code).then(()=>{this.setSuccessTransitions()},()=>{});else{let n=document.createElement("textarea");document.body.appendChild(n),n.value=this.code,n.select(),document.execCommand("Copy"),n.remove(),this.setSuccessTransitions()}},setSuccessTransitions(){if(clearTimeout(this.successTimeout),this.options.backgroundTransition){this.parent.style.transition="background 350ms";let n=this.hexToRgb(this.options.backgroundColor);this.parent.style.background=`rgba(${n.r}, ${n.g}, ${n.b}, 0.1)`}this.success=!0,this.successTimeout=setTimeout(()=>{this.options.backgroundTransition&&(this.parent.style.background=this.originalBackground,this.parent.style.transition=this.originalTransition),this.success=!1},500)}}},zo=(e(235),e(7)),_o=Object(zo.a)(Eo,(function(){var n=this,t=n._self._c;return t("div",{staticClass:"code-copy"},[t("svg",{class:n.iconClass,style:n.alignStyle,attrs:{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},on:{click:n.copyToClipboard}},[t("path",{attrs:{fill:"none",d:"M0 0h24v24H0z"}}),n._v(" "),t("path",{attrs:{fill:n.options.color,d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z"}})]),n._v(" "),t("span",{class:n.success?"success":"",style:n.alignStyle},[n._v("\n        "+n._s(n.options.successText)+"\n    ")])])}),[],!1,null,"215b6b9f",null).exports,Do=(e(236),[bo,qo,Co,{updated(){this.update()},methods:{update(){setTimeout(()=>{document.querySelectorAll('div[class*="language-"] pre').forEach(n=>{if(n.classList.contains("code-copy-added"))return;let t=new(Qe.extend(_o));t.options={align:"bottom",color:"#27b1ff",backgroundTransition:!0,backgroundColor:"#0075b8",successText:"Copied!",staticIcon:!1},t.code=n.innerText,t.parent=n,t.$mount(),n.classList.add("code-copy-added"),n.appendChild(t.$el)})},100)}}}]),Ao={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return po("layout",n),Qe.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},Lo=Object(zo.a)(Ao,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,t,e){switch(t){case"components":n[t]||(n[t]={}),Object.assign(n[t],e);break;case"mixins":n[t]||(n[t]=[]),n[t].push(...e);break;default:throw new Error("Unknown option name.")}}(Lo,"mixins",Do);const No=[{name:"v-3de6dc1b",path:"/algorithm/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-3de6dc1b").then(e)}},{path:"/algorithm/index.html",redirect:"/algorithm/"},{name:"v-11cd6253",path:"/concurrency/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-11cd6253").then(e)}},{path:"/concurrency/index.html",redirect:"/concurrency/"},{name:"v-5988e3c3",path:"/condition/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-5988e3c3").then(e)}},{path:"/condition/index.html",redirect:"/condition/"},{name:"v-1257634a",path:"/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-1257634a").then(e)}},{path:"/index.html",redirect:"/"},{name:"v-1e385ae6",path:"/convertor/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-1e385ae6").then(e)}},{path:"/convertor/index.html",redirect:"/convertor/"},{name:"v-368631d7",path:"/cryptor/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-368631d7").then(e)}},{path:"/cryptor/index.html",redirect:"/cryptor/"},{name:"v-38013f32",path:"/datastructure/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-38013f32").then(e)}},{path:"/datastructure/index.html",redirect:"/datastructure/"},{name:"v-25df5650",path:"/datastructure/linklist.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-25df5650").then(e)}},{name:"v-14aef820",path:"/datastructure/hashmap.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-14aef820").then(e)}},{name:"v-7db894a8",path:"/datastructure/heap.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-7db894a8").then(e)}},{name:"v-af9dc740",path:"/datastructure/stack.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-af9dc740").then(e)}},{name:"v-eafafcc0",path:"/datastructure/set.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-eafafcc0").then(e)}},{name:"v-d479db00",path:"/datastructure/queue.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-d479db00").then(e)}},{name:"v-6fb9ed78",path:"/datastructure/tree.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-6fb9ed78").then(e)}},{name:"v-faf4082a",path:"/en/condition/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-faf4082a").then(e)}},{path:"/en/condition/index.html",redirect:"/en/condition/"},{name:"v-1eab5fab",path:"/datetime/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-1eab5fab").then(e)}},{path:"/datetime/index.html",redirect:"/datetime/"},{name:"v-3ba32a6b",path:"/en/algorithm/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-3ba32a6b").then(e)}},{path:"/en/algorithm/index.html",redirect:"/en/algorithm/"},{name:"v-bb5bdf2a",path:"/en/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-bb5bdf2a").then(e)}},{path:"/en/index.html",redirect:"/en/"},{name:"v-6c0207eb",path:"/en/concurrency/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-6c0207eb").then(e)}},{path:"/en/concurrency/index.html",redirect:"/en/concurrency/"},{name:"v-404af24b",path:"/en/convertor/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-404af24b").then(e)}},{path:"/en/convertor/index.html",redirect:"/en/convertor/"},{name:"v-3024f548",path:"/en/datastructure/hashmap.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-3024f548").then(e)}},{name:"v-1aad432b",path:"/en/cryptor/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-1aad432b").then(e)}},{path:"/en/cryptor/index.html",redirect:"/en/cryptor/"},{name:"v-78f7ce20",path:"/en/datastructure/heap.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-78f7ce20").then(e)}},{name:"v-c68b7ec0",path:"/en/datastructure/linklist.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-c68b7ec0").then(e)}},{name:"v-11a307a0",path:"/en/datastructure/set.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-11a307a0").then(e)}},{name:"v-09112c40",path:"/en/datastructure/list.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-09112c40").then(e)}},{name:"v-63ac6c31",path:"/en/fileutil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-63ac6c31").then(e)}},{path:"/en/fileutil/index.html",redirect:"/en/fileutil/"},{name:"v-90bb1d7c",path:"/en/datastructure/queue.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-90bb1d7c").then(e)}},{name:"v-b8d3fc58",path:"/en/datastructure/stack.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-b8d3fc58").then(e)}},{name:"v-35c54d06",path:"/en/function/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-35c54d06").then(e)}},{path:"/en/function/index.html",redirect:"/en/function/"},{name:"v-20bbec40",path:"/en/datastructure/tree.html",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-20bbec40").then(e)}},{name:"v-d2ed45ea",path:"/en/maputil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-d2ed45ea").then(e)}},{path:"/en/maputil/index.html",redirect:"/en/maputil/"},{name:"v-ee866dce",path:"/en/mathutil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-ee866dce").then(e)}},{path:"/en/mathutil/index.html",redirect:"/en/mathutil/"},{name:"v-6a4bd66a",path:"/en/formatter/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-6a4bd66a").then(e)}},{path:"/en/formatter/index.html",redirect:"/en/formatter/"},{name:"v-c4e05192",path:"/en/datetime/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-c4e05192").then(e)}},{path:"/en/datetime/index.html",redirect:"/en/datetime/"},{name:"v-33c981ea",path:"/en/retry/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-33c981ea").then(e)}},{path:"/en/retry/index.html",redirect:"/en/retry/"},{name:"v-109492a7",path:"/en/random/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-109492a7").then(e)}},{path:"/en/random/index.html",redirect:"/en/random/"},{name:"v-405589eb",path:"/en/strutil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-405589eb").then(e)}},{path:"/en/strutil/index.html",redirect:"/en/strutil/"},{name:"v-aaa1c32a",path:"/en/netutil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-aaa1c32a").then(e)}},{path:"/en/netutil/index.html",redirect:"/en/netutil/"},{name:"v-328c7eea",path:"/fileutil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-328c7eea").then(e)}},{path:"/fileutil/index.html",redirect:"/fileutil/"},{name:"v-2dcb6ecd",path:"/en/xerror/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-2dcb6ecd").then(e)}},{path:"/en/xerror/index.html",redirect:"/en/xerror/"},{name:"v-2a30ca6a",path:"/function/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-2a30ca6a").then(e)}},{path:"/function/index.html",redirect:"/function/"},{name:"v-438800cf",path:"/en/system/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-438800cf").then(e)}},{path:"/en/system/index.html",redirect:"/en/system/"},{name:"v-4e804dcb",path:"/en/validator/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-4e804dcb").then(e)}},{path:"/en/validator/index.html",redirect:"/en/validator/"},{name:"v-6f2c17ea",path:"/mathutil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-6f2c17ea").then(e)}},{path:"/mathutil/index.html",redirect:"/mathutil/"},{name:"v-66f145a5",path:"/formatter/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-66f145a5").then(e)}},{path:"/formatter/index.html",redirect:"/formatter/"},{name:"v-4e265ee9",path:"/retry/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-4e265ee9").then(e)}},{path:"/retry/index.html",redirect:"/retry/"},{name:"v-427e034b",path:"/en/slice/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-427e034b").then(e)}},{path:"/en/slice/index.html",redirect:"/en/slice/"},{name:"v-09e82d2b",path:"/random/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-09e82d2b").then(e)}},{path:"/random/index.html",redirect:"/random/"},{name:"v-4877d186",path:"/maputil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-4877d186").then(e)}},{path:"/maputil/index.html",redirect:"/maputil/"},{name:"v-92dc50aa",path:"/system/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-92dc50aa").then(e)}},{path:"/system/index.html",redirect:"/system/"},{name:"v-5ad110d6",path:"/slice/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-5ad110d6").then(e)}},{path:"/slice/index.html",redirect:"/slice/"},{name:"v-0e3c0313",path:"/strutil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-0e3c0313").then(e)}},{path:"/strutil/index.html",redirect:"/strutil/"},{name:"v-2df7ad8b",path:"/xerror/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-2df7ad8b").then(e)}},{path:"/xerror/index.html",redirect:"/xerror/"},{name:"v-a9b572d6",path:"/validator/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-a9b572d6").then(e)}},{path:"/validator/index.html",redirect:"/validator/"},{name:"v-20b2563b",path:"/netutil/",component:Lo,beforeEnter:(n,t,e)=>{mo("Layout","v-20b2563b").then(e)}},{path:"/netutil/index.html",redirect:"/netutil/"},{path:"*",component:Lo}],Oo={title:"Lancet-docs",description:"lancet（柳叶刀）是一个全面、高效、可复用的go语言工具函数库。 lancet受到了java apache common包和lodash.js的启发。",base:"/lancet-docs/",headTags:[],pages:[{title:"Algorithm",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/algorithm/",relativePath:"algorithm/README.md",key:"v-3de6dc1b",path:"/algorithm/",headers:[{level:2,title:"源码",slug:"源码",normalizedTitle:"源码",charIndex:62},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:277},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:345},{level:3,title:"BubbleSort",slug:"bubblesort",normalizedTitle:"bubblesort",charIndex:352},{level:3,title:"InsertionSort",slug:"insertionsort",normalizedTitle:"insertionsort",charIndex:1096},{level:3,title:"SelectionSort",slug:"selectionsort",normalizedTitle:"selectionsort",charIndex:2411},{level:3,title:"ShellSort",slug:"shellsort",normalizedTitle:"shellsort",charIndex:3164},{level:3,title:"QuickSort",slug:"quicksort",normalizedTitle:"quicksort",charIndex:3905},{level:3,title:"HeapSort",slug:"heapsort",normalizedTitle:"heapsort",charIndex:4650},{level:3,title:"MergeSort",slug:"mergesort",normalizedTitle:"mergesort",charIndex:5391},{level:3,title:"CountSort",slug:"countsort",normalizedTitle:"countsort",charIndex:6132},{level:3,title:"BinarySearch",slug:"binarysearch",normalizedTitle:"binarysearch",charIndex:6895},{level:3,title:"BinaryIterativeSearch",slug:"binaryiterativesearch",normalizedTitle:"binaryiterativesearch",charIndex:7885},{level:3,title:"LinearSearch",slug:"linearsearch",normalizedTitle:"linearsearch",charIndex:8911},{level:3,title:"LRUCache",slug:"lrucache",normalizedTitle:"lrucache",charIndex:9799}],lastUpdated:"2022/9/29 上午11:23:10",lastUpdatedTimestamp:166442179e4,headersStr:"源码 用法 文档 BubbleSort InsertionSort SelectionSort ShellSort QuickSort HeapSort MergeSort CountSort BinarySearch BinaryIterativeSearch LinearSearch LRUCache",content:'# Algorithm\n\nalgorithm算法包实现一些基本算法，sort，search，lrucache。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/algorithm/sort.go\n * https://github.com/duke-git/lancet/blob/main/algorithm/search.go\n * https://github.com/duke-git/lancet/blob/main/algorithm/lru_cache.go\n\n\n\n\n# 用法\n\nimport (\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\n\n\n\n\n# 文档\n\n\n# BubbleSort\n\n冒泡排序，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc BubbleSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.BubbleSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# InsertionSort\n\n插入排序，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc InsertionSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type people struct {\n        Name string\n        Age  int\n    }\n\n    // PeopleAageComparator sort people slice by age field\n    type peopleAgeComparator struct{}\n\n    // Compare implements github.com/duke-git/lancet/lancetconstraints/constraints.go/Comparator\n    func (pc *peopleAgeComparator) Compare(v1 any, v2 any) int {\n        p1, _ := v1.(people)\n        p2, _ := v2.(people)\n\n        //ascending order\n        if p1.Age < p2.Age {\n            return -1\n        } else if p1.Age > p2.Age {\n            return 1\n        }\n        return 0\n\n        //decending order\n        // if p1.Age > p2.Age {\n        // \treturn -1\n        // } else if p1.Age < p2.Age {\n        // \treturn 1\n        // }\n    }\n\n    var peoples = []people{\n        {Name: "a", Age: 20},\n        {Name: "b", Age: 10},\n        {Name: "c", Age: 17},\n        {Name: "d", Age: 8},\n        {Name: "e", Age: 28},\n    }\n    comparator := &peopleAgeComparator{}\n    algorithm.InsertionSort(peoples, comparator)\n\n    fmt.Println(intSlice) //[{d 8} {b 10} {c 17} {a 20} {e 28}]\n}\n\n\n\n# SelectionSort\n\n选择排序，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc SelectionSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.SelectionSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# ShellSort\n\n希尔排序，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc ShellSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.ShellSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# QuickSort\n\n快速排序，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc QuickSort[T any](slice []T, comparator lancetconstraints.Comparator) []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.QuickSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# HeapSort\n\n堆排序，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc HeapSort[T any](slice []T, comparator lancetconstraints.Comparator) []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.HeapSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# MergeSort\n\n归并排序，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc MergeSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.MergeSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# CountSort\n\n计数排序，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc CountSort[T any](slice []T, comparator lancetconstraints.Comparator) []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    sortedSlice := algorithm.CountSort(intSlice, comparator)\n\n    fmt.Println(sortedSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# BinarySearch\n\n二分递归查找，返回元素索引，未找到元素返回-1，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc BinarySearch[T any](sortedSlice []T, target T, lowIndex, highIndex int, comparator lancetconstraints.Comparator) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    var sortedNumbers = []int{1, 2, 3, 4, 5, 6, 7, 8}\n    comparator := &intComparator{}\n    foundIndex := algorithm.BinarySearch(sortedNumbers, 5, 0, len(sortedNumbers)-1, comparator)\n    fmt.Println(foundIndex) //4\n\n    notFoundIndex := algorithm.BinarySearch(sortedNumbers, 9, 0, len(sortedNumbers)-1, comparator)\n    fmt.Println(notFoundIndex) //-1\n}\n\n\n\n# BinaryIterativeSearch\n\n二分迭代查找，返回元素索引，未找到元素返回-1，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc BinaryIterativeSearch[T any](sortedSlice []T, target T, lowIndex, highIndex int, comparator lancetconstraints.Comparator) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    var sortedNumbers = []int{1, 2, 3, 4, 5, 6, 7, 8}\n    comparator := &intComparator{}\n    foundIndex := algorithm.BinaryIterativeSearch(sortedNumbers, 5, 0, len(sortedNumbers)-1, comparator)\n    fmt.Println(foundIndex) //4\n\n    notFoundIndex := algorithm.BinaryIterativeSearch(sortedNumbers, 9, 0, len(sortedNumbers)-1, comparator)\n    fmt.Println(notFoundIndex) //-1\n}\n\n\n\n# LinearSearch\n\n线性查找，返回元素索引，未找到元素返回-1，参数comparator需要实现包lancetconstraints.Comparator\n\n函数签名:\n\nfunc LinearSearch[T any](slice []T, target T, comparator lancetconstraints.Comparator) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    foundIndex := algorithm.LinearSearch(intSlice, 5, comparator)\n    fmt.Println(foundIndex) //2\n\n    notFoundIndex := algorithm.LinearSearch(sortedNumbers, 0, comparator)\n    fmt.Println(notFoundIndex) //-1\n}\n\n\n\n# LRUCache\n\nlru实现缓存\n\n函数签名:\n\nfunc NewLRUCache[K comparable, V any](capacity int) *LRUCache[K, V]\nfunc (l *LRUCache[K, V]) Get(key K) (V, bool)\nfunc (l *LRUCache[K, V]) Put(key K, value V)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    cache := algorithm.NewLRUCache[int, int](2)\n\n    cache.Put(1, 1)\n    cache.Put(2, 2)\n\n    _, ok := cache.Get(0) // ok -> false\n\n    v, ok := cache.Get(1) // v->1, ok->true\n\n}\n',normalizedContent:'# algorithm\n\nalgorithm算法包实现一些基本算法，sort，search，lrucache。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/algorithm/sort.go\n * https://github.com/duke-git/lancet/blob/main/algorithm/search.go\n * https://github.com/duke-git/lancet/blob/main/algorithm/lru_cache.go\n\n\n\n\n# 用法\n\nimport (\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\n\n\n\n\n# 文档\n\n\n# bubblesort\n\n冒泡排序，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc bubblesort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.bubblesort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# insertionsort\n\n插入排序，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc insertionsort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type people struct {\n        name string\n        age  int\n    }\n\n    // peopleaagecomparator sort people slice by age field\n    type peopleagecomparator struct{}\n\n    // compare implements github.com/duke-git/lancet/lancetconstraints/constraints.go/comparator\n    func (pc *peopleagecomparator) compare(v1 any, v2 any) int {\n        p1, _ := v1.(people)\n        p2, _ := v2.(people)\n\n        //ascending order\n        if p1.age < p2.age {\n            return -1\n        } else if p1.age > p2.age {\n            return 1\n        }\n        return 0\n\n        //decending order\n        // if p1.age > p2.age {\n        // \treturn -1\n        // } else if p1.age < p2.age {\n        // \treturn 1\n        // }\n    }\n\n    var peoples = []people{\n        {name: "a", age: 20},\n        {name: "b", age: 10},\n        {name: "c", age: 17},\n        {name: "d", age: 8},\n        {name: "e", age: 28},\n    }\n    comparator := &peopleagecomparator{}\n    algorithm.insertionsort(peoples, comparator)\n\n    fmt.println(intslice) //[{d 8} {b 10} {c 17} {a 20} {e 28}]\n}\n\n\n\n# selectionsort\n\n选择排序，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc selectionsort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.selectionsort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# shellsort\n\n希尔排序，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc shellsort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.shellsort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# quicksort\n\n快速排序，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc quicksort[t any](slice []t, comparator lancetconstraints.comparator) []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.quicksort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# heapsort\n\n堆排序，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc heapsort[t any](slice []t, comparator lancetconstraints.comparator) []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.heapsort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# mergesort\n\n归并排序，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc mergesort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.mergesort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# countsort\n\n计数排序，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc countsort[t any](slice []t, comparator lancetconstraints.comparator) []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    sortedslice := algorithm.countsort(intslice, comparator)\n\n    fmt.println(sortedslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# binarysearch\n\n二分递归查找，返回元素索引，未找到元素返回-1，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc binarysearch[t any](sortedslice []t, target t, lowindex, highindex int, comparator lancetconstraints.comparator) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    var sortednumbers = []int{1, 2, 3, 4, 5, 6, 7, 8}\n    comparator := &intcomparator{}\n    foundindex := algorithm.binarysearch(sortednumbers, 5, 0, len(sortednumbers)-1, comparator)\n    fmt.println(foundindex) //4\n\n    notfoundindex := algorithm.binarysearch(sortednumbers, 9, 0, len(sortednumbers)-1, comparator)\n    fmt.println(notfoundindex) //-1\n}\n\n\n\n# binaryiterativesearch\n\n二分迭代查找，返回元素索引，未找到元素返回-1，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc binaryiterativesearch[t any](sortedslice []t, target t, lowindex, highindex int, comparator lancetconstraints.comparator) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    var sortednumbers = []int{1, 2, 3, 4, 5, 6, 7, 8}\n    comparator := &intcomparator{}\n    foundindex := algorithm.binaryiterativesearch(sortednumbers, 5, 0, len(sortednumbers)-1, comparator)\n    fmt.println(foundindex) //4\n\n    notfoundindex := algorithm.binaryiterativesearch(sortednumbers, 9, 0, len(sortednumbers)-1, comparator)\n    fmt.println(notfoundindex) //-1\n}\n\n\n\n# linearsearch\n\n线性查找，返回元素索引，未找到元素返回-1，参数comparator需要实现包lancetconstraints.comparator\n\n函数签名:\n\nfunc linearsearch[t any](slice []t, target t, comparator lancetconstraints.comparator) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    foundindex := algorithm.linearsearch(intslice, 5, comparator)\n    fmt.println(foundindex) //2\n\n    notfoundindex := algorithm.linearsearch(sortednumbers, 0, comparator)\n    fmt.println(notfoundindex) //-1\n}\n\n\n\n# lrucache\n\nlru实现缓存\n\n函数签名:\n\nfunc newlrucache[k comparable, v any](capacity int) *lrucache[k, v]\nfunc (l *lrucache[k, v]) get(key k) (v, bool)\nfunc (l *lrucache[k, v]) put(key k, value v)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    cache := algorithm.newlrucache[int, int](2)\n\n    cache.put(1, 1)\n    cache.put(2, 2)\n\n    _, ok := cache.get(0) // ok -> false\n\n    v, ok := cache.get(1) // v->1, ok->true\n\n}\n',charsets:{cjk:!0}},{title:"Concurrency",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/concurrency/",relativePath:"concurrency/README.md",key:"v-11cd6253",path:"/concurrency/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:70},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:152},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:223},{level:3,title:"Channel",slug:"channel",normalizedTitle:"channel",charIndex:230},{level:3,title:"NewChannel",slug:"newchannel",normalizedTitle:"newchannel",charIndex:242},{level:3,title:"Bridge",slug:"bridge",normalizedTitle:"bridge",charIndex:476},{level:3,title:"FanIn",slug:"fanin",normalizedTitle:"fanin",charIndex:1217},{level:3,title:"Repeat",slug:"repeat",normalizedTitle:"repeat",charIndex:1652},{level:3,title:"RepeatFn",slug:"repeatfn",normalizedTitle:"repeatfn",charIndex:2309},{level:3,title:"Or",slug:"or",normalizedTitle:"or",charIndex:2832},{level:3,title:"OrDone",slug:"ordone",normalizedTitle:"ordone",charIndex:3445},{level:3,title:"Take",slug:"take",normalizedTitle:"take",charIndex:1640},{level:3,title:"Tee",slug:"tee",normalizedTitle:"tee",charIndex:4502}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 Channel NewChannel Bridge FanIn Repeat RepeatFn Or OrDone Take Tee",content:'# Concurrency\n\n并发包包含一些支持并发编程的功能。例如：goroutine, channel, async 等。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/concurrency/channel.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\n\n\n\n\n# 文档\n\n\n# Channel\n\n\n# NewChannel\n\n返回一个 Channel 指针实例\n\n函数签名:\n\ntype Channel struct {}\nfunc NewChannel() *Channel\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    c := concurrency.NewChannel()\n}\n\n\n\n# Bridge\n\n将多个通道链接到一个通道，直到取消上下文。\n\n函数签名:\n\nfunc (c *Channel) Bridge(ctx context.Context, chanStream <-chan <-chan any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    ctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tc := concurrency.NewChannel()\n\tgenVals := func() <-chan <-chan any {\n\t\tchanStream := make(chan (<-chan any))\n\t\tgo func() {\n\t\t\tdefer close(chanStream)\n\t\t\tfor i := 0; i < 10; i++ {\n\t\t\t\tstream := make(chan any, 1)\n\t\t\t\tstream <- i\n\t\t\t\tclose(stream)\n\t\t\t\tchanStream <- stream\n\t\t\t}\n\t\t}()\n\t\treturn chanStream\n\t}\n\n\tindex := 0\n\tfor val := range c.Bridge(ctx, genVals()) {\n\t\tfmt.Printf("%v ", val) //0 1 2 3 4 5 6 7 8 9\n\t}\n}\n\n\n\n# FanIn\n\n将多个通道合并为一个通道，直到取消上下文\n\n函数签名:\n\nfunc (c *Channel) FanIn(ctx context.Context, channels ...<-chan any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    ctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tc := concurrency.NewChannel()\n\tchannels := make([]<-chan any, 3)\n\n\tfor i := 0; i < 3; i++ {\n\t\tchannels[i] = c.Take(ctx, c.Repeat(ctx, i), 3)\n\t}\n\n\tmergedChannel := c.FanIn(ctx, channels...)\n\n\tfor val := range mergedChannel {\n\t\tfmt.Println("\\t%d\\n", val) //1,2,1,0,0,1,0,2,2 (order not for sure)\n\t}\n}\n\n\n\n# Repeat\n\n返回一个chan，将参数`values`重复放入chan，直到取消上下文。\n\n函数签名:\n\nfunc (c *Channel) Repeat(ctx context.Context, values ...any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    ctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tc := concurrency.NewChannel()\n\tintStream := c.Take(ctx, c.Repeat(ctx, 1, 2), 5)\n\n\tfor v := range intStream {\n\t\tfmt.Println(v) //1, 2, 1, 2, 1\n\t}\n}\n\n\n\n# RepeatFn\n\n返回一个chan，重复执行函数fn，并将结果放入返回的chan，直到取消上下文。\n\n函数签名:\n\nfunc (c *Channel) RepeatFn(ctx context.Context, fn func() any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    ctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tfn := func() any {\n\t\ts := "a"\n\t\treturn s\n\t}\n\tc := concurrency.NewChannel()\n\tdataStream := c.Take(ctx, c.RepeatFn(ctx, fn), 3)\n\n\tfor v := range dataStream {\n\t\tfmt.Println(v) //a, a, a\n\t}\n}\n\n\n\n# Or\n\n将一个或多个通道读取到一个通道中，当任何读取通道关闭时将结束读取。\n\n函数签名:\n\nfunc (c *Channel) Or(channels ...<-chan any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n\tsig := func(after time.Duration) <-chan any {\n\t\tc := make(chan interface{})\n\t\tgo func() {\n\t\t\tdefer close(c)\n\t\t\ttime.Sleep(after)\n\t\t}()\n\t\treturn c\n\t}\n\n\tstart := time.Now()\n\n\tc := concurrency.NewChannel()\n\t<-c.Or(\n\t\tsig(1*time.Second),\n\t\tsig(2*time.Second),\n\t\tsig(3*time.Second),\n\t\tsig(4*time.Second),\n\t\tsig(5*time.Second),\n\t)\n\n\tfmt.Println("done after %v", time.Since(start)) //1.003s\n}\n\n\n\n# OrDone\n\n将一个通道读入另一个通道，直到取消上下文。\n\n函数签名:\n\nfunc (c *Channel) OrDone(ctx context.Context, channel <-chan any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tc := concurrency.NewChannel()\n\tintStream := c.Take(ctx, c.Repeat(ctx, 1), 3)\n\n\tfor val := range c.OrDone(ctx, intStream) {\n\t\tfmt.Println(val)  //1\n\t}\n}\n\n\n\n# Take\n\n返回一个chan，其值从另一个chan获取，直到取消上下文。\n\n函数签名:\n\nfunc (c *Channel) Take(ctx context.Context, valueStream <-chan any, number int) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tnumbers := make(chan any, 5)\n\tnumbers <- 1\n\tnumbers <- 2\n\tnumbers <- 3\n\tnumbers <- 4\n\tnumbers <- 5\n\tdefer close(numbers)\n\n\tc := concurrency.NewChannel()\n\tintStream := c.Take(ctx, numbers, 3)\n\n\tfor val := range intStream {\n\t\tfmt.Println(val) //1, 2, 3\n\t}\n}\n\n\n\n# Tee\n\n将一个通道分成两个通道，直到取消上下文。\n\n函数签名:\n\nfunc (c *Channel) Tee(ctx context.Context, in <-chan any) (<-chan any, <-chan any)\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tc := concurrency.NewChannel()\n\tinStream := c.Take(ctx, c.Repeat(ctx, 1, 2), 4)\n\n\tout1, out2 := c.Tee(ctx, inStream)\n\tfor val := range out1 {\n\t\tfmt.Println(val) //1\n\t\tfmt.Println(<-out2) //1\n\t}\n}\n',normalizedContent:'# concurrency\n\n并发包包含一些支持并发编程的功能。例如：goroutine, channel, async 等。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/concurrency/channel.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\n\n\n\n\n# 文档\n\n\n# channel\n\n\n# newchannel\n\n返回一个 channel 指针实例\n\n函数签名:\n\ntype channel struct {}\nfunc newchannel() *channel\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    c := concurrency.newchannel()\n}\n\n\n\n# bridge\n\n将多个通道链接到一个通道，直到取消上下文。\n\n函数签名:\n\nfunc (c *channel) bridge(ctx context.context, chanstream <-chan <-chan any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    ctx, cancel := context.withcancel(context.background())\n\tdefer cancel()\n\n\tc := concurrency.newchannel()\n\tgenvals := func() <-chan <-chan any {\n\t\tchanstream := make(chan (<-chan any))\n\t\tgo func() {\n\t\t\tdefer close(chanstream)\n\t\t\tfor i := 0; i < 10; i++ {\n\t\t\t\tstream := make(chan any, 1)\n\t\t\t\tstream <- i\n\t\t\t\tclose(stream)\n\t\t\t\tchanstream <- stream\n\t\t\t}\n\t\t}()\n\t\treturn chanstream\n\t}\n\n\tindex := 0\n\tfor val := range c.bridge(ctx, genvals()) {\n\t\tfmt.printf("%v ", val) //0 1 2 3 4 5 6 7 8 9\n\t}\n}\n\n\n\n# fanin\n\n将多个通道合并为一个通道，直到取消上下文\n\n函数签名:\n\nfunc (c *channel) fanin(ctx context.context, channels ...<-chan any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    ctx, cancel := context.withcancel(context.background())\n\tdefer cancel()\n\n\tc := concurrency.newchannel()\n\tchannels := make([]<-chan any, 3)\n\n\tfor i := 0; i < 3; i++ {\n\t\tchannels[i] = c.take(ctx, c.repeat(ctx, i), 3)\n\t}\n\n\tmergedchannel := c.fanin(ctx, channels...)\n\n\tfor val := range mergedchannel {\n\t\tfmt.println("\\t%d\\n", val) //1,2,1,0,0,1,0,2,2 (order not for sure)\n\t}\n}\n\n\n\n# repeat\n\n返回一个chan，将参数`values`重复放入chan，直到取消上下文。\n\n函数签名:\n\nfunc (c *channel) repeat(ctx context.context, values ...any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    ctx, cancel := context.withcancel(context.background())\n\tdefer cancel()\n\n\tc := concurrency.newchannel()\n\tintstream := c.take(ctx, c.repeat(ctx, 1, 2), 5)\n\n\tfor v := range intstream {\n\t\tfmt.println(v) //1, 2, 1, 2, 1\n\t}\n}\n\n\n\n# repeatfn\n\n返回一个chan，重复执行函数fn，并将结果放入返回的chan，直到取消上下文。\n\n函数签名:\n\nfunc (c *channel) repeatfn(ctx context.context, fn func() any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n    ctx, cancel := context.withcancel(context.background())\n\tdefer cancel()\n\n\tfn := func() any {\n\t\ts := "a"\n\t\treturn s\n\t}\n\tc := concurrency.newchannel()\n\tdatastream := c.take(ctx, c.repeatfn(ctx, fn), 3)\n\n\tfor v := range datastream {\n\t\tfmt.println(v) //a, a, a\n\t}\n}\n\n\n\n# or\n\n将一个或多个通道读取到一个通道中，当任何读取通道关闭时将结束读取。\n\n函数签名:\n\nfunc (c *channel) or(channels ...<-chan any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n\tsig := func(after time.duration) <-chan any {\n\t\tc := make(chan interface{})\n\t\tgo func() {\n\t\t\tdefer close(c)\n\t\t\ttime.sleep(after)\n\t\t}()\n\t\treturn c\n\t}\n\n\tstart := time.now()\n\n\tc := concurrency.newchannel()\n\t<-c.or(\n\t\tsig(1*time.second),\n\t\tsig(2*time.second),\n\t\tsig(3*time.second),\n\t\tsig(4*time.second),\n\t\tsig(5*time.second),\n\t)\n\n\tfmt.println("done after %v", time.since(start)) //1.003s\n}\n\n\n\n# ordone\n\n将一个通道读入另一个通道，直到取消上下文。\n\n函数签名:\n\nfunc (c *channel) ordone(ctx context.context, channel <-chan any) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n\tctx, cancel := context.withcancel(context.background())\n\tdefer cancel()\n\n\tc := concurrency.newchannel()\n\tintstream := c.take(ctx, c.repeat(ctx, 1), 3)\n\n\tfor val := range c.ordone(ctx, intstream) {\n\t\tfmt.println(val)  //1\n\t}\n}\n\n\n\n# take\n\n返回一个chan，其值从另一个chan获取，直到取消上下文。\n\n函数签名:\n\nfunc (c *channel) take(ctx context.context, valuestream <-chan any, number int) <-chan any\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n\tctx, cancel := context.withcancel(context.background())\n\tdefer cancel()\n\n\tnumbers := make(chan any, 5)\n\tnumbers <- 1\n\tnumbers <- 2\n\tnumbers <- 3\n\tnumbers <- 4\n\tnumbers <- 5\n\tdefer close(numbers)\n\n\tc := concurrency.newchannel()\n\tintstream := c.take(ctx, numbers, 3)\n\n\tfor val := range intstream {\n\t\tfmt.println(val) //1, 2, 3\n\t}\n}\n\n\n\n# tee\n\n将一个通道分成两个通道，直到取消上下文。\n\n函数签名:\n\nfunc (c *channel) tee(ctx context.context, in <-chan any) (<-chan any, <-chan any)\n\n\n例子:\n\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/duke-git/lancet/v2/concurrency"\n)\n\nfunc main() {\n\tctx, cancel := context.withcancel(context.background())\n\tdefer cancel()\n\n\tc := concurrency.newchannel()\n\tinstream := c.take(ctx, c.repeat(ctx, 1, 2), 4)\n\n\tout1, out2 := c.tee(ctx, instream)\n\tfor val := range out1 {\n\t\tfmt.println(val) //1\n\t\tfmt.println(<-out2) //1\n\t}\n}\n',charsets:{cjk:!0}},{title:"Condition",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/condition/",relativePath:"condition/README.md",key:"v-5988e3c3",path:"/condition/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:117},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:199},{level:3,title:"Bool",slug:"bool",normalizedTitle:"bool",charIndex:268},{level:3,title:"And",slug:"and",normalizedTitle:"and",charIndex:1359},{level:3,title:"Or",slug:"or",normalizedTitle:"or",charIndex:1719},{level:3,title:"Xor",slug:"xor",normalizedTitle:"xor",charIndex:2073},{level:3,title:"Nor",slug:"nor",normalizedTitle:"nor",charIndex:2433},{level:3,title:"Nand",slug:"nand",normalizedTitle:"nand",charIndex:2768},{level:3,title:"TernaryOperator",slug:"ternaryoperator",normalizedTitle:"ternaryoperator",charIndex:3126}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: Bool And Or Xor Nor Nand TernaryOperator",content:'# Condition\n\ncondition 包含一些用于条件判断的函数。这个包的实现参考了 carlmjohnson 的 truthy 包的实现，更多有用的信息可以在truthy中找到，感谢 carlmjohnson。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/condition/condition.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/condition"\n)\n\n\n\n\n\n# Bool\n\n返回传入参数的bool值.\n如果出入类型参数含有Bool方法, 会调用该方法并返回\n如果传入类型参数有IsZero方法, 返回IsZero方法返回值的取反\nslices和map的length大于0时，返回true，否则返回false\n其他类型会判断是否是零值\n\n函数签名:\n\nfunc Bool[T any](value T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\t// bool\n\tfmt.Println(condition.Bool(false)) // false\n\tfmt.Println(condition.Bool(true)) // true\n\n\t// integer\n\tfmt.Println(condition.Bool(0)) // false\n\tfmt.Println(condition.Bool(1)) // true\n\n\t// float\n\tfmt.Println(condition.Bool(0.0)) // false\n\tfmt.Println(condition.Bool(0.1)) // true\n\n\t// string\n\tfmt.Println(condition.Bool("")) // false\n\tfmt.Println(condition.Bool(" ")) // true\n\tfmt.Println(condition.Bool("0")) // true\n\n\t// slice\n\tvar nums [2]int\n\tfmt.Println(condition.Bool(nums)) // false\n\tnums = [2]int{0, 1}\n\tfmt.Println(condition.Bool(nums)) // true\n\n\t// map\n\tfmt.Println(condition.Bool(map[string]string{})) // false\n\tfmt.Println(condition.Bool(map[string]string{"a": "a"})) // true\n\n\t// struct\n\tfmt.Println(condition.Bool(struct{}{})) // false\n\tfmt.Println(condition.Bool(time.Now())) // true\n}\n\n\n\n# And\n\n逻辑且操作，当切仅当a和b都为true时返回true\n\n函数签名:\n\nfunc And[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.And(0, 1)) // false\n\tfmt.Println(condition.And(0, "")) // false\n\tfmt.Println(condition.And(0, "0")) // false\n\tfmt.Println(condition.And(1, "0")) // true\n}\n\n\n\n# Or\n\n逻辑或操作，当切仅当a和b都为false时返回false\n\n函数签名:\n\nfunc Or[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.Or(0, "")) // false\n\tfmt.Println(condition.Or(0, 1)) // true\n\tfmt.Println(condition.Or(0, "0")) // true\n\tfmt.Println(condition.Or(1, "0")) // true\n}\n\n\n\n# Xor\n\n逻辑异或操作，a和b相同返回false，a和b不相同返回true\n\n函数签名:\n\nfunc Xor[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.Xor(0, 0)) // false\n\tfmt.Println(condition.Xor(0, 1)) // true\n\tfmt.Println(condition.Xor(1, 0)) // true\n\tfmt.Println(condition.Xor(1, 1)) // false\n}\n\n\n\n# Nor\n\n异或的取反操作\n\n函数签名:\n\nfunc Nor[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.Nor(0, 0)) // true\n\tfmt.Println(condition.Nor(0, 1)) // false\n\tfmt.Println(condition.Nor(1, 0)) // false\n\tfmt.Println(condition.Nor(1, 1)) // true\n}\n\n\n\n# Nand\n\n如果a和b都为真，返回false，否则返回true\n\n函数签名:\n\nfunc Nand[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.Nand(0, 0)) // true\n\tfmt.Println(condition.Nand(0, 1)) // true\n\tfmt.Println(condition.Nand(1, 0)) // true\n\tfmt.Println(condition.Nand(1, 1)) // false\n}\n\n\n\n# TernaryOperator\n\n三元运算符\n\n函数签名:\n\nfunc TernaryOperator[T, U any](isTrue T, ifValue U, elseValue U) U\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\ttrueValue := "1"\n\tfalseValue := "0"\n\n\tfmt.Println(condition.TernaryOperator(true, trueValue, falseValue)) // "1"\n}\n',normalizedContent:'# condition\n\ncondition 包含一些用于条件判断的函数。这个包的实现参考了 carlmjohnson 的 truthy 包的实现，更多有用的信息可以在truthy中找到，感谢 carlmjohnson。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/condition/condition.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/condition"\n)\n\n\n\n\n\n# bool\n\n返回传入参数的bool值.\n如果出入类型参数含有bool方法, 会调用该方法并返回\n如果传入类型参数有iszero方法, 返回iszero方法返回值的取反\nslices和map的length大于0时，返回true，否则返回false\n其他类型会判断是否是零值\n\n函数签名:\n\nfunc bool[t any](value t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\t// bool\n\tfmt.println(condition.bool(false)) // false\n\tfmt.println(condition.bool(true)) // true\n\n\t// integer\n\tfmt.println(condition.bool(0)) // false\n\tfmt.println(condition.bool(1)) // true\n\n\t// float\n\tfmt.println(condition.bool(0.0)) // false\n\tfmt.println(condition.bool(0.1)) // true\n\n\t// string\n\tfmt.println(condition.bool("")) // false\n\tfmt.println(condition.bool(" ")) // true\n\tfmt.println(condition.bool("0")) // true\n\n\t// slice\n\tvar nums [2]int\n\tfmt.println(condition.bool(nums)) // false\n\tnums = [2]int{0, 1}\n\tfmt.println(condition.bool(nums)) // true\n\n\t// map\n\tfmt.println(condition.bool(map[string]string{})) // false\n\tfmt.println(condition.bool(map[string]string{"a": "a"})) // true\n\n\t// struct\n\tfmt.println(condition.bool(struct{}{})) // false\n\tfmt.println(condition.bool(time.now())) // true\n}\n\n\n\n# and\n\n逻辑且操作，当切仅当a和b都为true时返回true\n\n函数签名:\n\nfunc and[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.and(0, 1)) // false\n\tfmt.println(condition.and(0, "")) // false\n\tfmt.println(condition.and(0, "0")) // false\n\tfmt.println(condition.and(1, "0")) // true\n}\n\n\n\n# or\n\n逻辑或操作，当切仅当a和b都为false时返回false\n\n函数签名:\n\nfunc or[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.or(0, "")) // false\n\tfmt.println(condition.or(0, 1)) // true\n\tfmt.println(condition.or(0, "0")) // true\n\tfmt.println(condition.or(1, "0")) // true\n}\n\n\n\n# xor\n\n逻辑异或操作，a和b相同返回false，a和b不相同返回true\n\n函数签名:\n\nfunc xor[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.xor(0, 0)) // false\n\tfmt.println(condition.xor(0, 1)) // true\n\tfmt.println(condition.xor(1, 0)) // true\n\tfmt.println(condition.xor(1, 1)) // false\n}\n\n\n\n# nor\n\n异或的取反操作\n\n函数签名:\n\nfunc nor[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.nor(0, 0)) // true\n\tfmt.println(condition.nor(0, 1)) // false\n\tfmt.println(condition.nor(1, 0)) // false\n\tfmt.println(condition.nor(1, 1)) // true\n}\n\n\n\n# nand\n\n如果a和b都为真，返回false，否则返回true\n\n函数签名:\n\nfunc nand[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.nand(0, 0)) // true\n\tfmt.println(condition.nand(0, 1)) // true\n\tfmt.println(condition.nand(1, 0)) // true\n\tfmt.println(condition.nand(1, 1)) // false\n}\n\n\n\n# ternaryoperator\n\n三元运算符\n\n函数签名:\n\nfunc ternaryoperator[t, u any](istrue t, ifvalue u, elsevalue u) u\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\ttruevalue := "1"\n\tfalsevalue := "0"\n\n\tfmt.println(condition.ternaryoperator(true, truevalue, falsevalue)) // "1"\n}\n',charsets:{cjk:!0}},{title:"Home",frontmatter:{home:!0,sidebar:!1,heroImage:"/logo.png",actionText:"快速上手 →",actionLink:"/algorithm/",features:[{title:"全面",details:"👏 全面、高效、可复用。"},{title:"覆盖广",details:"💪 300+常用go工具函数，支持string、slice、datetime、net、crypt...。"},{title:"依赖",details:"💅 只依赖go标准库。"},{title:"单元测试",details:"🌍 所有导出函数单元测试覆盖率100%。"}]},regularPath:"/",relativePath:"README.md",key:"v-1257634a",path:"/",lastUpdated:"2022/9/29 下午12:23:30",lastUpdatedTimestamp:166442541e4,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Convertor",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/convertor/",relativePath:"convertor/README.md",key:"v-1e385ae6",path:"/convertor/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:47},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:129},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:198},{level:3,title:"ColorHexToRGB",slug:"colorhextorgb",normalizedTitle:"colorhextorgb",charIndex:205},{level:3,title:"ColorRGBToHex",slug:"colorrgbtohex",normalizedTitle:"colorrgbtohex",charIndex:520},{level:3,title:"ToBool",slug:"tobool",normalizedTitle:"tobool",charIndex:835},{level:3,title:"ToBytes",slug:"tobytes",normalizedTitle:"tobytes",charIndex:1286},{level:3,title:"ToChar",slug:"tochar",normalizedTitle:"tochar",charIndex:1613},{level:3,title:"ToChannel",slug:"tochannel",normalizedTitle:"tochannel",charIndex:2035},{level:3,title:"ToFloat",slug:"tofloat",normalizedTitle:"tofloat",charIndex:2455},{level:3,title:"ToInt",slug:"toint",normalizedTitle:"toint",charIndex:2889},{level:3,title:"ToJson",slug:"tojson",normalizedTitle:"tojson",charIndex:3305},{level:3,title:"ToMap",slug:"tomap",normalizedTitle:"tomap",charIndex:3666},{level:3,title:"ToPointer",slug:"topointer",normalizedTitle:"topointer",charIndex:4222},{level:3,title:"ToString",slug:"tostring",normalizedTitle:"tostring",charIndex:4464},{level:3,title:"StructToMap",slug:"structtomap",normalizedTitle:"structtomap",charIndex:4813},{level:3,title:"MapToSlice",slug:"maptoslice",normalizedTitle:"maptoslice",charIndex:5327},{level:3,title:"EncodeByte",slug:"encodebyte",normalizedTitle:"encodebyte",charIndex:5804},{level:3,title:"DecodeByte",slug:"decodebyte",normalizedTitle:"decodebyte",charIndex:6096}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 ColorHexToRGB ColorRGBToHex ToBool ToBytes ToChar ToChannel ToFloat ToInt ToJson ToMap ToPointer ToString StructToMap MapToSlice EncodeByte DecodeByte",content:'# Convertor\n\nconvertor 转换器包支持一些常见的数据类型转换\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/convertor/convertor.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\n\n\n\n\n# 文档\n\n\n# ColorHexToRGB\n\n颜色值十六进制转rgb\n\n函数签名:\n\nfunc ColorHexToRGB(colorHex string) (red, green, blue int)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    colorHex := "#003366"\n    r, g, b := convertor.ColorHexToRGB(colorHex)\n    fmt.Println(r, g, b) //0,51,102\n}\n\n\n\n# ColorRGBToHex\n\n颜色值rgb转十六进制\n\n函数签名:\n\nfunc ColorRGBToHex(red, green, blue int) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    r := 0\n    g := 51\n    b := 102\n    colorHex := convertor.ColorRGBToHex(r, g, b)\n\n    fmt.Println(colorHex) //#003366\n}\n\n\n\n# ToBool\n\n字符串转布尔类型，使用strconv.ParseBool\n\n函数签名:\n\nfunc ToBool(s string) (bool, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v1, _ := convertor.ToBool("1")\n    fmt.Println(v1) //true\n\n    v2, _ := convertor.ToBool("true")\n    fmt.Println(v2) //true\n\n    v3, _ := convertor.ToBool("True")\n    fmt.Println(v3) //true\n\n    v4, _ := convertor.ToBool("123")\n    fmt.Println(v4) //false\n}\n\n\n\n# ToBytes\n\ninterface转字节切片.\n\n函数签名:\n\nfunc ToBytes(data any) ([]byte, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytesData, err := convertor.ToBytes("0")\n    if err != nil {\n        fmt.Println(err)\n    }\n    fmt.Println(bytesData) //[]bytes{3, 4, 0, 0}\n}\n\n\n\n# ToChar\n\n字符串转字符切片\n\n函数签名:\n\nfunc ToChar(s string) []string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    chars := convertor.ToChar("")\n    fmt.Println(chars) //[]string{""}\n\n    chars = convertor.ToChar("abc")\n    fmt.Println(chars) //[]string{"a", "b", "c"}\n\n    chars = convertor.ToChar("1 2#3")\n    fmt.Println(chars) //[]string{"1", " ", "2", "#", "3"}\n}\n\n\n\n# ToChannel\n\n将切片转为只读channel\n\n函数签名:\n\nfunc ToChannel[T any](array []T) <-chan T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    ch := convertor.ToChannel([]int{1, 2, 3})\n\n    val1, _ := <-ch\n    fmt.Println(val1) //1\n\n    val2, _ := <-ch\n    fmt.Println(val2) //2\n\n    val3, _ := <-ch\n    fmt.Println(val3) //3\n\n    _, ok := <-ch\n    fmt.Println(ok) //false\n}\n\n\n\n# ToFloat\n\n将interface转成float64类型，如果参数无法转换，会返回0和error\n\n函数签名:\n\nfunc ToFloat(value any) (float64, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.ToFloat("")\n    if err != nil {\n        fmt.Println(err) //strconv.ParseFloat: parsing "": invalid syntax\n    }\n    fmt.Println(v) //0\n\n    v, _ = convertor.ToFloat("-.11")\n    fmt.Println(v) //-0.11\n}\n\n\n\n# ToInt\n\n将interface转成int64类型，如果参数无法转换，会返回0和error\n\n函数签名:\n\nfunc ToInt(value any) (int64, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.ToInt("")\n    if err != nil {\n        fmt.Println(err) //strconv.ParseInt: parsing "": invalid syntax\n    }\n    fmt.Println(v) //0\n\n    v, _ = convertor.ToFloat(1.12)\n    fmt.Println(v) //1\n}\n\n\n\n# ToJson\n\n将interface转成json字符串，如果参数无法转换，会返回""和error\n\n函数签名:\n\nfunc ToJson(value any) (string, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var aMap = map[string]int{"a": 1, "b": 2, "c": 3}\n    jsonStr, _ := convertor.ToJson(aMap)\n    fmt.Printf("%q", jsonStr) //"{\\"a\\":1,\\"b\\":2,\\"c\\":3}"\n}\n\n\n\n# ToMap\n\n将切片转为map\n\n函数签名:\n\nfunc ToMap[T any, K comparable, V any](array []T, iteratee func(T) (K, V)) map[K]V\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type Message struct {\n        name string\n        code int\n    }\n    messages := []Message{\n        {name: "Hello", code: 100},\n        {name: "Hi", code: 101},\n    }\n    result := convertor.ToMap(messages, func(msg Message) (int, string) {\n        return msg.code, msg.name\n    })\n\n    fmt.Println(result) //{100: "Hello", 101: "Hi"}\n}\n\n\n\n# ToPointer\n\n返回传入值的指针\n\n函数签名:\n\nfunc ToPointer[T any](value T) *T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    result := convertor.ToPointer(123)\n    fmt.Println(*result) //123\n}\n\n\n\n# ToString\n\n将interface转成字符串\n\n函数签名:\n\nfunc ToString(value any) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    fmt.Printf("%q", convertor.ToString(1)) //"1"\n    fmt.Printf("%q", convertor.ToString(1.1)) //"1.1"\n    fmt.Printf("%q", convertor.ToString([]int{1, 2, 3})) //"[1,2,3]"\n}\n\n\n\n# StructToMap\n\n将struct转成map，只会转换struct中可导出的字段。struct中导出字段需要设置json tag标记\n\n函数签名:\n\nfunc StructToMap(value any) (map[string]any, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type People struct {\n        Name string `json:"name"`\n        age  int\n    }\n    p := People{\n        "test",\n        100,\n    }\n    pm, _ := convertor.StructToMap(p)\n\n    fmt.Printf("type: %T, value: %s", pm, pm) //type: map[string]interface {}, value: map[name:test]\n}\n\n\n\n# MapToSlice\n\nmap中key和value执行函数iteratee后，转为切片\n\n函数签名:\n\nfunc MapToSlice[T any, K comparable, V any](aMap map[K]V, iteratee func(K, V) T) []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    aMap := map[string]int{"a": 1, "b": 2, "c": 3}\n    result := MapToSlice(aMap, func(key string, value int) string {\n        return key + ":" + strconv.Itoa(value)\n    })\n\n    fmt.Println(result) //[]string{"a:1", "b:2", "c:3"}\n}\n\n\n\n# EncodeByte\n\n将data编码成字节切片\n\n函数签名:\n\nfunc EncodeByte(data any) ([]byte, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    byteData, _ := convertor.EncodeByte("abc")\n    fmt.Println(byteData) //[]byte{6, 12, 0, 3, 97, 98, 99}\n}\n\n\n\n# DecodeByte\n\n解码字节切片到目标对象，目标对象需要传入一个指针实例子\n\n函数签名:\n\nfunc DecodeByte(data []byte, target any) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var result string\n\tbyteData := []byte{6, 12, 0, 3, 97, 98, 99}\n\tconvertor.DecodeByte(byteData, &result)\n    fmt.Println(result) //"abc"\n}\n',normalizedContent:'# convertor\n\nconvertor 转换器包支持一些常见的数据类型转换\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/convertor/convertor.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\n\n\n\n\n# 文档\n\n\n# colorhextorgb\n\n颜色值十六进制转rgb\n\n函数签名:\n\nfunc colorhextorgb(colorhex string) (red, green, blue int)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    colorhex := "#003366"\n    r, g, b := convertor.colorhextorgb(colorhex)\n    fmt.println(r, g, b) //0,51,102\n}\n\n\n\n# colorrgbtohex\n\n颜色值rgb转十六进制\n\n函数签名:\n\nfunc colorrgbtohex(red, green, blue int) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    r := 0\n    g := 51\n    b := 102\n    colorhex := convertor.colorrgbtohex(r, g, b)\n\n    fmt.println(colorhex) //#003366\n}\n\n\n\n# tobool\n\n字符串转布尔类型，使用strconv.parsebool\n\n函数签名:\n\nfunc tobool(s string) (bool, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v1, _ := convertor.tobool("1")\n    fmt.println(v1) //true\n\n    v2, _ := convertor.tobool("true")\n    fmt.println(v2) //true\n\n    v3, _ := convertor.tobool("true")\n    fmt.println(v3) //true\n\n    v4, _ := convertor.tobool("123")\n    fmt.println(v4) //false\n}\n\n\n\n# tobytes\n\ninterface转字节切片.\n\n函数签名:\n\nfunc tobytes(data any) ([]byte, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytesdata, err := convertor.tobytes("0")\n    if err != nil {\n        fmt.println(err)\n    }\n    fmt.println(bytesdata) //[]bytes{3, 4, 0, 0}\n}\n\n\n\n# tochar\n\n字符串转字符切片\n\n函数签名:\n\nfunc tochar(s string) []string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    chars := convertor.tochar("")\n    fmt.println(chars) //[]string{""}\n\n    chars = convertor.tochar("abc")\n    fmt.println(chars) //[]string{"a", "b", "c"}\n\n    chars = convertor.tochar("1 2#3")\n    fmt.println(chars) //[]string{"1", " ", "2", "#", "3"}\n}\n\n\n\n# tochannel\n\n将切片转为只读channel\n\n函数签名:\n\nfunc tochannel[t any](array []t) <-chan t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    ch := convertor.tochannel([]int{1, 2, 3})\n\n    val1, _ := <-ch\n    fmt.println(val1) //1\n\n    val2, _ := <-ch\n    fmt.println(val2) //2\n\n    val3, _ := <-ch\n    fmt.println(val3) //3\n\n    _, ok := <-ch\n    fmt.println(ok) //false\n}\n\n\n\n# tofloat\n\n将interface转成float64类型，如果参数无法转换，会返回0和error\n\n函数签名:\n\nfunc tofloat(value any) (float64, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.tofloat("")\n    if err != nil {\n        fmt.println(err) //strconv.parsefloat: parsing "": invalid syntax\n    }\n    fmt.println(v) //0\n\n    v, _ = convertor.tofloat("-.11")\n    fmt.println(v) //-0.11\n}\n\n\n\n# toint\n\n将interface转成int64类型，如果参数无法转换，会返回0和error\n\n函数签名:\n\nfunc toint(value any) (int64, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.toint("")\n    if err != nil {\n        fmt.println(err) //strconv.parseint: parsing "": invalid syntax\n    }\n    fmt.println(v) //0\n\n    v, _ = convertor.tofloat(1.12)\n    fmt.println(v) //1\n}\n\n\n\n# tojson\n\n将interface转成json字符串，如果参数无法转换，会返回""和error\n\n函数签名:\n\nfunc tojson(value any) (string, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var amap = map[string]int{"a": 1, "b": 2, "c": 3}\n    jsonstr, _ := convertor.tojson(amap)\n    fmt.printf("%q", jsonstr) //"{\\"a\\":1,\\"b\\":2,\\"c\\":3}"\n}\n\n\n\n# tomap\n\n将切片转为map\n\n函数签名:\n\nfunc tomap[t any, k comparable, v any](array []t, iteratee func(t) (k, v)) map[k]v\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type message struct {\n        name string\n        code int\n    }\n    messages := []message{\n        {name: "hello", code: 100},\n        {name: "hi", code: 101},\n    }\n    result := convertor.tomap(messages, func(msg message) (int, string) {\n        return msg.code, msg.name\n    })\n\n    fmt.println(result) //{100: "hello", 101: "hi"}\n}\n\n\n\n# topointer\n\n返回传入值的指针\n\n函数签名:\n\nfunc topointer[t any](value t) *t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    result := convertor.topointer(123)\n    fmt.println(*result) //123\n}\n\n\n\n# tostring\n\n将interface转成字符串\n\n函数签名:\n\nfunc tostring(value any) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    fmt.printf("%q", convertor.tostring(1)) //"1"\n    fmt.printf("%q", convertor.tostring(1.1)) //"1.1"\n    fmt.printf("%q", convertor.tostring([]int{1, 2, 3})) //"[1,2,3]"\n}\n\n\n\n# structtomap\n\n将struct转成map，只会转换struct中可导出的字段。struct中导出字段需要设置json tag标记\n\n函数签名:\n\nfunc structtomap(value any) (map[string]any, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type people struct {\n        name string `json:"name"`\n        age  int\n    }\n    p := people{\n        "test",\n        100,\n    }\n    pm, _ := convertor.structtomap(p)\n\n    fmt.printf("type: %t, value: %s", pm, pm) //type: map[string]interface {}, value: map[name:test]\n}\n\n\n\n# maptoslice\n\nmap中key和value执行函数iteratee后，转为切片\n\n函数签名:\n\nfunc maptoslice[t any, k comparable, v any](amap map[k]v, iteratee func(k, v) t) []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    amap := map[string]int{"a": 1, "b": 2, "c": 3}\n    result := maptoslice(amap, func(key string, value int) string {\n        return key + ":" + strconv.itoa(value)\n    })\n\n    fmt.println(result) //[]string{"a:1", "b:2", "c:3"}\n}\n\n\n\n# encodebyte\n\n将data编码成字节切片\n\n函数签名:\n\nfunc encodebyte(data any) ([]byte, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytedata, _ := convertor.encodebyte("abc")\n    fmt.println(bytedata) //[]byte{6, 12, 0, 3, 97, 98, 99}\n}\n\n\n\n# decodebyte\n\n解码字节切片到目标对象，目标对象需要传入一个指针实例子\n\n函数签名:\n\nfunc decodebyte(data []byte, target any) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var result string\n\tbytedata := []byte{6, 12, 0, 3, 97, 98, 99}\n\tconvertor.decodebyte(bytedata, &result)\n    fmt.println(result) //"abc"\n}\n',charsets:{cjk:!0}},{title:"Cryptor",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/cryptor/",relativePath:"cryptor/README.md",key:"v-368631d7",path:"/cryptor/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:89},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:354},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:421},{level:3,title:"AesEcbEncrypt",slug:"aesecbencrypt",normalizedTitle:"aesecbencrypt",charIndex:428},{level:3,title:"AesEcbDecrypt",slug:"aesecbdecrypt",normalizedTitle:"aesecbdecrypt",charIndex:805},{level:3,title:"AesCbcEncrypt",slug:"aescbcencrypt",normalizedTitle:"aescbcencrypt",charIndex:1263},{level:3,title:"AesCbcDecrypt",slug:"aescbcdecrypt",normalizedTitle:"aescbcdecrypt",charIndex:1640},{level:3,title:"AesCtrCrypt",slug:"aesctrcrypt",normalizedTitle:"aesctrcrypt",charIndex:2099},{level:3,title:"AesCfbEncrypt",slug:"aescfbencrypt",normalizedTitle:"aescfbencrypt",charIndex:2548},{level:3,title:"AesCfbDecrypt",slug:"aescfbdecrypt",normalizedTitle:"aescfbdecrypt",charIndex:2924},{level:3,title:"AesOfbEncrypt",slug:"aesofbencrypt",normalizedTitle:"aesofbencrypt",charIndex:3382},{level:3,title:"AesOfbDecrypt",slug:"aesofbdecrypt",normalizedTitle:"aesofbdecrypt",charIndex:3757},{level:3,title:"Base64StdEncode",slug:"base64stdencode",normalizedTitle:"base64stdencode",charIndex:4219},{level:3,title:"Base64StdDecode",slug:"base64stddecode",normalizedTitle:"base64stddecode",charIndex:4505},{level:3,title:"DesEcbEncrypt",slug:"desecbencrypt",normalizedTitle:"desecbencrypt",charIndex:4778},{level:3,title:"DesEcbDecrypt",slug:"desecbdecrypt",normalizedTitle:"desecbdecrypt",charIndex:5135},{level:3,title:"DesCbcEncrypt",slug:"descbcencrypt",normalizedTitle:"descbcencrypt",charIndex:5574},{level:3,title:"DesCbcDecrypt",slug:"descbcdecrypt",normalizedTitle:"descbcdecrypt",charIndex:5931},{level:3,title:"DesCtrCrypt",slug:"desctrcrypt",normalizedTitle:"desctrcrypt",charIndex:6370},{level:3,title:"DesCfbEncrypt",slug:"descfbencrypt",normalizedTitle:"descfbencrypt",charIndex:6799},{level:3,title:"DesCfbDecrypt",slug:"descfbdecrypt",normalizedTitle:"descfbdecrypt",charIndex:7155},{level:3,title:"DesOfbEncrypt",slug:"desofbencrypt",normalizedTitle:"desofbencrypt",charIndex:7593},{level:3,title:"DesOfbDecrypt",slug:"desofbdecrypt",normalizedTitle:"desofbdecrypt",charIndex:7949},{level:3,title:"HmacMd5",slug:"hmacmd5",normalizedTitle:"hmacmd5",charIndex:8387},{level:3,title:"HmacSha1",slug:"hmacsha1",normalizedTitle:"hmacsha1",charIndex:8669},{level:3,title:"HmacSha256",slug:"hmacsha256",normalizedTitle:"hmacsha256",charIndex:8963},{level:3,title:"HmacSha512",slug:"hmacsha512",normalizedTitle:"hmacsha512",charIndex:9289},{level:3,title:"Md5String",slug:"md5string",normalizedTitle:"md5string",charIndex:9680},{level:3,title:"Md5File",slug:"md5file",normalizedTitle:"md5file",charIndex:9940},{level:3,title:"Sha1",slug:"sha1",normalizedTitle:"sha1",charIndex:8673},{level:3,title:"Sha256",slug:"sha256",normalizedTitle:"sha256",charIndex:8967},{level:3,title:"Sha512",slug:"sha512",normalizedTitle:"sha512",charIndex:9293},{level:3,title:"GenerateRsaKey",slug:"generatersakey",normalizedTitle:"generatersakey",charIndex:11096},{level:3,title:"RsaEncrypt",slug:"rsaencrypt",normalizedTitle:"rsaencrypt",charIndex:11447},{level:3,title:"RsaDecrypt",slug:"rsadecrypt",normalizedTitle:"rsadecrypt",charIndex:11887}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 AesEcbEncrypt AesEcbDecrypt AesCbcEncrypt AesCbcDecrypt AesCtrCrypt AesCfbEncrypt AesCfbDecrypt AesOfbEncrypt AesOfbDecrypt Base64StdEncode Base64StdDecode DesEcbEncrypt DesEcbDecrypt DesCbcEncrypt DesCbcDecrypt DesCtrCrypt DesCfbEncrypt DesCfbDecrypt DesOfbEncrypt DesOfbDecrypt HmacMd5 HmacSha1 HmacSha256 HmacSha512 Md5String Md5File Sha1 Sha256 Sha512 GenerateRsaKey RsaEncrypt RsaDecrypt",content:'# Cryptor\n\ncryptor 加密包支持数据加密和解密，获取 md5，hash 值。支持 base64, md5, hmac, aes, des, rsa。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/cryptor/aes.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/des.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/basic.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/rsa.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\n\n\n\n\n# 文档\n\n\n# AesEcbEncrypt\n\n使用AES ECB算法模式加密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc AesEcbEncrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesEcbEncrypt([]byte(data), []byte(key))\n\n    fmt.Println(string(encrypted))\n}\n\n\n\n# AesEcbDecrypt\n\n使用AES ECB算法模式解密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc AesEcbDecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesEcbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesEcbDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# AesCbcEncrypt\n\n使用AES CBC算法模式加密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc AesCbcEncrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCbcEncrypt([]byte(data), []byte(key))\n\n    fmt.Println(string(encrypted))\n}\n\n\n\n# AesCbcDecrypt\n\n使用AES CBC算法模式解密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc AesCbcDecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCbcEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesCbcDecrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# AesCtrCrypt\n\n使用AES CTR算法模式加密/解密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc AesCtrCrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCtrCrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesCtrCrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# AesCfbEncrypt\n\n使用AES CFB算法模式加密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc AesCfbEncrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCfbEncrypt([]byte(data), []byte(key))\n    fmt.Println(string(encrypted))\n}\n\n\n\n# AesCfbDecrypt\n\n使用AES CFB算法模式解密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc AesCfbDecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCfbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesCfbDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# AesOfbEncrypt\n\n使用AES OFB算法模式加密数据. 参数`key`的长度是16, 24 or 32\n\n函数签名:\n\nfunc AesOfbEncrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesOfbEncrypt([]byte(data), []byte(key))\n    fmt.Println(string(encrypted))\n}\n\n\n\n# AesOfbDecrypt\n\n使用AES OFB算法模式解密数据. 参数`key`的长度是16, 24 or 32\n\n函数签名:\n\nfunc AesOfbDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesOfbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesOfbDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# Base64StdEncode\n\n将字符串base64编码\n\n函数签名:\n\nfunc Base64StdEncode(s string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    base64Str := cryptor.Base64StdEncode("hello world")\n    fmt.Println(base64Str) //aGVsbG8gd29ybGQ=\n}\n\n\n\n# Base64StdDecode\n\n解码base64字符串\n\n函数签名:\n\nfunc Base64StdDecode(s string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    str := cryptor.Base64StdDecode("aGVsbG8gd29ybGQ=")\n    fmt.Println(str) //hello world\n}\n\n\n\n# DesEcbEncrypt\n\n使用DES ECB算法模式加密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesEcbEncrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesEcbEncrypt([]byte(data), []byte(key))\n\n    fmt.Println(string(encrypted))\n}\n\n\n\n# DesEcbDecrypt\n\n使用DES ECB算法模式解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesEcbDecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesEcbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.DesEcbDecrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# DesCbcEncrypt\n\n使用DES CBC算法模式加密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesCbcEncrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCbcEncrypt([]byte(data), []byte(key))\n\n    fmt.Println(string(encrypted))\n}\n\n\n\n# DesCbcDecrypt\n\n使用DES CBC算法模式解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesCbcDecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCbcEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.DesCbcDecrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# DesCtrCrypt\n\n使用DES CTR算法模式加密/解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesCtrCrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCtrCrypt([]byte(data), []byte(key))\n    decrypted := cryptor.DesCtrCrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# DesCfbEncrypt\n\n使用DES CFB算法模式加密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesCfbEncrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCfbEncrypt([]byte(data), []byte(key))\n    fmt.Println(string(encrypted))\n}\n\n\n\n# DesCfbDecrypt\n\n使用DES CFB算法模式解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesCfbDecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCfbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.DesCfbDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# DesOfbEncrypt\n\n使用DES OFB算法模式加密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesOfbEncrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesOfbEncrypt([]byte(data), []byte(key))\n    fmt.Println(string(encrypted))\n}\n\n\n\n# DesOfbDecrypt\n\n使用DES OFB算法模式解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc DesOfbDecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesOfbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.DesOfbDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# HmacMd5\n\n获取字符串md5 hmac值\n\n函数签名:\n\nfunc HmacMd5(data, key string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.HmacMd5("hello world", "12345"))\n    fmt.Println(s) //5f4c9faaff0a1ad3007d9ddc06abe36d\n}\n\n\n\n# HmacSha1\n\n获取字符串sha1 hmac值\n\n函数签名:\n\nfunc HmacSha1(data, key string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.HmacSha1("hello world", "12345"))\n    fmt.Println(s) //3826f812255d8683f051ee97346d1359234d5dbd\n}\n\n\n\n# HmacSha256\n\n获取字符串sha256 hmac值\n\n函数签名:\n\nfunc HmacSha256(data, key string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.HmacSha256("hello world", "12345"))\n    fmt.Println(s) //9dce2609f2d67d41f74c7f9efc8ccd44370d41ad2de52982627588dfe7289ab8\n}\n\n\n\n# HmacSha512\n\n获取字符串sha512 hmac值\n\n函数签名:\n\nfunc HmacSha512(data, key string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.HmacSha512("hello world", "12345"))\n    fmt.Println(s)\n //5b1563ac4e9b49c9ada8ccb232588fc4f0c30fd12f756b3a0b95af4985c236ca60925253bae10ce2c6bf9af1c1679b51e5395ff3d2826c0a2c7c0d72225d4175\n}\n\n\n\n# Md5String\n\n获取字符串md5值\n\n函数签名:\n\nfunc Md5String(s string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Md5String("hello"))\n    fmt.Println(s) //5d41402abc4b2a76b9719d911017c592\n}\n\n\n\n# Md5File\n\n获取文件md5值.\n\n函数签名:\n\nfunc Md5File(filepath string) (string, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Md5File("./main.go"))\n    fmt.Println(s)\n}\n\n\n\n# Sha1\n\n获取字符串sha1值\n\n函数签名:\n\nfunc Sha1(data string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Sha1("hello world"))\n    fmt.Println(s) //2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\n}\n\n\n\n# Sha256\n\n获取字符串sha256值\n\n函数签名:\n\nfunc Sha256(data string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Sha256("hello world"))\n    fmt.Println(s) //b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n}\n\n\n\n# Sha512\n\n获取字符串sha512值\n\n函数签名:\n\nfunc Sha512(data string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Sha512("hello world"))\n    fmt.Println(s) //309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n}\n\n\n\n# GenerateRsaKey\n\n在当前目录下创建rsa私钥文件和公钥文件\n\n函数签名:\n\nfunc GenerateRsaKey(keySize int, priKeyFile, pubKeyFile string) error\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.GenerateRsaKey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# RsaEncrypt\n\n用公钥文件ras加密数据\n\n函数签名:\n\nfunc RsaEncrypt(data []byte, pubKeyFileName string) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.GenerateRsaKey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.Println(err)\n    }\n    data := []byte("hello world")\n    encrypted := cryptor.RsaEncrypt(data, "rsa_public.pem")\n    decrypted := cryptor.RsaDecrypt(encrypted, "rsa_private.pem")\n  \tfmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# RsaDecrypt\n\n用私钥文件rsa解密数据\n\n函数签名:\n\nfunc RsaDecrypt(data []byte, privateKeyFileName string) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.GenerateRsaKey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.Println(err)\n    }\n    data := []byte("hello world")\n    encrypted := cryptor.RsaEncrypt(data, "rsa_public.pem")\n    decrypted := cryptor.RsaDecrypt(encrypted, "rsa_private.pem")\n  \tfmt.Println(string(decrypted)) //hello world\n}\n',normalizedContent:'# cryptor\n\ncryptor 加密包支持数据加密和解密，获取 md5，hash 值。支持 base64, md5, hmac, aes, des, rsa。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/cryptor/aes.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/des.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/basic.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/rsa.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\n\n\n\n\n# 文档\n\n\n# aesecbencrypt\n\n使用aes ecb算法模式加密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc aesecbencrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesecbencrypt([]byte(data), []byte(key))\n\n    fmt.println(string(encrypted))\n}\n\n\n\n# aesecbdecrypt\n\n使用aes ecb算法模式解密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc aesecbdecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesecbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aesecbdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# aescbcencrypt\n\n使用aes cbc算法模式加密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc aescbcencrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aescbcencrypt([]byte(data), []byte(key))\n\n    fmt.println(string(encrypted))\n}\n\n\n\n# aescbcdecrypt\n\n使用aes cbc算法模式解密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc aescbcdecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aescbcencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aescbcdecrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# aesctrcrypt\n\n使用aes ctr算法模式加密/解密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc aesctrcrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesctrcrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aesctrcrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# aescfbencrypt\n\n使用aes cfb算法模式加密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc aescfbencrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aescfbencrypt([]byte(data), []byte(key))\n    fmt.println(string(encrypted))\n}\n\n\n\n# aescfbdecrypt\n\n使用aes cfb算法模式解密数据. 参数`key`的长度是16, 24 or 32。\n\n函数签名:\n\nfunc aescfbdecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aescfbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aescfbdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# aesofbencrypt\n\n使用aes ofb算法模式加密数据. 参数`key`的长度是16, 24 or 32\n\n函数签名:\n\nfunc aesofbencrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesofbencrypt([]byte(data), []byte(key))\n    fmt.println(string(encrypted))\n}\n\n\n\n# aesofbdecrypt\n\n使用aes ofb算法模式解密数据. 参数`key`的长度是16, 24 or 32\n\n函数签名:\n\nfunc aesofbdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesofbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aesofbdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# base64stdencode\n\n将字符串base64编码\n\n函数签名:\n\nfunc base64stdencode(s string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    base64str := cryptor.base64stdencode("hello world")\n    fmt.println(base64str) //agvsbg8gd29ybgq=\n}\n\n\n\n# base64stddecode\n\n解码base64字符串\n\n函数签名:\n\nfunc base64stddecode(s string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    str := cryptor.base64stddecode("agvsbg8gd29ybgq=")\n    fmt.println(str) //hello world\n}\n\n\n\n# desecbencrypt\n\n使用des ecb算法模式加密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc desecbencrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desecbencrypt([]byte(data), []byte(key))\n\n    fmt.println(string(encrypted))\n}\n\n\n\n# desecbdecrypt\n\n使用des ecb算法模式解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc desecbdecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desecbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.desecbdecrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# descbcencrypt\n\n使用des cbc算法模式加密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc descbcencrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.descbcencrypt([]byte(data), []byte(key))\n\n    fmt.println(string(encrypted))\n}\n\n\n\n# descbcdecrypt\n\n使用des cbc算法模式解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc descbcdecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.descbcencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.descbcdecrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# desctrcrypt\n\n使用des ctr算法模式加密/解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc desctrcrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desctrcrypt([]byte(data), []byte(key))\n    decrypted := cryptor.desctrcrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# descfbencrypt\n\n使用des cfb算法模式加密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc descfbencrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.descfbencrypt([]byte(data), []byte(key))\n    fmt.println(string(encrypted))\n}\n\n\n\n# descfbdecrypt\n\n使用des cfb算法模式解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc descfbdecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.descfbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.descfbdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# desofbencrypt\n\n使用des ofb算法模式加密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc desofbencrypt(data, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desofbencrypt([]byte(data), []byte(key))\n    fmt.println(string(encrypted))\n}\n\n\n\n# desofbdecrypt\n\n使用des ofb算法模式解密数据. 参数`key`的长度是8\n\n函数签名:\n\nfunc desofbdecrypt(encrypted, key []byte) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desofbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.desofbdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# hmacmd5\n\n获取字符串md5 hmac值\n\n函数签名:\n\nfunc hmacmd5(data, key string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.hmacmd5("hello world", "12345"))\n    fmt.println(s) //5f4c9faaff0a1ad3007d9ddc06abe36d\n}\n\n\n\n# hmacsha1\n\n获取字符串sha1 hmac值\n\n函数签名:\n\nfunc hmacsha1(data, key string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.hmacsha1("hello world", "12345"))\n    fmt.println(s) //3826f812255d8683f051ee97346d1359234d5dbd\n}\n\n\n\n# hmacsha256\n\n获取字符串sha256 hmac值\n\n函数签名:\n\nfunc hmacsha256(data, key string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.hmacsha256("hello world", "12345"))\n    fmt.println(s) //9dce2609f2d67d41f74c7f9efc8ccd44370d41ad2de52982627588dfe7289ab8\n}\n\n\n\n# hmacsha512\n\n获取字符串sha512 hmac值\n\n函数签名:\n\nfunc hmacsha512(data, key string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.hmacsha512("hello world", "12345"))\n    fmt.println(s)\n //5b1563ac4e9b49c9ada8ccb232588fc4f0c30fd12f756b3a0b95af4985c236ca60925253bae10ce2c6bf9af1c1679b51e5395ff3d2826c0a2c7c0d72225d4175\n}\n\n\n\n# md5string\n\n获取字符串md5值\n\n函数签名:\n\nfunc md5string(s string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.md5string("hello"))\n    fmt.println(s) //5d41402abc4b2a76b9719d911017c592\n}\n\n\n\n# md5file\n\n获取文件md5值.\n\n函数签名:\n\nfunc md5file(filepath string) (string, error)\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.md5file("./main.go"))\n    fmt.println(s)\n}\n\n\n\n# sha1\n\n获取字符串sha1值\n\n函数签名:\n\nfunc sha1(data string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.sha1("hello world"))\n    fmt.println(s) //2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\n}\n\n\n\n# sha256\n\n获取字符串sha256值\n\n函数签名:\n\nfunc sha256(data string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.sha256("hello world"))\n    fmt.println(s) //b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n}\n\n\n\n# sha512\n\n获取字符串sha512值\n\n函数签名:\n\nfunc sha512(data string) string\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.sha512("hello world"))\n    fmt.println(s) //309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n}\n\n\n\n# generatersakey\n\n在当前目录下创建rsa私钥文件和公钥文件\n\n函数签名:\n\nfunc generatersakey(keysize int, prikeyfile, pubkeyfile string) error\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.generatersakey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# rsaencrypt\n\n用公钥文件ras加密数据\n\n函数签名:\n\nfunc rsaencrypt(data []byte, pubkeyfilename string) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.generatersakey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.println(err)\n    }\n    data := []byte("hello world")\n    encrypted := cryptor.rsaencrypt(data, "rsa_public.pem")\n    decrypted := cryptor.rsadecrypt(encrypted, "rsa_private.pem")\n  \tfmt.println(string(decrypted)) //hello world\n}\n\n\n\n# rsadecrypt\n\n用私钥文件rsa解密数据\n\n函数签名:\n\nfunc rsadecrypt(data []byte, privatekeyfilename string) []byte\n\n\n列子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.generatersakey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.println(err)\n    }\n    data := []byte("hello world")\n    encrypted := cryptor.rsaencrypt(data, "rsa_public.pem")\n    decrypted := cryptor.rsadecrypt(encrypted, "rsa_private.pem")\n  \tfmt.println(string(decrypted)) //hello world\n}\n',charsets:{cjk:!0}},{title:"List",frontmatter:{},regularPath:"/datastructure/",relativePath:"datastructure/README.md",key:"v-38013f32",path:"/datastructure/",headers:[{level:2,title:"源码",slug:"源码",normalizedTitle:"源码",charIndex:40},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:125},{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:197},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:541},{level:3,title:"",slug:"newlist",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"valueof",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"indexof",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"lastindexof",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"indexoffunc",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"lastindexoffunc",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"push",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"popfirst",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"popfirst-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"updateat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"equal",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clone",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"merge",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"cap",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"swap",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"reverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"unique",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"union",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"intersection",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"sublist",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteif",normalizedTitle:"",charIndex:0}],lastUpdated:"2022/10/22 下午1:42:08",lastUpdatedTimestamp:1666417328e3,headersStr:"源码 用法 目录 文档                            ",content:'# List\n\nList 是线性表数据结构, 用 go 切片实现。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/list/list.go\n\n\n\n\n# 用法\n\nimport (\n    "github.com/duke-git/lancet/v2/datastructure"\n)\n\n\n\n\n\n# 目录\n\n * NewList\n\n * Contain\n\n * Data\n\n * ValueOf\n\n * IndexOf\n\n * LastIndexOf\n\n * IndexOfFunc\n\n * LastIndexOfFunc\n\n * Push\n\n * PopFirst\n\n * PopLast\n\n * DeleteAt\n\n * InsertAt\n\n * UpdateAt\n\n * Equal\n\n * IsEmpty\n\n * Clear\n\n * Clone\n\n * Merge\n\n * Size\n\n * Cap\n\n * Swap\n\n * Reverse\n\n * Unique\n\n * Union\n\n * Intersection\n\n * SubList\n\n * DeleteIf\n\n\n\n\n# 文档\n\n\n# NewList\n\n返回List指针实例\n\n函数签名:\n\ntype List[T any] struct {\n\tdata []T\n}\nfunc NewList[T any](data []T) *List[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    fmt.Println(li)\n}\n\n\n\n# Contain\n\n判断列表中是否包含特定值\n\n函数签名:\n\nfunc (l *List[T]) Contain(value T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    fmt.Println(li.Contain(1)) //true\n    fmt.Println(li.Contain(0)) //false\n}\n\n\n\n# Data\n\n返回List中所有数据（切片）\n\n函数签名:\n\nfunc (l *List[T]) Data() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    data := li.Data()\n\n    fmt.Println(data) //[]int{1, 2, 3}\n}\n\n\n\n# ValueOf\n\n返回列表中索引处的值指针\n\n函数签名:\n\nfunc (l *List[T]) ValueOf(index int) (*T, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    v, ok := li.ValueOf(0)\n\n    fmt.Println(*v) //1\n    fmt.Println(ok) //true\n}\n\n\n\n# IndexOf\n\n返回列表中值的索引，如果没有找到返回-1\n\n函数签名:\n\nfunc (l *List[T]) IndexOf(value T) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    fmt.Println(li.IndexOf(1)) //0\n    fmt.Println(li.IndexOf(0)) //-1\n}\n\n\n\n# LastIndexOf\n\n返回列表中最后一次出现的值的索引。如果未找到，则返回-1\n\n函数签名:\n\nfunc (l *List[T]) LastIndexOf(value T) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 1})\n\n    fmt.Println(li.LastIndexOf(1)) // 3\n    fmt.Println(li.LastIndexOf(0)) //-1\n}\n\n\n\n# IndexOfFunc\n\n返回第一个符合函数条件的元素的索引。如果未找到，则返回-1\n\n函数签名:\n\nfunc (l *List[T]) IndexOfFunc(f func(T) bool) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    fmt.Println(li.IndexOfFunc(func(a int) bool { return a == 1 })) //0\n    fmt.Println(li.IndexOfFunc(func(a int) bool { return a == 0 })) //-1\n}\n\n\n\n# LastIndexOfFunc\n\n返回最后一个符合函数条件的元素的索引。如果未找到，则返回-1\n\n函数签名:\n\nfunc (l *List[T]) LastIndexOfFunc(f func(T) bool) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 1})\n\n    fmt.Println(li.LastIndexOfFunc(func(a int) bool { return a == 1 })) // 3\n    fmt.Println(li.LastIndexOfFunc(func(a int) bool { return a == 0 })) //-1\n}\n\n\n\n# Push\n\n将值附加到列表末尾\n\n函数签名:\n\nfunc (l *List[T]) Push(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    li.Push(4)\n\n    fmt.Println(li.Data()) //[]int{1, 2, 3, 4}\n}\n\n\n\n# PopFirst\n\n删除列表的第一个值并返回该值\n\n函数签名:\n\nfunc (l *List[T]) PopFirst() (*T, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    v, ok := li.PopFirst()\n\n    fmt.Println(*v) //1\n    fmt.Println(ok) //true\n    fmt.Println(li.Data()) //2, 3\n}\n\n\n\n# PopFirst\n\n删除列表的最后一个值并返回该值\n\n函数签名:\n\nfunc (l *List[T]) PopLast() (*T, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    v, ok := li.PopLast()\n\n    fmt.Println(*v) //3\n    fmt.Println(ok) //true\n    fmt.Println(li.Data()) //1, 2\n}\n\n\n\n# DeleteAt\n\n删除索引处列表的值，如果索引不在0和列表数据长度之间，则不执行任何操作\n\n函数签名:\n\nfunc (l *List[T]) DeleteAt(index int)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 4})\n\n    li.DeleteAt(-1)\n    fmt.Println(li.Data()) //1,2,3,4\n\n    li.DeleteAt(4)\n    fmt.Println(li.Data()) //1,2,3,4\n\n    li.DeleteAt(0)\n    fmt.Println(li.Data()) //2,3,4\n\n    li.DeleteAt(2)\n    fmt.Println(li.Data()) //2,3\n}\n\n\n\n# InsertAt\n\n在索引处插入值到列表中，如果索引不在 0 和列表数据长度之间，则不执行任何操作\n\n函数签名:\n\nfunc (l *List[T]) InsertAt(index int, value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    li.InsertAt(-1, 0)\n    fmt.Println(li.Data()) //1,2,3\n\n    li.InsertAt(4, 0)\n    fmt.Println(li.Data()) //1,2,3\n\n    li.InsertAt(3, 4)\n    fmt.Println(li.Data()) //1,2,3,4\n\n    // li.InsertAt(2, 4)\n    // fmt.Println(li.Data()) //1,2,4,3\n}\n\n\n\n# UpdateAt\n\n更新索引处列表的值，索引应该在0和列表数据长度-1之间\n\n函数签名:\n\nfunc (l *List[T]) UpdateAt(index int, value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    li.UpdateAt(-1, 0)\n    fmt.Println(li.Data()) //1,2,3\n\n    li.UpdateAt(2, 4)\n    fmt.Println(li.Data()) //1,2,4\n\n    li.UpdateAt(3, 5)\n    fmt.Println(li.Data()) //1,2,4\n}\n\n\n\n# Equal\n\n比较一个列表和另一个列表，在每个元素上使用 reflect.DeepEqual\n\n函数签名:\n\nfunc (l *List[T]) Equal(other *List[T]) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3, 4})\n    li2 := list.NewList([]int{1, 2, 3, 4})\n    li3 := list.NewList([]int{1, 2, 3})\n\n    fmt.Println(li1.Equal(li2)) //true\n    fmt.Println(li1.Equal(li3)) //false\n}\n\n\n\n# IsEmpty\n\n判断列表是否为空\n\n函数签名:\n\nfunc (l *List[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3})\n    li2 := list.NewList([]int{})\n\n    fmt.Println(li1.IsEmpty()) //false\n    fmt.Println(li2.IsEmpty()) //true\n}\n\n\n\n# Clear\n\n清空列表数据\n\n函数签名:\n\nfunc (l *List[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    li.Clear()\n\n    fmt.Println(li.Data()) // empty\n}\n\n\n\n# Clone\n\n返回列表的一个拷贝\n\n函数签名:\n\nfunc (l *List[T]) Clone() *List[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    cloneList := li.Clone()\n\n    fmt.Println(cloneList.Data()) // 1,2,3\n}\n\n\n\n# Merge\n\n合并两个列表，返回新的列表\n\n函数签名:\n\nfunc (l *List[T]) Merge(other *List[T]) *List[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3, 4})\n    li2 := list.NewList([]int{4, 5, 6})\n    li3 := li1.Merge(li2)\n\n    fmt.Println(li3.Data()) //1, 2, 3, 4, 4, 5, 6\n}\n\n\n\n# Size\n\n返回列表数据项的数量\n\n函数签名:\n\nfunc (l *List[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 4})\n\n    fmt.Println(li.Size()) //4\n}\n\n\n\n# Cap\n\n返回列表数据容量\n\n函数签名:\n\nfunc (l *List[T]) Cap() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n\tdata := make([]int, 0, 100)\n\n    li := list.NewList(data)\n\n    fmt.Println(li.Cap()) // 100\n}\n\n\n\n# Swap\n\n交换列表中两个索引位置的值\n\n函数签名:\n\nfunc (l *List[T]) Swap(i, j int)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 4})\n    li.Swap(0, 3)\n\n    fmt.Println(li.Data()) //4, 2, 3, 1\n}\n\n\n\n# Reverse\n\n反转列表的数据项顺序\n\n函数签名:\n\nfunc (l *List[T]) Reverse()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 4})\n    li.Reverse()\n\n    fmt.Println(li.Data()) //4, 3, 2, 1\n}\n\n\n\n# Unique\n\n列表去除重复数据项\n\n函数签名:\n\nfunc (l *List[T]) Unique()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 2, 3, 4})\n    li.Unique()\n\n    fmt.Println(li.Data()) //1,2,3,4\n}\n\n\n\n# Union\n\n两个列表取并集，去除重复数据项\n\n函数签名:\n\nfunc (l *List[T]) Union(other *List[T]) *List[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3, 4})\n    li2 := list.NewList([]int{4, 5, 6})\n    li3 := li1.Union(li2)\n\n    fmt.Println(li3.Data()) //1,2,3,4,5,6\n}\n\n\n\n# Intersection\n\n两个列表取交集\n\n函数签名:\n\nfunc (l *List[T]) Intersection(other *List[T]) *List[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3, 4})\n    li2 := list.NewList([]int{4, 5, 6})\n    li3 := li1.Intersection(li2)\n\n    fmt.Println(li3.Data()) //4\n}\n\n\n\n# SubList\n\nSubList returns a sub list of the original list between the specified fromIndex, inclusive, and toIndex, exclusive.\n\n函数签名:\n\nfunc (l *List[T]) SubList(fromIndex, toIndex int) *List[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    l := list.NewList([]int{1, 2, 3, 4, 5, 6})\n\n    fmt.Println(l.SubList(2, 5)) // []int{3, 4, 5}\n}\n\n\n\n# DeleteIf\n\n删除列表中所有符合函数（调用函数返回true)的元素，返回删除元素的数量\n\n函数签名:\n\nfunc (l *List[T]) DeleteIf(f func(T) bool) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n\tl := list.NewList([]int{1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1})\n\n\tfmt.Println(l.DeleteIf(func(a int) bool { return a == 1 })) // 12\n\tfmt.Println(l.Data()) // []int{2, 3, 4}\n}\n',normalizedContent:'# list\n\nlist 是线性表数据结构, 用 go 切片实现。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/list/list.go\n\n\n\n\n# 用法\n\nimport (\n    "github.com/duke-git/lancet/v2/datastructure"\n)\n\n\n\n\n\n# 目录\n\n * newlist\n\n * contain\n\n * data\n\n * valueof\n\n * indexof\n\n * lastindexof\n\n * indexoffunc\n\n * lastindexoffunc\n\n * push\n\n * popfirst\n\n * poplast\n\n * deleteat\n\n * insertat\n\n * updateat\n\n * equal\n\n * isempty\n\n * clear\n\n * clone\n\n * merge\n\n * size\n\n * cap\n\n * swap\n\n * reverse\n\n * unique\n\n * union\n\n * intersection\n\n * sublist\n\n * deleteif\n\n\n\n\n# 文档\n\n\n# newlist\n\n返回list指针实例\n\n函数签名:\n\ntype list[t any] struct {\n\tdata []t\n}\nfunc newlist[t any](data []t) *list[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    fmt.println(li)\n}\n\n\n\n# contain\n\n判断列表中是否包含特定值\n\n函数签名:\n\nfunc (l *list[t]) contain(value t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    fmt.println(li.contain(1)) //true\n    fmt.println(li.contain(0)) //false\n}\n\n\n\n# data\n\n返回list中所有数据（切片）\n\n函数签名:\n\nfunc (l *list[t]) data() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    data := li.data()\n\n    fmt.println(data) //[]int{1, 2, 3}\n}\n\n\n\n# valueof\n\n返回列表中索引处的值指针\n\n函数签名:\n\nfunc (l *list[t]) valueof(index int) (*t, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    v, ok := li.valueof(0)\n\n    fmt.println(*v) //1\n    fmt.println(ok) //true\n}\n\n\n\n# indexof\n\n返回列表中值的索引，如果没有找到返回-1\n\n函数签名:\n\nfunc (l *list[t]) indexof(value t) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    fmt.println(li.indexof(1)) //0\n    fmt.println(li.indexof(0)) //-1\n}\n\n\n\n# lastindexof\n\n返回列表中最后一次出现的值的索引。如果未找到，则返回-1\n\n函数签名:\n\nfunc (l *list[t]) lastindexof(value t) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 1})\n\n    fmt.println(li.lastindexof(1)) // 3\n    fmt.println(li.lastindexof(0)) //-1\n}\n\n\n\n# indexoffunc\n\n返回第一个符合函数条件的元素的索引。如果未找到，则返回-1\n\n函数签名:\n\nfunc (l *list[t]) indexoffunc(f func(t) bool) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    fmt.println(li.indexoffunc(func(a int) bool { return a == 1 })) //0\n    fmt.println(li.indexoffunc(func(a int) bool { return a == 0 })) //-1\n}\n\n\n\n# lastindexoffunc\n\n返回最后一个符合函数条件的元素的索引。如果未找到，则返回-1\n\n函数签名:\n\nfunc (l *list[t]) lastindexoffunc(f func(t) bool) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 1})\n\n    fmt.println(li.lastindexoffunc(func(a int) bool { return a == 1 })) // 3\n    fmt.println(li.lastindexoffunc(func(a int) bool { return a == 0 })) //-1\n}\n\n\n\n# push\n\n将值附加到列表末尾\n\n函数签名:\n\nfunc (l *list[t]) push(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    li.push(4)\n\n    fmt.println(li.data()) //[]int{1, 2, 3, 4}\n}\n\n\n\n# popfirst\n\n删除列表的第一个值并返回该值\n\n函数签名:\n\nfunc (l *list[t]) popfirst() (*t, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    v, ok := li.popfirst()\n\n    fmt.println(*v) //1\n    fmt.println(ok) //true\n    fmt.println(li.data()) //2, 3\n}\n\n\n\n# popfirst\n\n删除列表的最后一个值并返回该值\n\n函数签名:\n\nfunc (l *list[t]) poplast() (*t, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    v, ok := li.poplast()\n\n    fmt.println(*v) //3\n    fmt.println(ok) //true\n    fmt.println(li.data()) //1, 2\n}\n\n\n\n# deleteat\n\n删除索引处列表的值，如果索引不在0和列表数据长度之间，则不执行任何操作\n\n函数签名:\n\nfunc (l *list[t]) deleteat(index int)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 4})\n\n    li.deleteat(-1)\n    fmt.println(li.data()) //1,2,3,4\n\n    li.deleteat(4)\n    fmt.println(li.data()) //1,2,3,4\n\n    li.deleteat(0)\n    fmt.println(li.data()) //2,3,4\n\n    li.deleteat(2)\n    fmt.println(li.data()) //2,3\n}\n\n\n\n# insertat\n\n在索引处插入值到列表中，如果索引不在 0 和列表数据长度之间，则不执行任何操作\n\n函数签名:\n\nfunc (l *list[t]) insertat(index int, value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    li.insertat(-1, 0)\n    fmt.println(li.data()) //1,2,3\n\n    li.insertat(4, 0)\n    fmt.println(li.data()) //1,2,3\n\n    li.insertat(3, 4)\n    fmt.println(li.data()) //1,2,3,4\n\n    // li.insertat(2, 4)\n    // fmt.println(li.data()) //1,2,4,3\n}\n\n\n\n# updateat\n\n更新索引处列表的值，索引应该在0和列表数据长度-1之间\n\n函数签名:\n\nfunc (l *list[t]) updateat(index int, value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    li.updateat(-1, 0)\n    fmt.println(li.data()) //1,2,3\n\n    li.updateat(2, 4)\n    fmt.println(li.data()) //1,2,4\n\n    li.updateat(3, 5)\n    fmt.println(li.data()) //1,2,4\n}\n\n\n\n# equal\n\n比较一个列表和另一个列表，在每个元素上使用 reflect.deepequal\n\n函数签名:\n\nfunc (l *list[t]) equal(other *list[t]) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3, 4})\n    li2 := list.newlist([]int{1, 2, 3, 4})\n    li3 := list.newlist([]int{1, 2, 3})\n\n    fmt.println(li1.equal(li2)) //true\n    fmt.println(li1.equal(li3)) //false\n}\n\n\n\n# isempty\n\n判断列表是否为空\n\n函数签名:\n\nfunc (l *list[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3})\n    li2 := list.newlist([]int{})\n\n    fmt.println(li1.isempty()) //false\n    fmt.println(li2.isempty()) //true\n}\n\n\n\n# clear\n\n清空列表数据\n\n函数签名:\n\nfunc (l *list[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    li.clear()\n\n    fmt.println(li.data()) // empty\n}\n\n\n\n# clone\n\n返回列表的一个拷贝\n\n函数签名:\n\nfunc (l *list[t]) clone() *list[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    clonelist := li.clone()\n\n    fmt.println(clonelist.data()) // 1,2,3\n}\n\n\n\n# merge\n\n合并两个列表，返回新的列表\n\n函数签名:\n\nfunc (l *list[t]) merge(other *list[t]) *list[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3, 4})\n    li2 := list.newlist([]int{4, 5, 6})\n    li3 := li1.merge(li2)\n\n    fmt.println(li3.data()) //1, 2, 3, 4, 4, 5, 6\n}\n\n\n\n# size\n\n返回列表数据项的数量\n\n函数签名:\n\nfunc (l *list[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 4})\n\n    fmt.println(li.size()) //4\n}\n\n\n\n# cap\n\n返回列表数据容量\n\n函数签名:\n\nfunc (l *list[t]) cap() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n\tdata := make([]int, 0, 100)\n\n    li := list.newlist(data)\n\n    fmt.println(li.cap()) // 100\n}\n\n\n\n# swap\n\n交换列表中两个索引位置的值\n\n函数签名:\n\nfunc (l *list[t]) swap(i, j int)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 4})\n    li.swap(0, 3)\n\n    fmt.println(li.data()) //4, 2, 3, 1\n}\n\n\n\n# reverse\n\n反转列表的数据项顺序\n\n函数签名:\n\nfunc (l *list[t]) reverse()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 4})\n    li.reverse()\n\n    fmt.println(li.data()) //4, 3, 2, 1\n}\n\n\n\n# unique\n\n列表去除重复数据项\n\n函数签名:\n\nfunc (l *list[t]) unique()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 2, 3, 4})\n    li.unique()\n\n    fmt.println(li.data()) //1,2,3,4\n}\n\n\n\n# union\n\n两个列表取并集，去除重复数据项\n\n函数签名:\n\nfunc (l *list[t]) union(other *list[t]) *list[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3, 4})\n    li2 := list.newlist([]int{4, 5, 6})\n    li3 := li1.union(li2)\n\n    fmt.println(li3.data()) //1,2,3,4,5,6\n}\n\n\n\n# intersection\n\n两个列表取交集\n\n函数签名:\n\nfunc (l *list[t]) intersection(other *list[t]) *list[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3, 4})\n    li2 := list.newlist([]int{4, 5, 6})\n    li3 := li1.intersection(li2)\n\n    fmt.println(li3.data()) //4\n}\n\n\n\n# sublist\n\nsublist returns a sub list of the original list between the specified fromindex, inclusive, and toindex, exclusive.\n\n函数签名:\n\nfunc (l *list[t]) sublist(fromindex, toindex int) *list[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    l := list.newlist([]int{1, 2, 3, 4, 5, 6})\n\n    fmt.println(l.sublist(2, 5)) // []int{3, 4, 5}\n}\n\n\n\n# deleteif\n\n删除列表中所有符合函数（调用函数返回true)的元素，返回删除元素的数量\n\n函数签名:\n\nfunc (l *list[t]) deleteif(f func(t) bool) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n\tl := list.newlist([]int{1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1})\n\n\tfmt.println(l.deleteif(func(a int) bool { return a == 1 })) // 12\n\tfmt.println(l.data()) // []int{2, 3, 4}\n}\n',charsets:{cjk:!0}},{title:"Linklist",frontmatter:{},regularPath:"/datastructure/linklist.html",relativePath:"datastructure/linklist.md",key:"v-25df5650",path:"/datastructure/linklist.html",headers:[{level:2,title:"源码",slug:"源码",normalizedTitle:"源码",charIndex:57},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:229},{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:311},{level:3,title:"1. SinglyLink单链表",slug:"_1-singlylink单链表",normalizedTitle:"1. singlylink单链表",charIndex:318},{level:3,title:"2. DoublyLink双向链表",slug:"_2-doublylink双向链表",normalizedTitle:"2. doublylink双向链表",charIndex:535},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:740},{level:3,title:"1. SinglyLink",slug:"_1-singlylink",normalizedTitle:"1. singlylink",charIndex:318},{level:3,title:"",slug:"newsinglylink",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"values",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertathead",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertattail",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteathead",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteattail",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deletevalue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"reverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"getmiddlenode",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"print",normalizedTitle:"",charIndex:0},{level:3,title:"2. DoublyLink",slug:"_2-doublylink",normalizedTitle:"2. doublylink",charIndex:535},{level:3,title:"",slug:"newdoublylink",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"values-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertat-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertathead-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertattail-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteat-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteathead-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteattail-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"reverse-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"getmiddlenode-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"print-2",normalizedTitle:"",charIndex:0}],lastUpdated:"2022/10/22 上午11:35:23",lastUpdatedTimestamp:1666409723e3,headersStr:"源码 用法 目录 1. SinglyLink单链表 2. DoublyLink双向链表 文档 1. SinglyLink                2. DoublyLink              ",content:'# Linklist\n\nLinklist是链表数据结构，它的节点有一个值和一个指向下一个节点的指针。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/link/singlylink.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/link/doublylink.go\n\n\n\n\n# 用法\n\nimport (\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\n\n\n\n\n# 目录\n\n\n# 1. SinglyLink单链表\n\n * NewSinglyLink\n * Values\n * InsertAt\n * InsertAtHead\n * InsertAtTail\n * DeleteAt\n * DeleteAtHead\n * DeleteAtTail\n * DeleteValue\n * Reverse\n * GetMiddleNode\n * Size\n * IsEmpty\n * Clear\n * Print\n\n\n# 2. DoublyLink双向链表\n\n * NewDoublyLink\n * Values\n * InsertAt\n * InsertAtHead\n * InsertAtTail\n * DeleteAt\n * DeleteAtHead\n * DeleteAtTail\n * Reverse\n * GetMiddleNode\n * Size\n * IsEmpty\n * Clear\n * Print\n\n\n\n\n# 文档\n\n\n# 1. SinglyLink\n\nSingleLink是单向链表，它的节点有一个值和一个指向链表的下一个节点的指针。\n\n\n# NewSinglyLink\n\n创建SinglyLink指针实例\n\n函数签名:\n\ntype LinkNode[T any] struct {\n\tValue T\n\tNext  *LinkNode[T]\n}\ntype SinglyLink[T any] struct {\n\tHead   *datastructure.LinkNode[T]\n\tlength int\n}\nfunc NewSinglyLink[T any]() *SinglyLink[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n    fmt.Println(lk)\n}\n\n\n\n# Values\n\n返回链表中所有节点值的切片\n\n函数签名:\n\nfunc (link *SinglyLink[T]) Values() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# InsertAt\n\n将值插入到索引处的链表中，索引应大于或等于 0 且小于或等于链表节点数\n\n函数签名:\n\nfunc (link *SinglyLink[T]) InsertAt(index int, value T) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAt(0, 1)\n    lk.InsertAt(1, 2)\n    lk.InsertAt(2, 3)\n    lk.InsertAt(2, 4)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 4, 3}\n}\n\n\n\n# InsertAtHead\n\n将值插入到链表表头\n\n函数签名:\n\nfunc (link *SinglyLink[T]) InsertAtHead(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtHead(1)\n    lk.InsertAtHead(2)\n    lk.InsertAtHead(3)\n\n    fmt.Println(lk.Values()) //[]int{3, 2, 1}\n}\n\n\n\n# InsertAtTail\n\n将值插入到链表末尾\n\n函数签名:\n\nfunc (link *SinglyLink[T]) InsertAtTail(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# DeleteAt\n\n删除特定索引处的值，索引应大于或等于0且小于或等于链接节点数 - 1\n\n函数签名:\n\nfunc (link *SinglyLink[T]) DeleteAt(index int) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    lk.InsertAtTail(4)\n\n    err := lk.DeleteAt(3)\n\n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# DeleteAtHead\n\n删除链表头节点\n\n函数签名:\n\nfunc (link *SinglyLink[T]) DeleteAtHead() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    lk.InsertAtTail(4)\n\n    err := lk.DeleteAtHead()\n    \n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{2, 3, 4}\n}\n\n\n\n# DeleteAtTail\n\n删除链表末尾节点\n\n函数签名:\n\nfunc (link *SinglyLink[T]) DeleteAtTail() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    err := lk.DeleteAtTail()\n    \n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{1, 2}\n}\n\n\n\n# DeleteValue\n\n删除链表中指定的value值\n\n函数签名:\n\nfunc (link *SinglyLink[T]) DeleteValue(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.DeleteValue(2)\n    fmt.Println(lk.Values()) //[]int{1, 3}\n}\n\n\n\n# Reverse\n\n反转链表所有节点顺序\n\n函数签名:\n\nfunc (link *SinglyLink[T]) Reverse()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.Reverse()\n    fmt.Println(lk.Values()) //[]int{3, 2, 1}\n}\n\n\n\n# GetMiddleNode\n\n获取链表中部节点\n\n函数签名:\n\nfunc (link *SinglyLink[T]) GetMiddleNode() *datastructure.LinkNode[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    midNode := lk.GetMiddleNode()\n    fmt.Println(midNode.Value) //2\n}\n\n\n\n# Size\n\n获取链表节点数量\n\n函数签名:\n\nfunc (link *SinglyLink[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Size()) //3\n}\n\n\n\n# IsEmpty\n\n判断链表是否为空\n\n函数签名:\n\nfunc (link *SinglyLink[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n    fmt.Println(lk.IsEmpty()) //true\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.IsEmpty()) //false\n}\n\n\n\n# Clear\n\n清空链表所有节点\n\n函数签名:\n\nfunc (link *SinglyLink[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.Clear()\n\n    fmt.Println(lk.Values()) //\n}\n\n\n\n# Print\n\n打印链表结构\n\n函数签名:\n\nfunc (link *SinglyLink[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    \n    lk.Print() //[ &{Value:1 Pre:<nil> Next:0xc0000a4048}, &{Value:2 Pre:<nil> Next:0xc0000a4060}, &{Value:3 Pre:<nil> Next:<nil>} ]\n}\n\n\n\n# 2. DoublyLink\n\nDoublyLink是双向链表，它的节点有一个值，next指针指向下一个节点，pre指针指向前一个节点。\n\n\n# NewDoublyLink\n\n创建NewDoublyLink指针实例\n\n函数签名:\n\ntype LinkNode[T any] struct {\n\tValue T\n    Pre   *LinkNode[T]\n\tNext  *LinkNode[T]\n}\ntype DoublyLink[T any] struct {\n\tHead   *datastructure.LinkNode[T]\n\tlength int\n}\nfunc NewDoublyLink[T any]() *DoublyLink[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n    fmt.Println(lk)\n}\n\n\n\n# Values\n\n返回链表中所有节点值的切片\n\n函数签名:\n\nfunc (link *DoublyLink[T]) Values() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# InsertAt\n\n将值插入到索引处的链表中，索引应大于或等于 0 且小于或等于链表节点数\n\n函数签名:\n\nfunc (link *DoublyLink[T]) InsertAt(index int, value T) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAt(0, 1)\n    lk.InsertAt(1, 2)\n    lk.InsertAt(2, 3)\n    lk.InsertAt(2, 4)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 4, 3}\n}\n\n\n\n# InsertAtHead\n\n将值插入到链表表头\n\n函数签名:\n\nfunc (link *DoublyLink[T]) InsertAtHead(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtHead(1)\n    lk.InsertAtHead(2)\n    lk.InsertAtHead(3)\n\n    fmt.Println(lk.Values()) //[]int{3, 2, 1}\n}\n\n\n\n# InsertAtTail\n\n将值插入到链表末尾\n\n函数签名:\n\nfunc (link *DoublyLink[T]) InsertAtTail(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# DeleteAt\n\n删除特定索引处的值，索引应大于或等于0且小于或等于链接节点数 - 1\n\n函数签名:\n\nfunc (link *DoublyLink[T]) DeleteAt(index int) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    lk.InsertAtTail(4)\n\n    err := lk.DeleteAt(3)\n\n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# DeleteAtHead\n\n删除链表头节点\n\n函数签名:\n\nfunc (link *DoublyLink[T]) DeleteAtHead() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    lk.InsertAtTail(4)\n\n    err := lk.DeleteAtHead()\n    \n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{2, 3, 4}\n}\n\n\n\n# DeleteAtTail\n\n删除链表末尾节点\n\n函数签名:\n\nfunc (link *DoublyLink[T]) DeleteAtTail() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    err := lk.DeleteAtTail()\n    \n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{1, 2}\n}\n\n\n\n# Reverse\n\n反转链表所有节点顺序\n\n函数签名:\n\nfunc (link *DoublyLink[T]) Reverse()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.Reverse()\n    fmt.Println(lk.Values()) //[]int{3, 2, 1}\n}\n\n\n\n# GetMiddleNode\n\n获取链表中部节点\n\n函数签名:\n\nfunc (link *DoublyLink[T]) GetMiddleNode() *datastructure.LinkNode[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    midNode := lk.GetMiddleNode()\n    fmt.Println(midNode.Value) //2\n}\n\n\n\n# Size\n\n获取链表节点数量\n\n函数签名:\n\nfunc (link *DoublyLink[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Size()) //3\n}\n\n\n\n# IsEmpty\n\n判断链表是否为空\n\n函数签名:\n\nfunc (link *DoublyLink[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n    fmt.Println(lk.IsEmpty()) //true\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.IsEmpty()) //false\n}\n\n\n\n# Clear\n\n清空链表所有节点\n\n函数签名:\n\nfunc (link *DoublyLink[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.Clear()\n\n    fmt.Println(lk.Values()) //\n}\n\n\n\n# Print\n\n打印链表结构\n\n函数签名:\n\nfunc (link *DoublyLink[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    \n    lk.Print() //\n}\n',normalizedContent:'# linklist\n\nlinklist是链表数据结构，它的节点有一个值和一个指向下一个节点的指针。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/link/singlylink.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/link/doublylink.go\n\n\n\n\n# 用法\n\nimport (\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\n\n\n\n\n# 目录\n\n\n# 1. singlylink单链表\n\n * newsinglylink\n * values\n * insertat\n * insertathead\n * insertattail\n * deleteat\n * deleteathead\n * deleteattail\n * deletevalue\n * reverse\n * getmiddlenode\n * size\n * isempty\n * clear\n * print\n\n\n# 2. doublylink双向链表\n\n * newdoublylink\n * values\n * insertat\n * insertathead\n * insertattail\n * deleteat\n * deleteathead\n * deleteattail\n * reverse\n * getmiddlenode\n * size\n * isempty\n * clear\n * print\n\n\n\n\n# 文档\n\n\n# 1. singlylink\n\nsinglelink是单向链表，它的节点有一个值和一个指向链表的下一个节点的指针。\n\n\n# newsinglylink\n\n创建singlylink指针实例\n\n函数签名:\n\ntype linknode[t any] struct {\n\tvalue t\n\tnext  *linknode[t]\n}\ntype singlylink[t any] struct {\n\thead   *datastructure.linknode[t]\n\tlength int\n}\nfunc newsinglylink[t any]() *singlylink[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n    fmt.println(lk)\n}\n\n\n\n# values\n\n返回链表中所有节点值的切片\n\n函数签名:\n\nfunc (link *singlylink[t]) values() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# insertat\n\n将值插入到索引处的链表中，索引应大于或等于 0 且小于或等于链表节点数\n\n函数签名:\n\nfunc (link *singlylink[t]) insertat(index int, value t) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertat(0, 1)\n    lk.insertat(1, 2)\n    lk.insertat(2, 3)\n    lk.insertat(2, 4)\n\n    fmt.println(lk.values()) //[]int{1, 2, 4, 3}\n}\n\n\n\n# insertathead\n\n将值插入到链表表头\n\n函数签名:\n\nfunc (link *singlylink[t]) insertathead(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertathead(1)\n    lk.insertathead(2)\n    lk.insertathead(3)\n\n    fmt.println(lk.values()) //[]int{3, 2, 1}\n}\n\n\n\n# insertattail\n\n将值插入到链表末尾\n\n函数签名:\n\nfunc (link *singlylink[t]) insertattail(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# deleteat\n\n删除特定索引处的值，索引应大于或等于0且小于或等于链接节点数 - 1\n\n函数签名:\n\nfunc (link *singlylink[t]) deleteat(index int) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    lk.insertattail(4)\n\n    err := lk.deleteat(3)\n\n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# deleteathead\n\n删除链表头节点\n\n函数签名:\n\nfunc (link *singlylink[t]) deleteathead() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    lk.insertattail(4)\n\n    err := lk.deleteathead()\n    \n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{2, 3, 4}\n}\n\n\n\n# deleteattail\n\n删除链表末尾节点\n\n函数签名:\n\nfunc (link *singlylink[t]) deleteattail() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    err := lk.deleteattail()\n    \n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{1, 2}\n}\n\n\n\n# deletevalue\n\n删除链表中指定的value值\n\n函数签名:\n\nfunc (link *singlylink[t]) deletevalue(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.deletevalue(2)\n    fmt.println(lk.values()) //[]int{1, 3}\n}\n\n\n\n# reverse\n\n反转链表所有节点顺序\n\n函数签名:\n\nfunc (link *singlylink[t]) reverse()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.reverse()\n    fmt.println(lk.values()) //[]int{3, 2, 1}\n}\n\n\n\n# getmiddlenode\n\n获取链表中部节点\n\n函数签名:\n\nfunc (link *singlylink[t]) getmiddlenode() *datastructure.linknode[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    midnode := lk.getmiddlenode()\n    fmt.println(midnode.value) //2\n}\n\n\n\n# size\n\n获取链表节点数量\n\n函数签名:\n\nfunc (link *singlylink[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.size()) //3\n}\n\n\n\n# isempty\n\n判断链表是否为空\n\n函数签名:\n\nfunc (link *singlylink[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n    fmt.println(lk.isempty()) //true\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.isempty()) //false\n}\n\n\n\n# clear\n\n清空链表所有节点\n\n函数签名:\n\nfunc (link *singlylink[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.clear()\n\n    fmt.println(lk.values()) //\n}\n\n\n\n# print\n\n打印链表结构\n\n函数签名:\n\nfunc (link *singlylink[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    \n    lk.print() //[ &{value:1 pre:<nil> next:0xc0000a4048}, &{value:2 pre:<nil> next:0xc0000a4060}, &{value:3 pre:<nil> next:<nil>} ]\n}\n\n\n\n# 2. doublylink\n\ndoublylink是双向链表，它的节点有一个值，next指针指向下一个节点，pre指针指向前一个节点。\n\n\n# newdoublylink\n\n创建newdoublylink指针实例\n\n函数签名:\n\ntype linknode[t any] struct {\n\tvalue t\n    pre   *linknode[t]\n\tnext  *linknode[t]\n}\ntype doublylink[t any] struct {\n\thead   *datastructure.linknode[t]\n\tlength int\n}\nfunc newdoublylink[t any]() *doublylink[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n    fmt.println(lk)\n}\n\n\n\n# values\n\n返回链表中所有节点值的切片\n\n函数签名:\n\nfunc (link *doublylink[t]) values() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# insertat\n\n将值插入到索引处的链表中，索引应大于或等于 0 且小于或等于链表节点数\n\n函数签名:\n\nfunc (link *doublylink[t]) insertat(index int, value t) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertat(0, 1)\n    lk.insertat(1, 2)\n    lk.insertat(2, 3)\n    lk.insertat(2, 4)\n\n    fmt.println(lk.values()) //[]int{1, 2, 4, 3}\n}\n\n\n\n# insertathead\n\n将值插入到链表表头\n\n函数签名:\n\nfunc (link *doublylink[t]) insertathead(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertathead(1)\n    lk.insertathead(2)\n    lk.insertathead(3)\n\n    fmt.println(lk.values()) //[]int{3, 2, 1}\n}\n\n\n\n# insertattail\n\n将值插入到链表末尾\n\n函数签名:\n\nfunc (link *doublylink[t]) insertattail(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# deleteat\n\n删除特定索引处的值，索引应大于或等于0且小于或等于链接节点数 - 1\n\n函数签名:\n\nfunc (link *doublylink[t]) deleteat(index int) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    lk.insertattail(4)\n\n    err := lk.deleteat(3)\n\n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# deleteathead\n\n删除链表头节点\n\n函数签名:\n\nfunc (link *doublylink[t]) deleteathead() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    lk.insertattail(4)\n\n    err := lk.deleteathead()\n    \n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{2, 3, 4}\n}\n\n\n\n# deleteattail\n\n删除链表末尾节点\n\n函数签名:\n\nfunc (link *doublylink[t]) deleteattail() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    err := lk.deleteattail()\n    \n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{1, 2}\n}\n\n\n\n# reverse\n\n反转链表所有节点顺序\n\n函数签名:\n\nfunc (link *doublylink[t]) reverse()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.reverse()\n    fmt.println(lk.values()) //[]int{3, 2, 1}\n}\n\n\n\n# getmiddlenode\n\n获取链表中部节点\n\n函数签名:\n\nfunc (link *doublylink[t]) getmiddlenode() *datastructure.linknode[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    midnode := lk.getmiddlenode()\n    fmt.println(midnode.value) //2\n}\n\n\n\n# size\n\n获取链表节点数量\n\n函数签名:\n\nfunc (link *doublylink[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.size()) //3\n}\n\n\n\n# isempty\n\n判断链表是否为空\n\n函数签名:\n\nfunc (link *doublylink[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n    fmt.println(lk.isempty()) //true\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.isempty()) //false\n}\n\n\n\n# clear\n\n清空链表所有节点\n\n函数签名:\n\nfunc (link *doublylink[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.clear()\n\n    fmt.println(lk.values()) //\n}\n\n\n\n# print\n\n打印链表结构\n\n函数签名:\n\nfunc (link *doublylink[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    \n    lk.print() //\n}\n',charsets:{cjk:!0}},{title:"HashMap",frontmatter:{},regularPath:"/datastructure/hashmap.html",relativePath:"datastructure/hashmap.md",key:"v-14aef820",path:"/datastructure/hashmap.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:60},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:155},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:246},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:335},{level:3,title:"",slug:"newhashmap",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"newhashmap-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"get",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"put",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"delete",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contains",normalizedTitle:"",charIndex:0}],lastUpdated:"2022/10/22 下午1:42:08",lastUpdatedTimestamp:1666417328e3,headersStr:"Source Usage Index Documentation      ",content:'# HashMap\n\nHashMap is a key value map data structure.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/hashmap/hashmap.go\n\n\n\n\n# Usage\n\nimport (\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\n\n\n\n\n# Index\n\n * NewHashMap\n * NewHashMapWithCapacity\n * Get\n * Put\n * Delete\n * Contains\n\n\n\n\n# Documentation\n\n\n# NewHashMap\n\nMake a HashMap instance with default capacity is 1 << 10.\n\nSignature:\n\nfunc NewHashMap() *HashMap\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    fmt.Println(hm)\n}\n\n\n\n# NewHashMap\n\nMake a HashMap instance with given size and capacity.\n\nSignature:\n\nfunc NewHashMapWithCapacity(size, capacity uint64) *HashMap\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMapWithCapacity(uint64(100), uint64(1000))\n    fmt.Println(hm)\n}\n\n\n\n# Get\n\nGet the value of given key in hashmap\n\nSignature:\n\nfunc (hm *HashMap) Get(key any) any\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    val := hm.Get("a")\n\n    fmt.Println(val) //nil\n}\n\n\n\n# Put\n\nPut new key value in hashmap, then return value\n\nSignature:\n\nfunc (hm *HashMap) Put(key any, value any) any\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    hm.Put("a", 1)\n\n    val := hm.Get("a")\n    fmt.Println(val) //1\n}\n\n\n\n# Delete\n\nDelete key-value item by given key in hashmap.\n\nSignature:\n\nfunc (hm *HashMap) Delete(key any)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    hm.Put("a", 1)\n    val := hm.Get("a")\n    fmt.Println(val) //1\n\n    hm.Delete("a")\n    val = hm.Get("a")\n    fmt.Println(val) //nil\n}\n\n\n\n# Contains\n\nChecks if given key is in hashmap or not.\n\nSignature:\n\nfunc (hm *HashMap) Contains(key any) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    hm.Put("a", 1)\n\n    fmt.Println(hm.Contains("a")) //true\n    fmt.Println(hm.Contains("b")) //false\n}\n',normalizedContent:'# hashmap\n\nhashmap is a key value map data structure.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/hashmap/hashmap.go\n\n\n\n\n# usage\n\nimport (\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\n\n\n\n\n# index\n\n * newhashmap\n * newhashmapwithcapacity\n * get\n * put\n * delete\n * contains\n\n\n\n\n# documentation\n\n\n# newhashmap\n\nmake a hashmap instance with default capacity is 1 << 10.\n\nsignature:\n\nfunc newhashmap() *hashmap\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    fmt.println(hm)\n}\n\n\n\n# newhashmap\n\nmake a hashmap instance with given size and capacity.\n\nsignature:\n\nfunc newhashmapwithcapacity(size, capacity uint64) *hashmap\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmapwithcapacity(uint64(100), uint64(1000))\n    fmt.println(hm)\n}\n\n\n\n# get\n\nget the value of given key in hashmap\n\nsignature:\n\nfunc (hm *hashmap) get(key any) any\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    val := hm.get("a")\n\n    fmt.println(val) //nil\n}\n\n\n\n# put\n\nput new key value in hashmap, then return value\n\nsignature:\n\nfunc (hm *hashmap) put(key any, value any) any\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    hm.put("a", 1)\n\n    val := hm.get("a")\n    fmt.println(val) //1\n}\n\n\n\n# delete\n\ndelete key-value item by given key in hashmap.\n\nsignature:\n\nfunc (hm *hashmap) delete(key any)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    hm.put("a", 1)\n    val := hm.get("a")\n    fmt.println(val) //1\n\n    hm.delete("a")\n    val = hm.get("a")\n    fmt.println(val) //nil\n}\n\n\n\n# contains\n\nchecks if given key is in hashmap or not.\n\nsignature:\n\nfunc (hm *hashmap) contains(key any) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    hm.put("a", 1)\n\n    fmt.println(hm.contains("a")) //true\n    fmt.println(hm.contains("b")) //false\n}\n',charsets:{}},{title:"Heap",frontmatter:{},regularPath:"/datastructure/heap.html",relativePath:"datastructure/heap.md",key:"v-7db894a8",path:"/datastructure/heap.html",headers:[{level:2,title:"源码",slug:"源码",normalizedTitle:"源码",charIndex:30},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:118},{level:2,title:"API 文档",slug:"api-文档",normalizedTitle:"api 文档",charIndex:200},{level:3,title:"1. MaxHeap",slug:"_1-maxheap",normalizedTitle:"1. maxheap",charIndex:211},{level:3,title:"",slug:"newmaxheap",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"push",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"pop",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"peek",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"printstructure",normalizedTitle:"",charIndex:0}],lastUpdated:"2022/10/22 下午1:42:08",lastUpdatedTimestamp:1666417328e3,headersStr:"源码 用法 API 文档 1. MaxHeap       ",content:'# Heap\n\n堆，切片实现的二叉堆数据结构。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/heap/maxheap.go\n\n\n\n\n# 用法\n\nimport (\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\n\n\n\n\n# API 文档\n\n\n# 1. MaxHeap\n\nMaxHeap 是通过 slice 实现的二叉堆树，根节点的 key 既大于等于左子树的 key 值且大于等于右子树的 key 值。\n\n\n# NewMaxHeap\n\n返回NewMaxHeap指针实例\n\n函数签名:\n\ntype MaxHeap[T any] struct {\n\tdata       []T\n\tcomparator lancetconstraints.Comparator\n}\nfunc NewMaxHeap[T any](comparator lancetconstraints.Comparator) *MaxHeap[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    fmt.Println(maxHeap)\n}\n\n\n\n# Push\n\n向堆中插入数据\n\n函数签名:\n\nfunc (h *MaxHeap[T]) Push(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n\n    fmt.Println(maxHeap.Data()) //[]int{12, 9, 11, 4, 8, 10, 7, 1, 3, 5, 6, 2}\n}\n\n\n\n# Pop\n\n返回堆中最大值并将其从堆中删除，如果堆为空，返回零值并返回false\n\n函数签名:\n\nfunc (h *MaxHeap[T]) Pop() (T, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n    val, ok := maxHeap.Pop()\n\n    fmt.Println(val) //12\n    fmt.Println(ok) //true\n}\n\n\n\n# Peek\n\n返回堆中最大值，如果堆为空，返回零值并返回false\n\n函数签名:\n\nfunc (h *MaxHeap[T]) Peek() (T, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n    val, ok := maxHeap.Peek()\n\n    fmt.Println(val) //12\n    fmt.Println(maxHeap.Size()) //12\n}\n\n\n\n# Data\n\n返回堆中全部元素的切片\n\n函数签名:\n\nfunc (h *MaxHeap[T]) Data() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n\n    fmt.Println(maxHeap.Data()) //[]int{12, 9, 11, 4, 8, 10, 7, 1, 3, 5, 6, 2}\n}\n\n\n\n# Size\n\n返回堆中元素的数量\n\n函数签名:\n\nfunc (h *MaxHeap[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n\n    fmt.Println(maxHeap.Size()) //3\n}\n\n\n\n# PrintStructure\n\n打印堆的树形结构\n\n函数签名:\n\nfunc (h *MaxHeap[T]) PrintStructure()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n\n    fmt.Println(maxHeap.PrintStructure())\n//        12\n//    9       11\n//  4   8   10   7\n// 1 3 5 6 2\n}\n',normalizedContent:'# heap\n\n堆，切片实现的二叉堆数据结构。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/heap/maxheap.go\n\n\n\n\n# 用法\n\nimport (\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\n\n\n\n\n# api 文档\n\n\n# 1. maxheap\n\nmaxheap 是通过 slice 实现的二叉堆树，根节点的 key 既大于等于左子树的 key 值且大于等于右子树的 key 值。\n\n\n# newmaxheap\n\n返回newmaxheap指针实例\n\n函数签名:\n\ntype maxheap[t any] struct {\n\tdata       []t\n\tcomparator lancetconstraints.comparator\n}\nfunc newmaxheap[t any](comparator lancetconstraints.comparator) *maxheap[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    fmt.println(maxheap)\n}\n\n\n\n# push\n\n向堆中插入数据\n\n函数签名:\n\nfunc (h *maxheap[t]) push(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n\n    fmt.println(maxheap.data()) //[]int{12, 9, 11, 4, 8, 10, 7, 1, 3, 5, 6, 2}\n}\n\n\n\n# pop\n\n返回堆中最大值并将其从堆中删除，如果堆为空，返回零值并返回false\n\n函数签名:\n\nfunc (h *maxheap[t]) pop() (t, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n    val, ok := maxheap.pop()\n\n    fmt.println(val) //12\n    fmt.println(ok) //true\n}\n\n\n\n# peek\n\n返回堆中最大值，如果堆为空，返回零值并返回false\n\n函数签名:\n\nfunc (h *maxheap[t]) peek() (t, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n    val, ok := maxheap.peek()\n\n    fmt.println(val) //12\n    fmt.println(maxheap.size()) //12\n}\n\n\n\n# data\n\n返回堆中全部元素的切片\n\n函数签名:\n\nfunc (h *maxheap[t]) data() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n\n    fmt.println(maxheap.data()) //[]int{12, 9, 11, 4, 8, 10, 7, 1, 3, 5, 6, 2}\n}\n\n\n\n# size\n\n返回堆中元素的数量\n\n函数签名:\n\nfunc (h *maxheap[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n\n    fmt.println(maxheap.size()) //3\n}\n\n\n\n# printstructure\n\n打印堆的树形结构\n\n函数签名:\n\nfunc (h *maxheap[t]) printstructure()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n\n    fmt.println(maxheap.printstructure())\n//        12\n//    9       11\n//  4   8   10   7\n// 1 3 5 6 2\n}\n',charsets:{cjk:!0}},{title:"Stack",frontmatter:{},regularPath:"/datastructure/stack.html",relativePath:"datastructure/stack.md",key:"v-af9dc740",path:"/datastructure/stack.html",headers:[{level:2,title:"源码",slug:"源码",normalizedTitle:"源码",charIndex:57},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:232},{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:316},{level:3,title:"1. ArrayStack（数组栈）",slug:"_1-arraystack-数组栈",normalizedTitle:"1. arraystack（数组栈）",charIndex:323},{level:3,title:"2. LinkedStack（链表栈）",slug:"_2-linkedstack-链表栈",normalizedTitle:"2. linkedstack（链表栈）",charIndex:423},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:536},{level:3,title:"1. ArrayStack",slug:"_1-arraystack",normalizedTitle:"1. arraystack",charIndex:323},{level:3,title:"",slug:"newarraystack",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"push",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"pop",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"peak",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear",normalizedTitle:"",charIndex:0},{level:3,title:"2. LinkedStack",slug:"_2-linkedstack",normalizedTitle:"2. linkedstack",charIndex:423},{level:3,title:"",slug:"newlinkedstack",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"push-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"pop-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"peak-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"print",normalizedTitle:"",charIndex:0}],lastUpdated:"2022/10/22 上午11:35:23",lastUpdatedTimestamp:1666409723e3,headersStr:"源码 用法 目录 1. ArrayStack（数组栈） 2. LinkedStack（链表栈） 文档 1. ArrayStack         2. LinkedStack         ",content:'# Stack\n\n栈数据结构，包括ArrayStack（数组栈）和LinkedStack（链表栈）。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/stack/arraystack.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/stack/linkedstack.go\n\n\n\n\n# 用法\n\nimport (\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\n\n\n\n\n# 目录\n\n\n# 1. ArrayStack（数组栈）\n\n * NewArrayStack\n * Push\n * Pop\n * Peak\n * Data\n * Size\n * IsEmpty\n * Clear\n\n\n# 2. LinkedStack（链表栈）\n\n * NewLinkedStack\n * Push\n * Pop\n * Peak\n * Data\n * Size\n * IsEmpty\n * Clear\n * Print\n\n\n\n\n# 文档\n\n\n# 1. ArrayStack\n\n用切片实现栈结构\n\n\n# NewArrayStack\n\n返回ArrayStack指针实例\n\n函数签名:\n\ntype ArrayStack[T any] struct {\n\tdata   []T\n\tlength int\n}\nfunc NewArrayStack[T any]() *ArrayStack[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    fmt.Println(sk)\n}\n\n\n\n# Push\n\n将元素加入数组栈\n\n函数签名:\n\nfunc (s *ArrayStack[T]) Push(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Pop\n\n删除栈顶元素并返回该元素指针\n\n函数签名:\n\nfunc (s *ArrayStack[T]) Pop() (*T, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    val, err := sk.Pop()\n    fmt.Println(err) //nil\n    fmt.Println(*val) //3\n\n    fmt.Println(sk.Data()) //[]int{2, 1}\n}\n\n\n\n# Peak\n\n返回栈顶元素指针\n\n函数签名:\n\nfunc (s *ArrayStack[T]) Peak() (*T, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    val, err := sk.Peak()\n    fmt.Println(err) //nil\n    fmt.Println(*val) //3\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Data\n\n返回栈中所有元素组成的切片\n\n函数签名:\n\nfunc (s *ArrayStack[T]) Data() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Size\n\n返回栈中元素的数量\n\n函数签名:\n\nfunc (s *ArrayStack[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Size()) //3\n}\n\n\n\n# IsEmpty\n\n判断栈是否为空\n\n函数签名:\n\nfunc (s *ArrayStack[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    fmt.Println(sk.IsEmpty()) //true\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.IsEmpty()) //false\n}\n\n\n\n# Clear\n\n清空栈元素，使栈为空\n\n函数签名:\n\nfunc (s *ArrayStack[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    sk.Clear()\n\n    fmt.Println(sk.Data()) //[]int{}\n}\n\n\n\n# 2. LinkedStack\n\n链表实现的栈结构。\n\n\n# NewLinkedStack\n\n返回LinkedStack指针实例\n\n函数签名:\n\ntype StackNode[T any] struct {\n\tValue T\n\tNext  *StackNode[T]\n}\ntype LinkedStack[T any] struct {\n\ttop    *datastructure.StackNode[T]\n\tlength int\n}\nfunc NewLinkedStack[T any]() *LinkedStack[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    fmt.Println(sk)\n}\n\n\n\n# Push\n\n将元素加入链表栈\n\n函数签名:\n\nfunc (s *LinkedStack[T]) Push(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Pop\n\n删除栈顶元素并返回该元素指针\n\n函数签名:\n\nfunc (s *LinkedStack[T]) Pop() (*T, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    val, err := sk.Pop()\n    fmt.Println(err) //nil\n    fmt.Println(*val) //3\n\n    fmt.Println(sk.Data()) //[]int{2, 1}\n}\n\n\n\n# Peak\n\n返回栈顶元素指针\n\n函数签名:\n\nfunc (s *LinkedStack[T]) Peak() (*T, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    val, err := sk.Peak()\n    fmt.Println(err) //nil\n    fmt.Println(*val) //3\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Data\n\n返回栈中所有元素组成的切片\n\n函数签名:\n\nfunc (s *LinkedStack[T]) Data() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Size\n\n返回栈中元素的数量\n\n函数签名:\n\nfunc (s *LinkedStack[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Size()) //3\n}\n\n\n\n# IsEmpty\n\n判断栈是否为空\n\n函数签名:\n\nfunc (s *LinkedStack[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    fmt.Println(sk.IsEmpty()) //true\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.IsEmpty()) //false\n}\n\n\n\n# Clear\n\n清空栈元素，使栈为空\n\n函数签名:\n\nfunc (s *LinkedStack[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    sk.Clear()\n\n    fmt.Println(sk.Data()) //[]int{}\n}\n\n\n\n# Print\n\n打印链表栈结构\n\n函数签名:\n\nfunc (s *LinkedStack[T]) Print()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n\n    sk.Print() //[ &{Value:3 Next:0xc000010260}, &{Value:2 Next:0xc000010250}, &{Value:1 Next:<nil>},  ]\n}\n',normalizedContent:'# stack\n\n栈数据结构，包括arraystack（数组栈）和linkedstack（链表栈）。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/stack/arraystack.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/stack/linkedstack.go\n\n\n\n\n# 用法\n\nimport (\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\n\n\n\n\n# 目录\n\n\n# 1. arraystack（数组栈）\n\n * newarraystack\n * push\n * pop\n * peak\n * data\n * size\n * isempty\n * clear\n\n\n# 2. linkedstack（链表栈）\n\n * newlinkedstack\n * push\n * pop\n * peak\n * data\n * size\n * isempty\n * clear\n * print\n\n\n\n\n# 文档\n\n\n# 1. arraystack\n\n用切片实现栈结构\n\n\n# newarraystack\n\n返回arraystack指针实例\n\n函数签名:\n\ntype arraystack[t any] struct {\n\tdata   []t\n\tlength int\n}\nfunc newarraystack[t any]() *arraystack[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    fmt.println(sk)\n}\n\n\n\n# push\n\n将元素加入数组栈\n\n函数签名:\n\nfunc (s *arraystack[t]) push(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# pop\n\n删除栈顶元素并返回该元素指针\n\n函数签名:\n\nfunc (s *arraystack[t]) pop() (*t, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    val, err := sk.pop()\n    fmt.println(err) //nil\n    fmt.println(*val) //3\n\n    fmt.println(sk.data()) //[]int{2, 1}\n}\n\n\n\n# peak\n\n返回栈顶元素指针\n\n函数签名:\n\nfunc (s *arraystack[t]) peak() (*t, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    val, err := sk.peak()\n    fmt.println(err) //nil\n    fmt.println(*val) //3\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# data\n\n返回栈中所有元素组成的切片\n\n函数签名:\n\nfunc (s *arraystack[t]) data() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# size\n\n返回栈中元素的数量\n\n函数签名:\n\nfunc (s *arraystack[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.size()) //3\n}\n\n\n\n# isempty\n\n判断栈是否为空\n\n函数签名:\n\nfunc (s *arraystack[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    fmt.println(sk.isempty()) //true\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.isempty()) //false\n}\n\n\n\n# clear\n\n清空栈元素，使栈为空\n\n函数签名:\n\nfunc (s *arraystack[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    sk.clear()\n\n    fmt.println(sk.data()) //[]int{}\n}\n\n\n\n# 2. linkedstack\n\n链表实现的栈结构。\n\n\n# newlinkedstack\n\n返回linkedstack指针实例\n\n函数签名:\n\ntype stacknode[t any] struct {\n\tvalue t\n\tnext  *stacknode[t]\n}\ntype linkedstack[t any] struct {\n\ttop    *datastructure.stacknode[t]\n\tlength int\n}\nfunc newlinkedstack[t any]() *linkedstack[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    fmt.println(sk)\n}\n\n\n\n# push\n\n将元素加入链表栈\n\n函数签名:\n\nfunc (s *linkedstack[t]) push(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# pop\n\n删除栈顶元素并返回该元素指针\n\n函数签名:\n\nfunc (s *linkedstack[t]) pop() (*t, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    val, err := sk.pop()\n    fmt.println(err) //nil\n    fmt.println(*val) //3\n\n    fmt.println(sk.data()) //[]int{2, 1}\n}\n\n\n\n# peak\n\n返回栈顶元素指针\n\n函数签名:\n\nfunc (s *linkedstack[t]) peak() (*t, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    val, err := sk.peak()\n    fmt.println(err) //nil\n    fmt.println(*val) //3\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# data\n\n返回栈中所有元素组成的切片\n\n函数签名:\n\nfunc (s *linkedstack[t]) data() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# size\n\n返回栈中元素的数量\n\n函数签名:\n\nfunc (s *linkedstack[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.size()) //3\n}\n\n\n\n# isempty\n\n判断栈是否为空\n\n函数签名:\n\nfunc (s *linkedstack[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    fmt.println(sk.isempty()) //true\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.isempty()) //false\n}\n\n\n\n# clear\n\n清空栈元素，使栈为空\n\n函数签名:\n\nfunc (s *linkedstack[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    sk.clear()\n\n    fmt.println(sk.data()) //[]int{}\n}\n\n\n\n# print\n\n打印链表栈结构\n\n函数签名:\n\nfunc (s *linkedstack[t]) print()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n\n    sk.print() //[ &{value:3 next:0xc000010260}, &{value:2 next:0xc000010250}, &{value:1 next:<nil>},  ]\n}\n',charsets:{cjk:!0}},{title:"Set",frontmatter:{},regularPath:"/datastructure/set.html",relativePath:"datastructure/set.md",key:"v-eafafcc0",path:"/datastructure/set.html",headers:[{level:2,title:"源码",slug:"源码",normalizedTitle:"源码",charIndex:39},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:122},{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:202},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:393},{level:3,title:"",slug:"newset",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"values",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"add",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"delete",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"containall",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clone",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"equal",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"iterate",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"union",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"intersection",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"symmetricdifference",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"minus",normalizedTitle:"",charIndex:0}],lastUpdated:"2022/10/22 上午11:35:23",lastUpdatedTimestamp:1666409723e3,headersStr:"源码 用法 目录 文档               ",content:'# Set\n\nSet集合数据结构，类似列表。Set中元素不重复。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/set/set.go\n\n\n\n\n# 用法\n\nimport (\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\n\n\n\n\n# 目录\n\n * NewSet\n\n * Values\n\n * Add\n\n * Delete\n\n * Contain\n\n * ContainAll\n\n * Clone\n\n * Size\n\n * Equal\n\n * Iterate\n\n * IsEmpty\n\n * Union\n\n * Intersection\n\n * SymmetricDifference\n\n * Minus\n\n\n\n\n# 文档\n\n\n# NewSet\n\n返回Set结构体对象\n\n函数签名:\n\ntype Set[T comparable] map[T]bool\nfunc NewSet[T comparable](values ...T) Set[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int](1,2,2,3)\n    fmt.Println(st.Values()) //1,2,3\n}\n\n\n\n# Values\n\n获取集合中所有元素的切片\n\n函数签名:\n\nfunc (s Set[T]) Values() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int](1,2,2,3)\n    fmt.Println(st.Values()) //1,2,3\n}\n\n\n\n# Add\n\n向集合中添加元素\n\n函数签名:\n\nfunc (s Set[T]) Add(values ...T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int]()\n    st.Add(1, 2, 3)\n\n    fmt.Println(st.Values()) //1,2,3\n}\n\n\n\n# Delete\n\n删除集合中元素\n\n函数签名:\n\nfunc (s Set[T]) Delete(values ...T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int]()\n    st.Add(1, 2, 3)\n\n    set.Delete(3)\n    fmt.Println(st.Values()) //1,2\n}\n\n\n\n# Contain\n\n判断集合是否包含某个值\n\n函数签名:\n\nfunc (s Set[T]) Contain(value T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int]()\n    st.Add(1, 2, 3)\n\n    fmt.Println(st.Contain(1)) //true\n    fmt.Println(st.Contain(4)) //false\n}\n\n\n\n# ContainAll\n\n判断集合是否包含另一个集合\n\n函数签名:\n\nfunc (s Set[T]) ContainAll(other Set[T]) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n\tset2 := set.NewSet(1, 2)\n\tset3 := set.NewSet(1, 2, 3, 4)\n\n    fmt.Println(set1.ContainAll(set2)) //true\n    fmt.Println(set1.ContainAll(set3)) //false\n}\n\n\n\n# Size\n\n获取集合中元素的个数\n\n函数签名:\n\nfunc (s Set[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n\n    fmt.Println(set1.Size()) //3\n}\n\n\n\n# Clone\n\n克隆一个集合\n\n函数签名:\n\nfunc (s Set[T]) Clone() Set[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set1.Clone()\n\n    fmt.Println(set1.Size() == set2.Size()) //true\n    fmt.Println(set1.ContainAll(set2)) //true\n}\n\n\n\n# Equal\n\n比较两个集合是否相等，包含相同元素为相等\n\n函数签名:\n\nfunc (s Set[T]) Equal(other Set[T]) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set.NewSet(1, 2, 3)\n    set3 := set.NewSet(1, 2, 3, 4)\n\n    fmt.Println(set1.Equal(set2)) //true\n    fmt.Println(set1.Equal(set3)) //false\n}\n\n\n\n# Iterate\n\n迭代结合，在每个元素上调用函数\n\n函数签名:\n\nfunc (s Set[T]) Iterate(fn func(value T))\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    arr := []int{}\n    set.Iterate(func(value int) {\n        arr = append(arr, value)\n    })\n\n    fmt.Println(arr) //1,2,3\n}\n\n\n\n# IsEmpty\n\n判断集合是否为空\n\n函数签名:\n\nfunc (s Set[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set.NewSet()\n\n    fmt.Println(set1.IsEmpty()) //false\n    fmt.Println(set2.IsEmpty()) //true\n}\n\n\n\n# Union\n\n求两个集合的并集\n\n函数签名:\n\nfunc (s Set[T]) Union(other Set[T]) Set[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set.NewSet(2, 3, 4, 5)\n    set3 := set1.Union(set2)\n\n    fmt.Println(set3.Values()) //1,2,3,4,5\n}\n\n\n\n# Intersection\n\n求两个集合的交集\n\n函数签名:\n\nfunc (s Set[T]) Intersection(other Set[T]) Set[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set.NewSet(2, 3, 4, 5)\n    set3 := set1.Intersection(set2)\n\n    fmt.Println(set3.Values()) //2,3\n}\n\n\n\n# SymmetricDifference\n\n返回一个集合，其中元素在第一个集合或第二个集合中，且不同时存在于两个集合中\n\n函数签名:\n\nfunc (s Set[T]) SymmetricDifference(other Set[T]) Set[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n\tset2 := set.NewSet(2, 3, 4, 5)\n\tset3 := set1.SymmetricDifference(set2)\n\n    fmt.Println(set3.Values()) //1,4,5\n}\n\n\n\n# Minus\n\n创建一个集合，其元素在原始集中但不在比较集中\n\n函数签名:\n\nfunc (s Set[T]) Minus(comparedSet Set[T]) Set[T]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n\tset2 := set.NewSet(2, 3, 4, 5)\n\tset3 := set.NewSet(2, 3)\n\n    res1 := set1.Minus(set2)\n    fmt.Println(res1.Values()) //1\n\n    res2 := set2.Minus(set3)\n    fmt.Println(res2.Values()) //4,5\n}\n',normalizedContent:'# set\n\nset集合数据结构，类似列表。set中元素不重复。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/set/set.go\n\n\n\n\n# 用法\n\nimport (\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\n\n\n\n\n# 目录\n\n * newset\n\n * values\n\n * add\n\n * delete\n\n * contain\n\n * containall\n\n * clone\n\n * size\n\n * equal\n\n * iterate\n\n * isempty\n\n * union\n\n * intersection\n\n * symmetricdifference\n\n * minus\n\n\n\n\n# 文档\n\n\n# newset\n\n返回set结构体对象\n\n函数签名:\n\ntype set[t comparable] map[t]bool\nfunc newset[t comparable](values ...t) set[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int](1,2,2,3)\n    fmt.println(st.values()) //1,2,3\n}\n\n\n\n# values\n\n获取集合中所有元素的切片\n\n函数签名:\n\nfunc (s set[t]) values() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int](1,2,2,3)\n    fmt.println(st.values()) //1,2,3\n}\n\n\n\n# add\n\n向集合中添加元素\n\n函数签名:\n\nfunc (s set[t]) add(values ...t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int]()\n    st.add(1, 2, 3)\n\n    fmt.println(st.values()) //1,2,3\n}\n\n\n\n# delete\n\n删除集合中元素\n\n函数签名:\n\nfunc (s set[t]) delete(values ...t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int]()\n    st.add(1, 2, 3)\n\n    set.delete(3)\n    fmt.println(st.values()) //1,2\n}\n\n\n\n# contain\n\n判断集合是否包含某个值\n\n函数签名:\n\nfunc (s set[t]) contain(value t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int]()\n    st.add(1, 2, 3)\n\n    fmt.println(st.contain(1)) //true\n    fmt.println(st.contain(4)) //false\n}\n\n\n\n# containall\n\n判断集合是否包含另一个集合\n\n函数签名:\n\nfunc (s set[t]) containall(other set[t]) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n\tset2 := set.newset(1, 2)\n\tset3 := set.newset(1, 2, 3, 4)\n\n    fmt.println(set1.containall(set2)) //true\n    fmt.println(set1.containall(set3)) //false\n}\n\n\n\n# size\n\n获取集合中元素的个数\n\n函数签名:\n\nfunc (s set[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n\n    fmt.println(set1.size()) //3\n}\n\n\n\n# clone\n\n克隆一个集合\n\n函数签名:\n\nfunc (s set[t]) clone() set[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set1.clone()\n\n    fmt.println(set1.size() == set2.size()) //true\n    fmt.println(set1.containall(set2)) //true\n}\n\n\n\n# equal\n\n比较两个集合是否相等，包含相同元素为相等\n\n函数签名:\n\nfunc (s set[t]) equal(other set[t]) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set.newset(1, 2, 3)\n    set3 := set.newset(1, 2, 3, 4)\n\n    fmt.println(set1.equal(set2)) //true\n    fmt.println(set1.equal(set3)) //false\n}\n\n\n\n# iterate\n\n迭代结合，在每个元素上调用函数\n\n函数签名:\n\nfunc (s set[t]) iterate(fn func(value t))\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    arr := []int{}\n    set.iterate(func(value int) {\n        arr = append(arr, value)\n    })\n\n    fmt.println(arr) //1,2,3\n}\n\n\n\n# isempty\n\n判断集合是否为空\n\n函数签名:\n\nfunc (s set[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set.newset()\n\n    fmt.println(set1.isempty()) //false\n    fmt.println(set2.isempty()) //true\n}\n\n\n\n# union\n\n求两个集合的并集\n\n函数签名:\n\nfunc (s set[t]) union(other set[t]) set[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set.newset(2, 3, 4, 5)\n    set3 := set1.union(set2)\n\n    fmt.println(set3.values()) //1,2,3,4,5\n}\n\n\n\n# intersection\n\n求两个集合的交集\n\n函数签名:\n\nfunc (s set[t]) intersection(other set[t]) set[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set.newset(2, 3, 4, 5)\n    set3 := set1.intersection(set2)\n\n    fmt.println(set3.values()) //2,3\n}\n\n\n\n# symmetricdifference\n\n返回一个集合，其中元素在第一个集合或第二个集合中，且不同时存在于两个集合中\n\n函数签名:\n\nfunc (s set[t]) symmetricdifference(other set[t]) set[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n\tset2 := set.newset(2, 3, 4, 5)\n\tset3 := set1.symmetricdifference(set2)\n\n    fmt.println(set3.values()) //1,4,5\n}\n\n\n\n# minus\n\n创建一个集合，其元素在原始集中但不在比较集中\n\n函数签名:\n\nfunc (s set[t]) minus(comparedset set[t]) set[t]\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n\tset2 := set.newset(2, 3, 4, 5)\n\tset3 := set.newset(2, 3)\n\n    res1 := set1.minus(set2)\n    fmt.println(res1.values()) //1\n\n    res2 := set2.minus(set3)\n    fmt.println(res2.values()) //4,5\n}\n',charsets:{cjk:!0}},{title:"Queue",frontmatter:{},regularPath:"/datastructure/queue.html",relativePath:"datastructure/queue.md",key:"v-d479db00",path:"/datastructure/queue.html",headers:[{level:2,title:"源码",slug:"源码",normalizedTitle:"源码",charIndex:83},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:428},{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:512},{level:3,title:"1. ArrayQueue",slug:"_1-arrayqueue",normalizedTitle:"1. arrayqueue",charIndex:519},{level:3,title:"2. LinkedQueue",slug:"_2-linkedqueue",normalizedTitle:"2. linkedqueue",charIndex:651},{level:3,title:"3. CircularQueue",slug:"_3-circularqueue",normalizedTitle:"3. circularqueue",charIndex:775},{level:3,title:"4. PriorityQueue",slug:"_4-priorityqueue",normalizedTitle:"4. priorityqueue",charIndex:913},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:1016},{level:3,title:"1. ArrayQueue",slug:"_1-arrayqueue-2",normalizedTitle:"1. arrayqueue",charIndex:519},{level:3,title:"",slug:"newarrayqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"enqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"dequeue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"front",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"back",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isfull",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain",normalizedTitle:"",charIndex:0},{level:3,title:"2. LinkedQueue",slug:"_2-linkedqueue-2",normalizedTitle:"2. linkedqueue",charIndex:651},{level:3,title:"",slug:"newlinkedqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"enqueue-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"dequeue-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"front-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"back-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain-2",normalizedTitle:"",charIndex:0},{level:3,title:"3. CircularQueue",slug:"_3-circularqueue-2",normalizedTitle:"3. circularqueue",charIndex:775},{level:3,title:"",slug:"newcircularqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"enqueue-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"dequeue-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"front-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"back-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isfull-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain-3",normalizedTitle:"",charIndex:0},{level:3,title:"4. PriorityQueue",slug:"_4-priorityqueue-2",normalizedTitle:"4. priorityqueue",charIndex:913},{level:3,title:"",slug:"newpriorityqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data-4",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"enqueue-4",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"dequeue-4",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-4",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isfull-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-4",normalizedTitle:"",charIndex:0}],lastUpdated:"2022/10/22 上午11:35:23",lastUpdatedTimestamp:1666409723e3,headersStr:"源码 用法 目录 1. ArrayQueue 2. LinkedQueue 3. CircularQueue 4. PriorityQueue 文档 1. ArrayQueue            2. LinkedQueue           3. CircularQueue            4. PriorityQueue       ",content:'# Queue\n\n队列数据结构，包括ArrayQueue, LinkedQueue, CircularQueue, and PriorityQueue。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/arrayqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/linkedqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/circularqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/priorityqueue.go\n\n\n\n\n# 用法\n\nimport (\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\n\n\n\n\n# 目录\n\n\n# 1. ArrayQueue\n\n * NewArrayQueue\n * Data\n * Enqueue\n * Dequeue\n * Front\n * Back\n * Size\n * IsEmpty\n * IsFull\n * Clear\n * Contain\n\n\n# 2. LinkedQueue\n\n * NewLinkedQueue\n * Data\n * Enqueue\n * Dequeue\n * Front\n * Back\n * Size\n * IsEmpty\n * Clear\n * Contain\n\n\n# 3. CircularQueue\n\n * NewCircularQueue\n * Data\n * Enqueue\n * Dequeue\n * Front\n * Back\n * Size\n * IsEmpty\n * IsFull\n * Clear\n * Contain\n\n\n# 4. PriorityQueue\n\n * NewPriorityQueue\n * Data\n * Enqueue\n * Dequeue\n * IsEmpty\n * IsFull\n * Size\n\n\n\n\n# 文档\n\n\n# 1. ArrayQueue\n\n切片实现普通队列数据结构\n\n\n# NewArrayQueue\n\n返回具有特定容量的ArrayQueue指针\n\n函数签名:\n\nfunc NewArrayQueue[T any](capacity int) *ArrayQueue[T]\n\ntype ArrayQueue[T any] struct {\n\titems    []T\n\thead     int\n\ttail     int\n\tcapacity int\n\tsize     int\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Data\n\n获取队列所有元素的切片\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) Data() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Enqueue\n\n元素入队列\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) Enqueue(item T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Dequeue\n\n移除队列的头元素并返回\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) Dequeue() (T, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Dequeue()) // 1\n    fmt.Println(q.Data()) // 2,3\n}\n\n\n\n# Front\n\n获取对列头部元素\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) Front() T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Front()) // 1\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Back\n\n获取对列尾部元素\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) Back() T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Back()) // 3\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Size\n\n获取队列元素的数量\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Size()) // 3\n}\n\n\n\n# IsEmpty\n\n判断对了是否为空\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    fmt.Println(q.IsEmpty()) // true\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsEmpty()) // false\n}\n\n\n\n# IsFull\n\n判断对了是否为满\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) IsFull() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](3)\n    fmt.Println(q.IsFull()) // false\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsFull()) // true\n}\n\n\n\n# Clear\n\n清空队列元素\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n    q.Clear()\n\n    fmt.Println(q.IsEmpty()) // true\n}\n\n\n\n# Contain\n\n判断队列是否包含某个值\n\n函数签名:\n\nfunc (q *ArrayQueue[T]) Contain(value T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Contain(1)) // true\n    fmt.Println(q.Contain(4)) // false\n}\n\n\n\n# 2. LinkedQueue\n\n链表实现普通队列数据结构\n\n\n# NewLinkedQueue\n\n返回LinkedQueue指针\n\n函数签名:\n\nfunc NewLinkedQueue[T any]() *LinkedQueue[T]\n\ntype LinkedQueue[T any] struct {\n\thead   *datastructure.QueueNode[T]\n\ttail   *datastructure.QueueNode[T]\n\tlength int\n}\ntype QueueNode[T any] struct {\n\tValue T\n\tNext  *QueueNode[T]\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int]()\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Data\n\n获取队列所有元素的切片\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) Data() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int]()\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Enqueue\n\n元素入队列\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) Enqueue(value T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Dequeue\n\n移除队列的头元素并返回\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) Dequeue() (T, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Dequeue()) // 1\n    fmt.Println(q.Data()) // 2,3\n}\n\n\n\n# Front\n\n获取对列头部元素\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) Front() (*T, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Front()) // 1\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Back\n\n获取对列尾部元素\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) Back() (*T, error) \n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Back()) // 3\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Size\n\n获取队列元素的数量\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Size()) // 3\n}\n\n\n\n# IsEmpty\n\n判断对了是否为空\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    fmt.Println(q.IsEmpty()) // true\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsEmpty()) // false\n}\n\n\n\n# Clear\n\n清空队列元素\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n    q.Clear()\n\n    fmt.Println(q.IsEmpty()) // true\n}\n\n\n\n# Contain\n\n判断队列是否包含某个值\n\n函数签名:\n\nfunc (q *LinkedQueue[T]) Contain(value T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Contain(1)) // true\n    fmt.Println(q.Contain(4)) // false\n}\n\n\n\n# 3. CircularQueue\n\n切片实现的循环队列.\n\n\n# NewCircularQueue\n\n返回具有特定容量的CircularQueue指针\n\n函数签名:\n\nfunc NewCircularQueue[T any](capacity int) *CircularQueue[T]\n\ntype CircularQueue[T any] struct {\n\tdata  []T\n\tfront int\n\trear  int\n\tcapacity  int\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Data\n\n获取队列所有元素的切片\n\n函数签名:\n\nfunc (q *CircularQueue[T]) Data() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Enqueue\n\n元素入队列\n\n函数签名:\n\nfunc (q *CircularQueue[T]) Enqueue(value T) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Dequeue\n\n移除队列的头元素并返回\n\n函数签名:\n\nfunc (q *CircularQueue[T]) Dequeue() (*T, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    val := q.Dequeue()\n    fmt.Println(*val) // 1\n    fmt.Println(q.Data()) // 2,3\n}\n\n\n\n# Front\n\n获取对列头部元素\n\n函数签名:\n\nfunc (q *CircularQueue[T]) Front() T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Front()) // 1\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Back\n\n获取对列尾部元素\n\n函数签名:\n\nfunc (q *CircularQueue[T]) Back() T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Back()) // 3\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Size\n\n获取队列元素的数量\n\n函数签名:\n\nfunc (q *CircularQueue[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Size()) // 3\n}\n\n\n\n# IsEmpty\n\n判断对了是否为空\n\n函数签名:\n\nfunc (q *CircularQueue[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    fmt.Println(q.IsEmpty()) // true\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsEmpty()) // false\n}\n\n\n\n# IsFull\n\n判断对了是否为满\n\n函数签名:\n\nfunc (q *CircularQueue[T]) IsFull() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](3)\n    fmt.Println(q.IsFull()) // false\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsFull()) // true\n}\n\n\n\n# Clear\n\n清空队列元素\n\n函数签名:\n\nfunc (q *CircularQueue[T]) Clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n    q.Clear()\n\n    fmt.Println(q.IsEmpty()) // true\n}\n\n\n\n# Contain\n\n判断队列是否包含某个值\n\n函数签名:\n\nfunc (q *CircularQueue[T]) Contain(value T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Contain(1)) // true\n    fmt.Println(q.Contain(4)) // false\n}\n\n\n\n# 4. PriorityQueue\n\n切片实现的额优先级队列。\n\n\n# NewPriorityQueue\n\n返回一个具有特定容量的PriorityQueue指针，参数 `comarator` 用于比较队列中T类型的值。\n\n函数签名:\n\nfunc NewPriorityQueue[T any](capacity int, comparator lancetconstraints.Comparator) *PriorityQueue[T]\n\ntype PriorityQueue[T any] struct {\n\titems      []T\n\tsize       int\n\tcomparator lancetconstraints.Comparator\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewPriorityQueue[int](3)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Data\n\n获取队列所有元素的切片\n\n函数签名:\n\nfunc (q *PriorityQueue[T]) Data() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewPriorityQueue[int](3)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Enqueue\n\n元素入队列\n\n函数签名:\n\nfunc (q *PriorityQueue[T]) Enqueue(item T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    for i := 1; i < 11; i++ {\n\t\tq.Enqueue(i)\n\t}\n\n    fmt.Println(q.Data()) // 10, 9, 6, 7, 8, 2, 5, 1, 4, 3\n}\n\n\n\n# Dequeue\n\n移除队列的头元素并返回\n\n函数签名:\n\nfunc (q *PriorityQueue[T]) Dequeue() (T, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    for i := 1; i < 11; i++ {\n\t\tq.Enqueue(i)\n\t}\n    val, ok := pq.Dequeue()\n    fmt.Println(val) // 10\n    fmt.Println(q.Data()) // 9, 8, 6, 7, 3, 2, 5, 1, 4\n}\n\n\n\n# IsEmpty\n\n判断对了是否为空\n\n函数签名:\n\nfunc (q *PriorityQueue[T]) IsEmpty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    fmt.Println(q.IsEmpty()) // true\n\n    for i := 1; i < 11; i++ {\n\t\tq.Enqueue(i)\n\t}\n    fmt.Println(q.IsEmpty()) // false\n}\n\n\n\n# IsFull\n\n判断对了是否为满\n\n函数签名:\n\nfunc (q *PriorityQueue[T]) IsFull() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    fmt.Println(q.IsFull()) // false\n\n    for i := 1; i < 11; i++ {\n\t\tq.Enqueue(i)\n\t}\n    fmt.Println(q.IsFull()) // true\n}\n\n\n\n# Size\n\n获取队列元素的数量\n\n函数签名:\n\nfunc (q *PriorityQueue[T]) Size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    fmt.Println(q.IsFull()) // false\n\n    for i := 1; i < 5; i++ {\n\t\tq.Enqueue(i)\n\t}\n    fmt.Println(q.Size()) // 4\n}\n',normalizedContent:'# queue\n\n队列数据结构，包括arrayqueue, linkedqueue, circularqueue, and priorityqueue。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/arrayqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/linkedqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/circularqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/priorityqueue.go\n\n\n\n\n# 用法\n\nimport (\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\n\n\n\n\n# 目录\n\n\n# 1. arrayqueue\n\n * newarrayqueue\n * data\n * enqueue\n * dequeue\n * front\n * back\n * size\n * isempty\n * isfull\n * clear\n * contain\n\n\n# 2. linkedqueue\n\n * newlinkedqueue\n * data\n * enqueue\n * dequeue\n * front\n * back\n * size\n * isempty\n * clear\n * contain\n\n\n# 3. circularqueue\n\n * newcircularqueue\n * data\n * enqueue\n * dequeue\n * front\n * back\n * size\n * isempty\n * isfull\n * clear\n * contain\n\n\n# 4. priorityqueue\n\n * newpriorityqueue\n * data\n * enqueue\n * dequeue\n * isempty\n * isfull\n * size\n\n\n\n\n# 文档\n\n\n# 1. arrayqueue\n\n切片实现普通队列数据结构\n\n\n# newarrayqueue\n\n返回具有特定容量的arrayqueue指针\n\n函数签名:\n\nfunc newarrayqueue[t any](capacity int) *arrayqueue[t]\n\ntype arrayqueue[t any] struct {\n\titems    []t\n\thead     int\n\ttail     int\n\tcapacity int\n\tsize     int\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    fmt.println(q.data()) // []\n}\n\n\n\n# data\n\n获取队列所有元素的切片\n\n函数签名:\n\nfunc (q *arrayqueue[t]) data() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    fmt.println(q.data()) // []\n}\n\n\n\n# enqueue\n\n元素入队列\n\n函数签名:\n\nfunc (q *arrayqueue[t]) enqueue(item t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# dequeue\n\n移除队列的头元素并返回\n\n函数签名:\n\nfunc (q *arrayqueue[t]) dequeue() (t, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.dequeue()) // 1\n    fmt.println(q.data()) // 2,3\n}\n\n\n\n# front\n\n获取对列头部元素\n\n函数签名:\n\nfunc (q *arrayqueue[t]) front() t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.front()) // 1\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# back\n\n获取对列尾部元素\n\n函数签名:\n\nfunc (q *arrayqueue[t]) back() t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.back()) // 3\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# size\n\n获取队列元素的数量\n\n函数签名:\n\nfunc (q *arrayqueue[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.size()) // 3\n}\n\n\n\n# isempty\n\n判断对了是否为空\n\n函数签名:\n\nfunc (q *arrayqueue[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    fmt.println(q.isempty()) // true\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isempty()) // false\n}\n\n\n\n# isfull\n\n判断对了是否为满\n\n函数签名:\n\nfunc (q *arrayqueue[t]) isfull() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](3)\n    fmt.println(q.isfull()) // false\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isfull()) // true\n}\n\n\n\n# clear\n\n清空队列元素\n\n函数签名:\n\nfunc (q *arrayqueue[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n    q.clear()\n\n    fmt.println(q.isempty()) // true\n}\n\n\n\n# contain\n\n判断队列是否包含某个值\n\n函数签名:\n\nfunc (q *arrayqueue[t]) contain(value t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.contain(1)) // true\n    fmt.println(q.contain(4)) // false\n}\n\n\n\n# 2. linkedqueue\n\n链表实现普通队列数据结构\n\n\n# newlinkedqueue\n\n返回linkedqueue指针\n\n函数签名:\n\nfunc newlinkedqueue[t any]() *linkedqueue[t]\n\ntype linkedqueue[t any] struct {\n\thead   *datastructure.queuenode[t]\n\ttail   *datastructure.queuenode[t]\n\tlength int\n}\ntype queuenode[t any] struct {\n\tvalue t\n\tnext  *queuenode[t]\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int]()\n    fmt.println(q.data()) // []\n}\n\n\n\n# data\n\n获取队列所有元素的切片\n\n函数签名:\n\nfunc (q *linkedqueue[t]) data() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int]()\n    fmt.println(q.data()) // []\n}\n\n\n\n# enqueue\n\n元素入队列\n\n函数签名:\n\nfunc (q *linkedqueue[t]) enqueue(value t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# dequeue\n\n移除队列的头元素并返回\n\n函数签名:\n\nfunc (q *linkedqueue[t]) dequeue() (t, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.dequeue()) // 1\n    fmt.println(q.data()) // 2,3\n}\n\n\n\n# front\n\n获取对列头部元素\n\n函数签名:\n\nfunc (q *linkedqueue[t]) front() (*t, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.front()) // 1\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# back\n\n获取对列尾部元素\n\n函数签名:\n\nfunc (q *linkedqueue[t]) back() (*t, error) \n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.back()) // 3\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# size\n\n获取队列元素的数量\n\n函数签名:\n\nfunc (q *linkedqueue[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.size()) // 3\n}\n\n\n\n# isempty\n\n判断对了是否为空\n\n函数签名:\n\nfunc (q *linkedqueue[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    fmt.println(q.isempty()) // true\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isempty()) // false\n}\n\n\n\n# clear\n\n清空队列元素\n\n函数签名:\n\nfunc (q *linkedqueue[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n    q.clear()\n\n    fmt.println(q.isempty()) // true\n}\n\n\n\n# contain\n\n判断队列是否包含某个值\n\n函数签名:\n\nfunc (q *linkedqueue[t]) contain(value t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.contain(1)) // true\n    fmt.println(q.contain(4)) // false\n}\n\n\n\n# 3. circularqueue\n\n切片实现的循环队列.\n\n\n# newcircularqueue\n\n返回具有特定容量的circularqueue指针\n\n函数签名:\n\nfunc newcircularqueue[t any](capacity int) *circularqueue[t]\n\ntype circularqueue[t any] struct {\n\tdata  []t\n\tfront int\n\trear  int\n\tcapacity  int\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    fmt.println(q.data()) // []\n}\n\n\n\n# data\n\n获取队列所有元素的切片\n\n函数签名:\n\nfunc (q *circularqueue[t]) data() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    fmt.println(q.data()) // []\n}\n\n\n\n# enqueue\n\n元素入队列\n\n函数签名:\n\nfunc (q *circularqueue[t]) enqueue(value t) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# dequeue\n\n移除队列的头元素并返回\n\n函数签名:\n\nfunc (q *circularqueue[t]) dequeue() (*t, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    val := q.dequeue()\n    fmt.println(*val) // 1\n    fmt.println(q.data()) // 2,3\n}\n\n\n\n# front\n\n获取对列头部元素\n\n函数签名:\n\nfunc (q *circularqueue[t]) front() t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.front()) // 1\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# back\n\n获取对列尾部元素\n\n函数签名:\n\nfunc (q *circularqueue[t]) back() t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.back()) // 3\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# size\n\n获取队列元素的数量\n\n函数签名:\n\nfunc (q *circularqueue[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.size()) // 3\n}\n\n\n\n# isempty\n\n判断对了是否为空\n\n函数签名:\n\nfunc (q *circularqueue[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    fmt.println(q.isempty()) // true\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isempty()) // false\n}\n\n\n\n# isfull\n\n判断对了是否为满\n\n函数签名:\n\nfunc (q *circularqueue[t]) isfull() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](3)\n    fmt.println(q.isfull()) // false\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isfull()) // true\n}\n\n\n\n# clear\n\n清空队列元素\n\n函数签名:\n\nfunc (q *circularqueue[t]) clear()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n    q.clear()\n\n    fmt.println(q.isempty()) // true\n}\n\n\n\n# contain\n\n判断队列是否包含某个值\n\n函数签名:\n\nfunc (q *circularqueue[t]) contain(value t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.contain(1)) // true\n    fmt.println(q.contain(4)) // false\n}\n\n\n\n# 4. priorityqueue\n\n切片实现的额优先级队列。\n\n\n# newpriorityqueue\n\n返回一个具有特定容量的priorityqueue指针，参数 `comarator` 用于比较队列中t类型的值。\n\n函数签名:\n\nfunc newpriorityqueue[t any](capacity int, comparator lancetconstraints.comparator) *priorityqueue[t]\n\ntype priorityqueue[t any] struct {\n\titems      []t\n\tsize       int\n\tcomparator lancetconstraints.comparator\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newpriorityqueue[int](3)\n    fmt.println(q.data()) // []\n}\n\n\n\n# data\n\n获取队列所有元素的切片\n\n函数签名:\n\nfunc (q *priorityqueue[t]) data() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newpriorityqueue[int](3)\n    fmt.println(q.data()) // []\n}\n\n\n\n# enqueue\n\n元素入队列\n\n函数签名:\n\nfunc (q *priorityqueue[t]) enqueue(item t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    for i := 1; i < 11; i++ {\n\t\tq.enqueue(i)\n\t}\n\n    fmt.println(q.data()) // 10, 9, 6, 7, 8, 2, 5, 1, 4, 3\n}\n\n\n\n# dequeue\n\n移除队列的头元素并返回\n\n函数签名:\n\nfunc (q *priorityqueue[t]) dequeue() (t, bool)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    for i := 1; i < 11; i++ {\n\t\tq.enqueue(i)\n\t}\n    val, ok := pq.dequeue()\n    fmt.println(val) // 10\n    fmt.println(q.data()) // 9, 8, 6, 7, 3, 2, 5, 1, 4\n}\n\n\n\n# isempty\n\n判断对了是否为空\n\n函数签名:\n\nfunc (q *priorityqueue[t]) isempty() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    fmt.println(q.isempty()) // true\n\n    for i := 1; i < 11; i++ {\n\t\tq.enqueue(i)\n\t}\n    fmt.println(q.isempty()) // false\n}\n\n\n\n# isfull\n\n判断对了是否为满\n\n函数签名:\n\nfunc (q *priorityqueue[t]) isfull() bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    fmt.println(q.isfull()) // false\n\n    for i := 1; i < 11; i++ {\n\t\tq.enqueue(i)\n\t}\n    fmt.println(q.isfull()) // true\n}\n\n\n\n# size\n\n获取队列元素的数量\n\n函数签名:\n\nfunc (q *priorityqueue[t]) size() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    fmt.println(q.isfull()) // false\n\n    for i := 1; i < 5; i++ {\n\t\tq.enqueue(i)\n\t}\n    fmt.println(q.size()) // 4\n}\n',charsets:{cjk:!0}},{title:"Tree",frontmatter:{},regularPath:"/datastructure/tree.html",relativePath:"datastructure/tree.md",key:"v-6fb9ed78",path:"/datastructure/tree.html",headers:[{level:2,title:"源码",slug:"源码",normalizedTitle:"源码",charIndex:60},{level:2,title:"用法",slug:"用法",normalizedTitle:"用法",charIndex:147},{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:229},{level:3,title:"1. BSTree",slug:"_1-bstree",normalizedTitle:"1. bstree",charIndex:236},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:409},{level:2,title:"1. BSTree",slug:"_1-bstree-2",normalizedTitle:"1. bstree",charIndex:236},{level:3,title:"",slug:"newbstree",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insert",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"delete",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"preordertraverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"inordertraverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"postordertraverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"levelordertraverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"depth",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"hassubtree",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"print",normalizedTitle:"",charIndex:0}],lastUpdated:"2022/10/22 上午11:35:23",lastUpdatedTimestamp:1666409723e3,headersStr:"源码 用法 目录 1. BSTree 文档 1. BSTree          ",content:'# Tree\n\n树是树节点的集合。 每个树节点都有一个值，一个指向左节点的左指针和一个指向右节点的右指针。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/tree/bstree.go\n\n\n\n\n# 用法\n\nimport (\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\n\n\n\n\n# 目录\n\n\n# 1. BSTree\n\n * NewBSTree\n\n * Insert\n\n * Delete\n\n * PreOrderTraverse\n\n * InOrderTraverse\n\n * PostOrderTraverse\n\n * LevelOrderTraverse\n\n * Depth\n\n * HasSubTree\n\n * Print\n\n\n\n\n# 文档\n\n\n# 1. BSTree\n\nBSTree是一种二叉搜索树数据结构，其中每个节点有两个孩子，分别称为左孩子和右孩子。 在 BSTree 中：leftNode < rootNode < rightNode。 T类型应该实现lancetconstraints.Comparator。\n\n\n# NewBSTree\n\n返回BSTree指针实例\n\n函数签名:\n\nfunc NewBSTree[T any](rootData T, comparator lancetconstraints.Comparator) *BSTree[T]\n\ntype BSTree[T any] struct {\n\troot       *datastructure.TreeNode[T]\n\tcomparator lancetconstraints.Comparator\n}\n\ntype TreeNode[T any] struct {\n\tValue T\n\tLeft  *TreeNode[T]\n\tRight *TreeNode[T]\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    fmt.Println(bstree) //\n}\n\n\n\n# Insert\n\n将值插入二叉搜索树\n\n函数签名:\n\nfunc (t *BSTree[T]) Insert(data T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.PreOrderTraverse()) //6, 5, 2, 4, 7\n}\n\n\n\n# Delete\n\n删除插入二叉搜索树中指定的值\n\n函数签名:\n\nfunc (t *BSTree[T]) Delete(data T)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    bstree.Delete(4)\n\n    fmt.Println(bstree.PreOrderTraverse()) //2, 5, 6, 7\n}\n\n\n\n# PreOrderTraverse\n\n按前序遍历树节点\n\n函数签名:\n\nfunc (t *BSTree[T]) PreOrderTraverse() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.PreOrderTraverse()) //6, 5, 2, 4, 7\n}\n\n\n\n# InOrderTraverse\n\n按中序遍历树节点\n\n函数签名:\n\nfunc (t *BSTree[T]) InOrderTraverse() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.InOrderTraverse()) //2, 4, 5, 6, 7\n}\n\n\n\n# PostOrderTraverse\n\n按后序遍历树节点\n\n函数签名:\n\nfunc (t *BSTree[T]) PostOrderTraverse() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.PostOrderTraverse()) //5, 2, 4, 7, 6\n}\n\n\n\n# LevelOrderTraverse\n\n按节点层次遍历树节点\n\n函数签名:\n\nfunc (t *BSTree[T]) LevelOrderTraverse() []T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.LevelOrderTraverse()) //6, 5, 7, 2, 4\n}\n\n\n\n# Depth\n\n获取树的深度\n\n函数签名:\n\nfunc (t *BSTree[T]) Depth() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.Depth()) //4\n}\n\n\n\n# HasSubTree\n\n判断给定树是否是子树\n\n函数签名:\n\nfunc (t *BSTree[T]) HasSubTree(subTree *BSTree[T]) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    superTree := tree.NewBSTree(8, &intComparator{})\n\tsuperTree.Insert(4)\n\tsuperTree.Insert(5)\n\tsuperTree.Insert(6)\n\tsuperTree.Insert(9)\n\tsuperTree.Insert(4)\n\n    subTree := tree.NewBSTree(5, &intComparator{})\n\tsubTree.Insert(4)\n\tsubTree.Insert(6)\n\n    fmt.Println(superTree.HasSubTree(subTree)) //true\n    fmt.Println(subTree.HasSubTree(superTree)) //false\n}\n\n\n\n# Print\n\n打印树结构\n\n函数签名:\n\nfunc (t *BSTree[T]) Print()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.Print())\n//        6\n//       / \\\n//      /   \\\n//     /     \\\n//    /       \\\n//    5       7\n//   /\n//  /\n//  2\n//   \\\n//    4\n}\n',normalizedContent:'# tree\n\n树是树节点的集合。 每个树节点都有一个值，一个指向左节点的左指针和一个指向右节点的右指针。\n\n\n\n\n# 源码\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/tree/bstree.go\n\n\n\n\n# 用法\n\nimport (\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\n\n\n\n\n# 目录\n\n\n# 1. bstree\n\n * newbstree\n\n * insert\n\n * delete\n\n * preordertraverse\n\n * inordertraverse\n\n * postordertraverse\n\n * levelordertraverse\n\n * depth\n\n * hassubtree\n\n * print\n\n\n\n\n# 文档\n\n\n# 1. bstree\n\nbstree是一种二叉搜索树数据结构，其中每个节点有两个孩子，分别称为左孩子和右孩子。 在 bstree 中：leftnode < rootnode < rightnode。 t类型应该实现lancetconstraints.comparator。\n\n\n# newbstree\n\n返回bstree指针实例\n\n函数签名:\n\nfunc newbstree[t any](rootdata t, comparator lancetconstraints.comparator) *bstree[t]\n\ntype bstree[t any] struct {\n\troot       *datastructure.treenode[t]\n\tcomparator lancetconstraints.comparator\n}\n\ntype treenode[t any] struct {\n\tvalue t\n\tleft  *treenode[t]\n\tright *treenode[t]\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    fmt.println(bstree) //\n}\n\n\n\n# insert\n\n将值插入二叉搜索树\n\n函数签名:\n\nfunc (t *bstree[t]) insert(data t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.preordertraverse()) //6, 5, 2, 4, 7\n}\n\n\n\n# delete\n\n删除插入二叉搜索树中指定的值\n\n函数签名:\n\nfunc (t *bstree[t]) delete(data t)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    bstree.delete(4)\n\n    fmt.println(bstree.preordertraverse()) //2, 5, 6, 7\n}\n\n\n\n# preordertraverse\n\n按前序遍历树节点\n\n函数签名:\n\nfunc (t *bstree[t]) preordertraverse() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.preordertraverse()) //6, 5, 2, 4, 7\n}\n\n\n\n# inordertraverse\n\n按中序遍历树节点\n\n函数签名:\n\nfunc (t *bstree[t]) inordertraverse() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.inordertraverse()) //2, 4, 5, 6, 7\n}\n\n\n\n# postordertraverse\n\n按后序遍历树节点\n\n函数签名:\n\nfunc (t *bstree[t]) postordertraverse() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.postordertraverse()) //5, 2, 4, 7, 6\n}\n\n\n\n# levelordertraverse\n\n按节点层次遍历树节点\n\n函数签名:\n\nfunc (t *bstree[t]) levelordertraverse() []t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.levelordertraverse()) //6, 5, 7, 2, 4\n}\n\n\n\n# depth\n\n获取树的深度\n\n函数签名:\n\nfunc (t *bstree[t]) depth() int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.depth()) //4\n}\n\n\n\n# hassubtree\n\n判断给定树是否是子树\n\n函数签名:\n\nfunc (t *bstree[t]) hassubtree(subtree *bstree[t]) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    supertree := tree.newbstree(8, &intcomparator{})\n\tsupertree.insert(4)\n\tsupertree.insert(5)\n\tsupertree.insert(6)\n\tsupertree.insert(9)\n\tsupertree.insert(4)\n\n    subtree := tree.newbstree(5, &intcomparator{})\n\tsubtree.insert(4)\n\tsubtree.insert(6)\n\n    fmt.println(supertree.hassubtree(subtree)) //true\n    fmt.println(subtree.hassubtree(supertree)) //false\n}\n\n\n\n# print\n\n打印树结构\n\n函数签名:\n\nfunc (t *bstree[t]) print()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.print())\n//        6\n//       / \\\n//      /   \\\n//     /     \\\n//    /       \\\n//    5       7\n//   /\n//  /\n//  2\n//   \\\n//    4\n}\n',charsets:{cjk:!0}},{title:"Condition",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/condition/",relativePath:"en/condition/README.md",key:"v-faf4082a",path:"/en/condition/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:117},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:199},{level:3,title:"Bool",slug:"bool",normalizedTitle:"bool",charIndex:268},{level:3,title:"And",slug:"and",normalizedTitle:"and",charIndex:1359},{level:3,title:"Or",slug:"or",normalizedTitle:"or",charIndex:1719},{level:3,title:"Xor",slug:"xor",normalizedTitle:"xor",charIndex:2073},{level:3,title:"Nor",slug:"nor",normalizedTitle:"nor",charIndex:2433},{level:3,title:"Nand",slug:"nand",normalizedTitle:"nand",charIndex:2768},{level:3,title:"TernaryOperator",slug:"ternaryoperator",normalizedTitle:"ternaryoperator",charIndex:3126}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: Bool And Or Xor Nor Nand TernaryOperator",content:'# Condition\n\ncondition 包含一些用于条件判断的函数。这个包的实现参考了 carlmjohnson 的 truthy 包的实现，更多有用的信息可以在truthy中找到，感谢 carlmjohnson。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/condition/condition.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/condition"\n)\n\n\n\n\n\n# Bool\n\n返回传入参数的bool值.\n如果出入类型参数含有Bool方法, 会调用该方法并返回\n如果传入类型参数有IsZero方法, 返回IsZero方法返回值的取反\nslices和map的length大于0时，返回true，否则返回false\n其他类型会判断是否是零值\n\n函数签名:\n\nfunc Bool[T any](value T) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\t// bool\n\tfmt.Println(condition.Bool(false)) // false\n\tfmt.Println(condition.Bool(true)) // true\n\n\t// integer\n\tfmt.Println(condition.Bool(0)) // false\n\tfmt.Println(condition.Bool(1)) // true\n\n\t// float\n\tfmt.Println(condition.Bool(0.0)) // false\n\tfmt.Println(condition.Bool(0.1)) // true\n\n\t// string\n\tfmt.Println(condition.Bool("")) // false\n\tfmt.Println(condition.Bool(" ")) // true\n\tfmt.Println(condition.Bool("0")) // true\n\n\t// slice\n\tvar nums [2]int\n\tfmt.Println(condition.Bool(nums)) // false\n\tnums = [2]int{0, 1}\n\tfmt.Println(condition.Bool(nums)) // true\n\n\t// map\n\tfmt.Println(condition.Bool(map[string]string{})) // false\n\tfmt.Println(condition.Bool(map[string]string{"a": "a"})) // true\n\n\t// struct\n\tfmt.Println(condition.Bool(struct{}{})) // false\n\tfmt.Println(condition.Bool(time.Now())) // true\n}\n\n\n\n# And\n\n逻辑且操作，当切仅当a和b都为true时返回true\n\n函数签名:\n\nfunc And[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.And(0, 1)) // false\n\tfmt.Println(condition.And(0, "")) // false\n\tfmt.Println(condition.And(0, "0")) // false\n\tfmt.Println(condition.And(1, "0")) // true\n}\n\n\n\n# Or\n\n逻辑或操作，当切仅当a和b都为false时返回false\n\n函数签名:\n\nfunc Or[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.Or(0, "")) // false\n\tfmt.Println(condition.Or(0, 1)) // true\n\tfmt.Println(condition.Or(0, "0")) // true\n\tfmt.Println(condition.Or(1, "0")) // true\n}\n\n\n\n# Xor\n\n逻辑异或操作，a和b相同返回false，a和b不相同返回true\n\n函数签名:\n\nfunc Xor[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.Xor(0, 0)) // false\n\tfmt.Println(condition.Xor(0, 1)) // true\n\tfmt.Println(condition.Xor(1, 0)) // true\n\tfmt.Println(condition.Xor(1, 1)) // false\n}\n\n\n\n# Nor\n\n异或的取反操作\n\n函数签名:\n\nfunc Nor[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.Nor(0, 0)) // true\n\tfmt.Println(condition.Nor(0, 1)) // false\n\tfmt.Println(condition.Nor(1, 0)) // false\n\tfmt.Println(condition.Nor(1, 1)) // true\n}\n\n\n\n# Nand\n\n如果a和b都为真，返回false，否则返回true\n\n函数签名:\n\nfunc Nand[T, U any](a T, b U) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.Println(condition.Nand(0, 0)) // true\n\tfmt.Println(condition.Nand(0, 1)) // true\n\tfmt.Println(condition.Nand(1, 0)) // true\n\tfmt.Println(condition.Nand(1, 1)) // false\n}\n\n\n\n# TernaryOperator\n\n三元运算符\n\n函数签名:\n\nfunc TernaryOperator[T, U any](isTrue T, ifValue U, elseValue U) U\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\ttrueValue := "1"\n\tfalseValue := "0"\n\n\tfmt.Println(condition.TernaryOperator(true, trueValue, falseValue)) // "1"\n}\n',normalizedContent:'# condition\n\ncondition 包含一些用于条件判断的函数。这个包的实现参考了 carlmjohnson 的 truthy 包的实现，更多有用的信息可以在truthy中找到，感谢 carlmjohnson。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/condition/condition.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/condition"\n)\n\n\n\n\n\n# bool\n\n返回传入参数的bool值.\n如果出入类型参数含有bool方法, 会调用该方法并返回\n如果传入类型参数有iszero方法, 返回iszero方法返回值的取反\nslices和map的length大于0时，返回true，否则返回false\n其他类型会判断是否是零值\n\n函数签名:\n\nfunc bool[t any](value t) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\t// bool\n\tfmt.println(condition.bool(false)) // false\n\tfmt.println(condition.bool(true)) // true\n\n\t// integer\n\tfmt.println(condition.bool(0)) // false\n\tfmt.println(condition.bool(1)) // true\n\n\t// float\n\tfmt.println(condition.bool(0.0)) // false\n\tfmt.println(condition.bool(0.1)) // true\n\n\t// string\n\tfmt.println(condition.bool("")) // false\n\tfmt.println(condition.bool(" ")) // true\n\tfmt.println(condition.bool("0")) // true\n\n\t// slice\n\tvar nums [2]int\n\tfmt.println(condition.bool(nums)) // false\n\tnums = [2]int{0, 1}\n\tfmt.println(condition.bool(nums)) // true\n\n\t// map\n\tfmt.println(condition.bool(map[string]string{})) // false\n\tfmt.println(condition.bool(map[string]string{"a": "a"})) // true\n\n\t// struct\n\tfmt.println(condition.bool(struct{}{})) // false\n\tfmt.println(condition.bool(time.now())) // true\n}\n\n\n\n# and\n\n逻辑且操作，当切仅当a和b都为true时返回true\n\n函数签名:\n\nfunc and[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.and(0, 1)) // false\n\tfmt.println(condition.and(0, "")) // false\n\tfmt.println(condition.and(0, "0")) // false\n\tfmt.println(condition.and(1, "0")) // true\n}\n\n\n\n# or\n\n逻辑或操作，当切仅当a和b都为false时返回false\n\n函数签名:\n\nfunc or[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.or(0, "")) // false\n\tfmt.println(condition.or(0, 1)) // true\n\tfmt.println(condition.or(0, "0")) // true\n\tfmt.println(condition.or(1, "0")) // true\n}\n\n\n\n# xor\n\n逻辑异或操作，a和b相同返回false，a和b不相同返回true\n\n函数签名:\n\nfunc xor[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.xor(0, 0)) // false\n\tfmt.println(condition.xor(0, 1)) // true\n\tfmt.println(condition.xor(1, 0)) // true\n\tfmt.println(condition.xor(1, 1)) // false\n}\n\n\n\n# nor\n\n异或的取反操作\n\n函数签名:\n\nfunc nor[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.nor(0, 0)) // true\n\tfmt.println(condition.nor(0, 1)) // false\n\tfmt.println(condition.nor(1, 0)) // false\n\tfmt.println(condition.nor(1, 1)) // true\n}\n\n\n\n# nand\n\n如果a和b都为真，返回false，否则返回true\n\n函数签名:\n\nfunc nand[t, u any](a t, b u) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\tfmt.println(condition.nand(0, 0)) // true\n\tfmt.println(condition.nand(0, 1)) // true\n\tfmt.println(condition.nand(1, 0)) // true\n\tfmt.println(condition.nand(1, 1)) // false\n}\n\n\n\n# ternaryoperator\n\n三元运算符\n\n函数签名:\n\nfunc ternaryoperator[t, u any](istrue t, ifvalue u, elsevalue u) u\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/condition"\n)\n\nfunc main() {\n\ttruevalue := "1"\n\tfalsevalue := "0"\n\n\tfmt.println(condition.ternaryoperator(true, truevalue, falsevalue)) // "1"\n}\n',charsets:{cjk:!0}},{title:"Datetime",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/datetime/",relativePath:"datetime/README.md",key:"v-1eab5fab",path:"/datetime/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:47},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:127},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:195},{level:2,title:"注:",slug:"注",normalizedTitle:"注:",charIndex:202},{level:3,title:"AddDay",slug:"addday",normalizedTitle:"addday",charIndex:541},{level:3,title:"AddHour",slug:"addhour",normalizedTitle:"addhour",charIndex:876},{level:3,title:"AddMinute",slug:"addminute",normalizedTitle:"addminute",charIndex:1226},{level:3,title:"BeginOfMinute",slug:"beginofminute",normalizedTitle:"beginofminute",charIndex:1591},{level:3,title:"BeginOfHour",slug:"beginofhour",normalizedTitle:"beginofhour",charIndex:1941},{level:3,title:"BeginOfDay",slug:"beginofday",normalizedTitle:"beginofday",charIndex:2285},{level:3,title:"BeginOfWeek",slug:"beginofweek",normalizedTitle:"beginofweek",charIndex:2626},{level:3,title:"BeginOfMonth",slug:"beginofmonth",normalizedTitle:"beginofmonth",charIndex:3007},{level:3,title:"BeginOfYear",slug:"beginofyear",normalizedTitle:"beginofyear",charIndex:3354},{level:3,title:"EndOfMinute",slug:"endofminute",normalizedTitle:"endofminute",charIndex:3698},{level:3,title:"EndOfHour",slug:"endofhour",normalizedTitle:"endofhour",charIndex:4052},{level:3,title:"EndOfDay",slug:"endofday",normalizedTitle:"endofday",charIndex:4400},{level:3,title:"EndOfWeek",slug:"endofweek",normalizedTitle:"endofweek",charIndex:4746},{level:3,title:"EndOfMonth",slug:"endofmonth",normalizedTitle:"endofmonth",charIndex:5129},{level:3,title:"EndOfYear",slug:"endofyear",normalizedTitle:"endofyear",charIndex:5480},{level:3,title:"GetNowDate",slug:"getnowdate",normalizedTitle:"getnowdate",charIndex:5828},{level:3,title:"GetNowTime",slug:"getnowtime",normalizedTitle:"getnowtime",charIndex:6119},{level:3,title:"GetNowDateTime",slug:"getnowdatetime",normalizedTitle:"getnowdatetime",charIndex:6409},{level:3,title:"GetZeroHourTimestamp",slug:"getzerohourtimestamp",normalizedTitle:"getzerohourtimestamp",charIndex:6729},{level:3,title:"GetNightTimestamp",slug:"getnighttimestamp",normalizedTitle:"getnighttimestamp",charIndex:7052},{level:3,title:"FormatTimeToStr",slug:"formattimetostr",normalizedTitle:"formattimetostr",charIndex:213},{level:3,title:"FormatStrToTime",slug:"formatstrtotime",normalizedTitle:"formatstrtotime",charIndex:231},{level:3,title:"NewUnixNow",slug:"newunixnow",normalizedTitle:"newunixnow",charIndex:8063},{level:3,title:"NewUnix",slug:"newunix",normalizedTitle:"newunix",charIndex:8063},{level:3,title:"NewFormat",slug:"newformat",normalizedTitle:"newformat",charIndex:8629},{level:3,title:"NewISO8601",slug:"newiso8601",normalizedTitle:"newiso8601",charIndex:8971},{level:3,title:"ToUnix",slug:"tounix",normalizedTitle:"tounix",charIndex:9315},{level:3,title:"ToFormat",slug:"toformat",normalizedTitle:"toformat",charIndex:9557},{level:3,title:"ToFormatForTpl",slug:"toformatfortpl",normalizedTitle:"toformatfortpl",charIndex:9862},{level:3,title:"ToIso8601",slug:"toiso8601",normalizedTitle:"toiso8601",charIndex:10213}],lastUpdated:"2022/10/14 上午10:24:23",lastUpdatedTimestamp:1665714263e3,headersStr:"源码: 用法: 文档 注: AddDay AddHour AddMinute BeginOfMinute BeginOfHour BeginOfDay BeginOfWeek BeginOfMonth BeginOfYear EndOfMinute EndOfHour EndOfDay EndOfWeek EndOfMonth EndOfYear GetNowDate GetNowTime GetNowDateTime GetZeroHourTimestamp GetNightTimestamp FormatTimeToStr FormatStrToTime NewUnixNow NewUnix NewFormat NewISO8601 ToUnix ToFormat ToFormatForTpl ToIso8601",content:'# Datetime\n\ndatetime 日期时间处理包，格式化日期，比较日期。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/datetime/datetime.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\n\n\n\n\n# 文档\n\n\n# 注:\n\n 1. 方法 FormatTimeToStr 和 FormatStrToTime 中的 format 参数值需要传以下类型之一：\n\n * yyyy-mm-dd hh:mm:ss\n * yyyy-mm-dd hh:mm\n * yyyy-mm-dd hh\n * yyyy-mm-dd\n * yyyy-mm\n * mm-dd\n * dd-mm-yy hh:mm:ss\n * yyyy/mm/dd hh:mm:ss\n * yyyy/mm/dd hh:mm\n * yyyy-mm-dd hh\n * yyyy/mm/dd\n * yyyy/mm\n * mm/dd\n * dd/mm/yy hh:mm:ss\n * yyyy\n * mm\n * hh:mm:ss\n * mm:ss\n\n\n# AddDay\n\n将日期加/减天数\n\n函数签名:\n\nfunc AddDay(t time.Time, day int64) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n\tafter2Days := datetime.AddDay(now, 2)\n\tbefore2Days := datetime.AddDay(now, -2)\n\n    fmt.Println(after2Days, before2Days)\n}\n\n\n\n# AddHour\n\n将日期加/减小时数\n\n函数签名:\n\nfunc AddHour(t time.Time, hour int64) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    after2Hours := datetime.AddHour(now, 2)\n    before2Hours := datetime.AddHour(now, -2)\n\n    fmt.Println(after2Hours, after2Hours)\n}\n\n\n\n# AddMinute\n\n将日期加/减分钟数\n\n函数签名:\n\nfunc AddMinute(t time.Time, minute int64) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    after2Minute := datetime.AddMinute(now, 2)\n    before2Minute := datetime.AddMinute(now, -2)\n\n    fmt.Println(after2Minute, before2Minute)\n}\n\n\n\n# BeginOfMinute\n\n返回指定时间的分钟开始时间\n\n函数签名:\n\nfunc BeginOfMinute(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfMinute(td)\n    fmt.Println(bm) //2022-02-15 15:48:00 +0800 CST\n}\n\n\n\n# BeginOfHour\n\n返回指定时间的小时开始时间\n\n函数签名:\n\nfunc BeginOfHour(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfHour(td)\n    fmt.Println(bm) //2022-02-15 15:00:00 +0800 CST\n}\n\n\n\n# BeginOfDay\n\n返回指定时间的当天开始时间\n\n函数签名:\n\nfunc BeginOfDay(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfDay(td)\n    fmt.Println(bm) //2022-02-15 00:00:00 +0800 CST\n}\n\n\n\n# BeginOfWeek\n\n返回指定时间的每周开始时间,默认开始时间星期日\n\n函数签名:\n\nfunc BeginOfWeek(t time.Time, beginFrom ...time.Weekday) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfWeek(td)\n    fmt.Println(bm) //2022-02-13 00:00:00 +0800 CST\n}\n\n\n\n# BeginOfMonth\n\n返回指定时间的当月开始时间\n\n函数签名:\n\nfunc BeginOfMonth(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfMonth(td)\n    fmt.Println(bm) //2022-02-01 00:00:00 +0800 CST\n}\n\n\n\n# BeginOfYear\n\n返回指定时间的当年开始时间\n\n函数签名:\n\nfunc BeginOfYear(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfYear(td)\n    fmt.Println(bm) //2022-01-01 00:00:00 +0800 CST\n}\n\n\n\n# EndOfMinute\n\n返回指定时间的分钟结束时间\n\n函数签名:\n\nfunc EndOfMinute(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfMinute(td)\n    fmt.Println(bm) //2022-02-15 15:48:59.999999999 +0800 CST\n}\n\n\n\n# EndOfHour\n\n返回指定时间的小时结束时间\n\n函数签名:\n\nfunc EndOfHour(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfHour(td)\n    fmt.Println(bm) //2022-02-15 15:59:59.999999999 +0800 CST\n}\n\n\n\n# EndOfDay\n\n返回指定时间的当天结束时间.\n\n函数签名:\n\nfunc EndOfDay(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfDay(td)\n    fmt.Println(bm) //2022-02-15 23:59:59.999999999 +0800 CST\n}\n\n\n\n# EndOfWeek\n\n返回指定时间的星期结束时间,默认结束时间星期六\n\n函数签名:\n\nfunc EndOfWeek(t time.Time, endWith ...time.Weekday) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfWeek(td)\n    fmt.Println(bm) //2022-02-19 23:59:59.999999999 +0800 CST\n}\n\n\n\n# EndOfMonth\n\n返回指定时间的月份结束时间\n\n函数签名:\n\nfunc EndOfMonth(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfMonth(td)\n    fmt.Println(bm) //2022-02-28 23:59:59.999999999 +0800 CST\n}\n\n\n\n# EndOfYear\n\n返回指定时间的年份结束时间\n\n函数签名:\n\nfunc EndOfYear(t time.Time) time.Time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfYear(td)\n    fmt.Println(bm) //2022-12-31 23:59:59.999999999 +0800 CST\n}\n\n\n\n# GetNowDate\n\n获取当天日期，返回格式：yyyy-mm-dd\n\n函数签名:\n\nfunc GetNowDate() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n\tcurrentDate := datetime.GetNowDate()\n    fmt.Println(currentDate) // 2022-01-28\n}\n\n\n\n# GetNowTime\n\n获取当时时间，返回格式：hh:mm:ss\n\n函数签名:\n\nfunc GetNowTime() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    currentTime := datetime.GetNowTime()\n    fmt.Println(currentDate) // 15:57:33\n}\n\n\n\n# GetNowDateTime\n\n获取当时日期和时间，返回格式：yyyy-mm-dd hh:mm:ss.\n\n函数签名:\n\nfunc GetNowDateTime() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    current := datetime.GetNowDateTime()\n    fmt.Println(current) // 2022-01-28 15:59:33\n}\n\n\n\n# GetZeroHourTimestamp\n\n获取零时时间戳(timestamp of 00:00).\n\n函数签名:\n\nfunc GetZeroHourTimestamp() int64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    zeroTime := datetime.GetZeroHourTimestamp()\n    fmt.Println(zeroTime) // 1643299200\n}\n\n\n\n# GetNightTimestamp\n\n获取午夜时间戳(timestamp of 23:59).\n\n函数签名:\n\nfunc GetNightTimestamp() int64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    nightTime := datetime.GetNightTimestamp()\n    fmt.Println(nightTime) // 1643385599\n}\n\n\n\n# FormatTimeToStr\n\n将日期格式化成字符串，`format` 参数格式参考注1\n\n函数签名:\n\nfunc FormatTimeToStr(t time.Time, format string) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    timeStr := datetime.FormatTimeToStr(now, "yyyy/mm/dd hh:mm:ss")\n    fmt.Println(timeStr) //2022/01/28 16:07:44\n}\n\n\n\n# FormatStrToTime\n\n将字符串格式化成时间，`format` 参数格式参考注1\n\n函数签名:\n\nfunc FormatStrToTime(str, format string) (time.Time, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    time := datetime.FormatStrToTime("2006-01-02 15:04:05", "yyyy/mm/dd hh:mm:ss")\n    fmt.Println(time)\n}\n\n\n\n# NewUnixNow\n\n创建一个当前时间的unix时间戳\n\n函数签名:\n\ntype theTime struct {\n    unix int64\n}\nfunc NewUnixNow() *theTime\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.NewUnixNow()\n    fmt.Println(tm) //&{1647597438}\n}\n\n\n\n# NewUnix\n\n创建一个unix时间戳\n\n函数签名:\n\ntype theTime struct {\n    unix int64\n}\nfunc NewUnix(unix int64) *theTime\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.NewUnix(1647597438)\n    fmt.Println(tm) //&{1647597438}\n}\n\n\n\n# NewFormat\n\n创建一个yyyy-mm-dd hh:mm:ss格式时间字符串的unix时间戳\n\n函数签名:\n\ntype theTime struct {\n    unix int64\n}\nfunc NewFormat(t string) (*theTime, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, err := datetime.NewFormat("2022-03-18 17:04:05")\n    fmt.Println(tm) //&{1647594245}\n}\n\n\n\n# NewISO8601\n\n创建一个iso8601格式时间字符串的unix时间戳\n\n函数签名:\n\ntype theTime struct {\n    unix int64\n}\nfunc NewISO8601(iso8601 string) (*theTime, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, err := datetime.NewISO8601("2006-01-02T15:04:05.999Z")\n    fmt.Println(tm) //&{1136214245}\n}\n\n\n\n# ToUnix\n\n返回unix时间戳\n\n函数签名:\n\nfunc (t *theTime) ToUnix() int64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.NewUnixNow()\n    fmt.Println(tm.ToUnix()) //1647597438\n}\n\n\n\n# ToFormat\n\n返回格式\'yyyy-mm-dd hh:mm:ss\'的日期字符串\n\n函数签名:\n\nfunc (t *theTime) ToFormat() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.NewFormat("2022-03-18 17:04:05")\n    fmt.Println(tm.ToFormat()) //"2022-03-18 17:04:05"\n}\n\n\n\n# ToFormatForTpl\n\n返回tpl格式指定的日期字符串\n\n函数签名:\n\nfunc (t *theTime) ToFormatForTpl(tpl string) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.NewFormat("2022-03-18 17:04:05")\n    ts := tm.ToFormatForTpl("2006/01/02 15:04:05")\n    fmt.Println(ts) //"2022/03/18 17:04:05"\n}\n\n\n\n# ToIso8601\n\n返回iso8601日期字符串\n\n函数签名:\n\nfunc (t *theTime) ToIso8601() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.NewISO8601("2006-01-02T15:04:05.999Z")\n    ts := tm.ToIso8601()\n    fmt.Println(ts) //"2006-01-02T23:04:05+08:00"\n}\n',normalizedContent:'# datetime\n\ndatetime 日期时间处理包，格式化日期，比较日期。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/datetime/datetime.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\n\n\n\n\n# 文档\n\n\n# 注:\n\n 1. 方法 formattimetostr 和 formatstrtotime 中的 format 参数值需要传以下类型之一：\n\n * yyyy-mm-dd hh:mm:ss\n * yyyy-mm-dd hh:mm\n * yyyy-mm-dd hh\n * yyyy-mm-dd\n * yyyy-mm\n * mm-dd\n * dd-mm-yy hh:mm:ss\n * yyyy/mm/dd hh:mm:ss\n * yyyy/mm/dd hh:mm\n * yyyy-mm-dd hh\n * yyyy/mm/dd\n * yyyy/mm\n * mm/dd\n * dd/mm/yy hh:mm:ss\n * yyyy\n * mm\n * hh:mm:ss\n * mm:ss\n\n\n# addday\n\n将日期加/减天数\n\n函数签名:\n\nfunc addday(t time.time, day int64) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n\tafter2days := datetime.addday(now, 2)\n\tbefore2days := datetime.addday(now, -2)\n\n    fmt.println(after2days, before2days)\n}\n\n\n\n# addhour\n\n将日期加/减小时数\n\n函数签名:\n\nfunc addhour(t time.time, hour int64) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    after2hours := datetime.addhour(now, 2)\n    before2hours := datetime.addhour(now, -2)\n\n    fmt.println(after2hours, after2hours)\n}\n\n\n\n# addminute\n\n将日期加/减分钟数\n\n函数签名:\n\nfunc addminute(t time.time, minute int64) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    after2minute := datetime.addminute(now, 2)\n    before2minute := datetime.addminute(now, -2)\n\n    fmt.println(after2minute, before2minute)\n}\n\n\n\n# beginofminute\n\n返回指定时间的分钟开始时间\n\n函数签名:\n\nfunc beginofminute(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofminute(td)\n    fmt.println(bm) //2022-02-15 15:48:00 +0800 cst\n}\n\n\n\n# beginofhour\n\n返回指定时间的小时开始时间\n\n函数签名:\n\nfunc beginofhour(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofhour(td)\n    fmt.println(bm) //2022-02-15 15:00:00 +0800 cst\n}\n\n\n\n# beginofday\n\n返回指定时间的当天开始时间\n\n函数签名:\n\nfunc beginofday(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofday(td)\n    fmt.println(bm) //2022-02-15 00:00:00 +0800 cst\n}\n\n\n\n# beginofweek\n\n返回指定时间的每周开始时间,默认开始时间星期日\n\n函数签名:\n\nfunc beginofweek(t time.time, beginfrom ...time.weekday) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofweek(td)\n    fmt.println(bm) //2022-02-13 00:00:00 +0800 cst\n}\n\n\n\n# beginofmonth\n\n返回指定时间的当月开始时间\n\n函数签名:\n\nfunc beginofmonth(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofmonth(td)\n    fmt.println(bm) //2022-02-01 00:00:00 +0800 cst\n}\n\n\n\n# beginofyear\n\n返回指定时间的当年开始时间\n\n函数签名:\n\nfunc beginofyear(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofyear(td)\n    fmt.println(bm) //2022-01-01 00:00:00 +0800 cst\n}\n\n\n\n# endofminute\n\n返回指定时间的分钟结束时间\n\n函数签名:\n\nfunc endofminute(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofminute(td)\n    fmt.println(bm) //2022-02-15 15:48:59.999999999 +0800 cst\n}\n\n\n\n# endofhour\n\n返回指定时间的小时结束时间\n\n函数签名:\n\nfunc endofhour(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofhour(td)\n    fmt.println(bm) //2022-02-15 15:59:59.999999999 +0800 cst\n}\n\n\n\n# endofday\n\n返回指定时间的当天结束时间.\n\n函数签名:\n\nfunc endofday(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofday(td)\n    fmt.println(bm) //2022-02-15 23:59:59.999999999 +0800 cst\n}\n\n\n\n# endofweek\n\n返回指定时间的星期结束时间,默认结束时间星期六\n\n函数签名:\n\nfunc endofweek(t time.time, endwith ...time.weekday) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofweek(td)\n    fmt.println(bm) //2022-02-19 23:59:59.999999999 +0800 cst\n}\n\n\n\n# endofmonth\n\n返回指定时间的月份结束时间\n\n函数签名:\n\nfunc endofmonth(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofmonth(td)\n    fmt.println(bm) //2022-02-28 23:59:59.999999999 +0800 cst\n}\n\n\n\n# endofyear\n\n返回指定时间的年份结束时间\n\n函数签名:\n\nfunc endofyear(t time.time) time.time\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofyear(td)\n    fmt.println(bm) //2022-12-31 23:59:59.999999999 +0800 cst\n}\n\n\n\n# getnowdate\n\n获取当天日期，返回格式：yyyy-mm-dd\n\n函数签名:\n\nfunc getnowdate() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n\tcurrentdate := datetime.getnowdate()\n    fmt.println(currentdate) // 2022-01-28\n}\n\n\n\n# getnowtime\n\n获取当时时间，返回格式：hh:mm:ss\n\n函数签名:\n\nfunc getnowtime() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    currenttime := datetime.getnowtime()\n    fmt.println(currentdate) // 15:57:33\n}\n\n\n\n# getnowdatetime\n\n获取当时日期和时间，返回格式：yyyy-mm-dd hh:mm:ss.\n\n函数签名:\n\nfunc getnowdatetime() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    current := datetime.getnowdatetime()\n    fmt.println(current) // 2022-01-28 15:59:33\n}\n\n\n\n# getzerohourtimestamp\n\n获取零时时间戳(timestamp of 00:00).\n\n函数签名:\n\nfunc getzerohourtimestamp() int64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    zerotime := datetime.getzerohourtimestamp()\n    fmt.println(zerotime) // 1643299200\n}\n\n\n\n# getnighttimestamp\n\n获取午夜时间戳(timestamp of 23:59).\n\n函数签名:\n\nfunc getnighttimestamp() int64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    nighttime := datetime.getnighttimestamp()\n    fmt.println(nighttime) // 1643385599\n}\n\n\n\n# formattimetostr\n\n将日期格式化成字符串，`format` 参数格式参考注1\n\n函数签名:\n\nfunc formattimetostr(t time.time, format string) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    timestr := datetime.formattimetostr(now, "yyyy/mm/dd hh:mm:ss")\n    fmt.println(timestr) //2022/01/28 16:07:44\n}\n\n\n\n# formatstrtotime\n\n将字符串格式化成时间，`format` 参数格式参考注1\n\n函数签名:\n\nfunc formatstrtotime(str, format string) (time.time, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    time := datetime.formatstrtotime("2006-01-02 15:04:05", "yyyy/mm/dd hh:mm:ss")\n    fmt.println(time)\n}\n\n\n\n# newunixnow\n\n创建一个当前时间的unix时间戳\n\n函数签名:\n\ntype thetime struct {\n    unix int64\n}\nfunc newunixnow() *thetime\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.newunixnow()\n    fmt.println(tm) //&{1647597438}\n}\n\n\n\n# newunix\n\n创建一个unix时间戳\n\n函数签名:\n\ntype thetime struct {\n    unix int64\n}\nfunc newunix(unix int64) *thetime\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.newunix(1647597438)\n    fmt.println(tm) //&{1647597438}\n}\n\n\n\n# newformat\n\n创建一个yyyy-mm-dd hh:mm:ss格式时间字符串的unix时间戳\n\n函数签名:\n\ntype thetime struct {\n    unix int64\n}\nfunc newformat(t string) (*thetime, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, err := datetime.newformat("2022-03-18 17:04:05")\n    fmt.println(tm) //&{1647594245}\n}\n\n\n\n# newiso8601\n\n创建一个iso8601格式时间字符串的unix时间戳\n\n函数签名:\n\ntype thetime struct {\n    unix int64\n}\nfunc newiso8601(iso8601 string) (*thetime, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, err := datetime.newiso8601("2006-01-02t15:04:05.999z")\n    fmt.println(tm) //&{1136214245}\n}\n\n\n\n# tounix\n\n返回unix时间戳\n\n函数签名:\n\nfunc (t *thetime) tounix() int64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.newunixnow()\n    fmt.println(tm.tounix()) //1647597438\n}\n\n\n\n# toformat\n\n返回格式\'yyyy-mm-dd hh:mm:ss\'的日期字符串\n\n函数签名:\n\nfunc (t *thetime) toformat() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.newformat("2022-03-18 17:04:05")\n    fmt.println(tm.toformat()) //"2022-03-18 17:04:05"\n}\n\n\n\n# toformatfortpl\n\n返回tpl格式指定的日期字符串\n\n函数签名:\n\nfunc (t *thetime) toformatfortpl(tpl string) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.newformat("2022-03-18 17:04:05")\n    ts := tm.toformatfortpl("2006/01/02 15:04:05")\n    fmt.println(ts) //"2022/03/18 17:04:05"\n}\n\n\n\n# toiso8601\n\n返回iso8601日期字符串\n\n函数签名:\n\nfunc (t *thetime) toiso8601() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.newiso8601("2006-01-02t15:04:05.999z")\n    ts := tm.toiso8601()\n    fmt.println(ts) //"2006-01-02t23:04:05+08:00"\n}\n',charsets:{cjk:!0}},{title:"Algorithm",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/algorithm/",relativePath:"en/algorithm/README.md",key:"v-3ba32a6b",path:"/en/algorithm/",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:88},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:307},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:378},{level:3,title:"BubbleSort",slug:"bubblesort",normalizedTitle:"bubblesort",charIndex:396},{level:3,title:"InsertionSort",slug:"insertionsort",normalizedTitle:"insertionsort",charIndex:1198},{level:3,title:"SelectionSort",slug:"selectionsort",normalizedTitle:"selectionsort",charIndex:2573},{level:3,title:"ShellSort",slug:"shellsort",normalizedTitle:"shellsort",charIndex:3387},{level:3,title:"QuickSort",slug:"quicksort",normalizedTitle:"quicksort",charIndex:4185},{level:3,title:"HeapSort",slug:"heapsort",normalizedTitle:"heapsort",charIndex:4982},{level:3,title:"MergeSort",slug:"mergesort",normalizedTitle:"mergesort",charIndex:5776},{level:3,title:"CountSort",slug:"countsort",normalizedTitle:"countsort",charIndex:6574},{level:3,title:"BinarySearch",slug:"binarysearch",normalizedTitle:"binarysearch",charIndex:7394},{level:3,title:"BinaryIterativeSearch",slug:"binaryiterativesearch",normalizedTitle:"binaryiterativesearch",charIndex:8484},{level:3,title:"LinearSearch",slug:"linearsearch",normalizedTitle:"linearsearch",charIndex:9619},{level:3,title:"LRUCache",slug:"lrucache",normalizedTitle:"lrucache",charIndex:10621}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source Usage Documentation BubbleSort InsertionSort SelectionSort ShellSort QuickSort HeapSort MergeSort CountSort BinarySearch BinaryIterativeSearch LinearSearch LRUCache",content:'# Algorithm\n\nPackage algorithm implements some basic algorithm. eg. sort, search.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/algorithm/sort.go\n * https://github.com/duke-git/lancet/blob/main/algorithm/search.go\n * https://github.com/duke-git/lancet/blob/main/algorithm/lru_cache.go\n\n\n\n\n# Usage\n\nimport (\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\n\n\n\n\n# Documentation\n\n\n# BubbleSort\n\nSort slice with bubble sort algorithm. Param comparator should implements lancetconstraints.Comparator.\n\nSignature:\n\nfunc BubbleSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.BubbleSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# InsertionSort\n\nSort slice with insertion sort algorithm. Param comparator should implements lancetconstraints.Comparator.\n\nSignature:\n\nfunc InsertionSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type people struct {\n        Name string\n        Age  int\n    }\n\n    // PeopleAageComparator sort people slice by age field\n    type peopleAgeComparator struct{}\n\n    // Compare implements github.com/duke-git/lancet/lancetconstraints/constraints.go/Comparator\n    func (pc *peopleAgeComparator) Compare(v1 any, v2 any) int {\n        p1, _ := v1.(people)\n        p2, _ := v2.(people)\n\n        //ascending order\n        if p1.Age < p2.Age {\n            return -1\n        } else if p1.Age > p2.Age {\n            return 1\n        }\n        return 0\n\n        //decending order\n        // if p1.Age > p2.Age {\n        // \treturn -1\n        // } else if p1.Age < p2.Age {\n        // \treturn 1\n        // }\n    }\n\n    var peoples = []people{\n        {Name: "a", Age: 20},\n        {Name: "b", Age: 10},\n        {Name: "c", Age: 17},\n        {Name: "d", Age: 8},\n        {Name: "e", Age: 28},\n    }\n    comparator := &peopleAgeComparator{}\n    algorithm.InsertionSort(peoples, comparator)\n\n    fmt.Println(peoples) //[{d 8} {b 10} {c 17} {a 20} {e 28}]\n}\n\n\n\n# SelectionSort\n\nSort slice with selection sort algorithm. Param comparator should implements lancetconstraints.Comparator.\n\nSignature:\n\nfunc SelectionSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.SelectionSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# ShellSort\n\nSort slice with shell sort algorithm. Param comparator should implements lancetconstraints.Comparator.\n\nSignature:\n\nfunc ShellSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.ShellSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# QuickSort\n\nSort slice with quick sort algorithm. Param comparator should implements lancetconstraints.Comparator.\n\nSignature:\n\nfunc QuickSort[T any](slice []T comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.QuickSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# HeapSort\n\nSort slice with heap sort algorithm. Param comparator should implements lancetconstraints.Comparator.\n\nSignature:\n\nfunc HeapSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.HeapSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# MergeSort\n\nSort slice with merge sort algorithm. Param comparator should implements lancetconstraints.Comparator.\n\nSignature:\n\nfunc MergeSort[T any](slice []T, comparator lancetconstraints.Comparator)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    algorithm.MergeSort(intSlice, comparator)\n\n    fmt.Println(intSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# CountSort\n\nSort slice with count sort algorithm. Param comparator should implements lancetconstraints.Comparator.\n\nSignature:\n\nfunc CountSort[T any](slice []T, comparator lancetconstraints.Comparator) []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    sortedSlice := algorithm.CountSort(intSlice, comparator)\n\n    fmt.Println(sortedSlice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# BinarySearch\n\nBinarySearch search for target within a sorted slice, recursive call itself. If a target is found, the index of the target is returned. Else the function return -1.\n\nSignature:\n\nfunc BinarySearch[T any](sortedSlice []T, target T, lowIndex, highIndex int, comparator lancetconstraints.Comparator) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    var sortedNumbers = []int{1, 2, 3, 4, 5, 6, 7, 8}\n    comparator := &intComparator{}\n    foundIndex := algorithm.BinarySearch(sortedNumbers, 5, 0, len(sortedNumbers)-1, comparator)\n    fmt.Println(foundIndex) //4\n\n    notFoundIndex := algorithm.BinarySearch(sortedNumbers, 9, 0, len(sortedNumbers)-1, comparator)\n    fmt.Println(notFoundIndex) //-1\n}\n\n\n\n# BinaryIterativeSearch\n\nBinaryIterativeSearch search for target within a sorted slice, recursive call itself. If a target is found, the index of the target is returned. Else the function return -1.\n\nSignature:\n\nfunc BinaryIterativeSearch[T any](sortedSlice []T, target T, lowIndex, highIndex int, comparator lancetconstraints.Comparator) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    var sortedNumbers = []int{1, 2, 3, 4, 5, 6, 7, 8}\n    comparator := &intComparator{}\n    foundIndex := algorithm.BinaryIterativeSearch(sortedNumbers, 5, 0, len(sortedNumbers)-1, comparator)\n    fmt.Println(foundIndex) //4\n\n    notFoundIndex := algorithm.BinaryIterativeSearch(sortedNumbers, 9, 0, len(sortedNumbers)-1, comparator)\n    fmt.Println(notFoundIndex) //-1\n}\n\n\n\n# LinearSearch\n\nLinearSearch Simple linear search algorithm that iterates over all elements of an slice. If a target is found, the index of the target is returned. Else the function return -1.\n\nSignature:\n\nfunc LinearSearch[T any](slice []T, target T, comparator lancetconstraints.Comparator) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intComparator struct{}\n\n    func (c *intComparator) Compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intSlice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intComparator{}\n    foundIndex := algorithm.LinearSearch(intSlice, 5, comparator)\n    fmt.Println(foundIndex) //2\n\n    notFoundIndex := algorithm.LinearSearch(sortedNumbers, 0, comparator)\n    fmt.Println(notFoundIndex) //-1\n}\n\n\n\n# LRUCache\n\nLRUCache implements mem cache with lru.\n\nSignature:\n\nfunc NewLRUCache[K comparable, V any](capacity int) *LRUCache[K, V]\nfunc (l *LRUCache[K, V]) Get(key K) (V, bool)\nfunc (l *LRUCache[K, V]) Put(key K, value V)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    cache := algorithm.NewLRUCache[int, int](2)\n\n    cache.Put(1, 1)\n    cache.Put(2, 2)\n\n    _, ok := cache.Get(0) // ok -> false\n\n    v, ok := cache.Get(1) // v->1, ok->true\n\n}\n',normalizedContent:'# algorithm\n\npackage algorithm implements some basic algorithm. eg. sort, search.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/algorithm/sort.go\n * https://github.com/duke-git/lancet/blob/main/algorithm/search.go\n * https://github.com/duke-git/lancet/blob/main/algorithm/lru_cache.go\n\n\n\n\n# usage\n\nimport (\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\n\n\n\n\n# documentation\n\n\n# bubblesort\n\nsort slice with bubble sort algorithm. param comparator should implements lancetconstraints.comparator.\n\nsignature:\n\nfunc bubblesort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.bubblesort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# insertionsort\n\nsort slice with insertion sort algorithm. param comparator should implements lancetconstraints.comparator.\n\nsignature:\n\nfunc insertionsort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type people struct {\n        name string\n        age  int\n    }\n\n    // peopleaagecomparator sort people slice by age field\n    type peopleagecomparator struct{}\n\n    // compare implements github.com/duke-git/lancet/lancetconstraints/constraints.go/comparator\n    func (pc *peopleagecomparator) compare(v1 any, v2 any) int {\n        p1, _ := v1.(people)\n        p2, _ := v2.(people)\n\n        //ascending order\n        if p1.age < p2.age {\n            return -1\n        } else if p1.age > p2.age {\n            return 1\n        }\n        return 0\n\n        //decending order\n        // if p1.age > p2.age {\n        // \treturn -1\n        // } else if p1.age < p2.age {\n        // \treturn 1\n        // }\n    }\n\n    var peoples = []people{\n        {name: "a", age: 20},\n        {name: "b", age: 10},\n        {name: "c", age: 17},\n        {name: "d", age: 8},\n        {name: "e", age: 28},\n    }\n    comparator := &peopleagecomparator{}\n    algorithm.insertionsort(peoples, comparator)\n\n    fmt.println(peoples) //[{d 8} {b 10} {c 17} {a 20} {e 28}]\n}\n\n\n\n# selectionsort\n\nsort slice with selection sort algorithm. param comparator should implements lancetconstraints.comparator.\n\nsignature:\n\nfunc selectionsort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.selectionsort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# shellsort\n\nsort slice with shell sort algorithm. param comparator should implements lancetconstraints.comparator.\n\nsignature:\n\nfunc shellsort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.shellsort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# quicksort\n\nsort slice with quick sort algorithm. param comparator should implements lancetconstraints.comparator.\n\nsignature:\n\nfunc quicksort[t any](slice []t comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.quicksort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# heapsort\n\nsort slice with heap sort algorithm. param comparator should implements lancetconstraints.comparator.\n\nsignature:\n\nfunc heapsort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.heapsort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# mergesort\n\nsort slice with merge sort algorithm. param comparator should implements lancetconstraints.comparator.\n\nsignature:\n\nfunc mergesort[t any](slice []t, comparator lancetconstraints.comparator)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    algorithm.mergesort(intslice, comparator)\n\n    fmt.println(intslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# countsort\n\nsort slice with count sort algorithm. param comparator should implements lancetconstraints.comparator.\n\nsignature:\n\nfunc countsort[t any](slice []t, comparator lancetconstraints.comparator) []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    sortedslice := algorithm.countsort(intslice, comparator)\n\n    fmt.println(sortedslice) //[]int{1, 2, 3, 4, 5, 6}\n}\n\n\n\n# binarysearch\n\nbinarysearch search for target within a sorted slice, recursive call itself. if a target is found, the index of the target is returned. else the function return -1.\n\nsignature:\n\nfunc binarysearch[t any](sortedslice []t, target t, lowindex, highindex int, comparator lancetconstraints.comparator) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    var sortednumbers = []int{1, 2, 3, 4, 5, 6, 7, 8}\n    comparator := &intcomparator{}\n    foundindex := algorithm.binarysearch(sortednumbers, 5, 0, len(sortednumbers)-1, comparator)\n    fmt.println(foundindex) //4\n\n    notfoundindex := algorithm.binarysearch(sortednumbers, 9, 0, len(sortednumbers)-1, comparator)\n    fmt.println(notfoundindex) //-1\n}\n\n\n\n# binaryiterativesearch\n\nbinaryiterativesearch search for target within a sorted slice, recursive call itself. if a target is found, the index of the target is returned. else the function return -1.\n\nsignature:\n\nfunc binaryiterativesearch[t any](sortedslice []t, target t, lowindex, highindex int, comparator lancetconstraints.comparator) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    var sortednumbers = []int{1, 2, 3, 4, 5, 6, 7, 8}\n    comparator := &intcomparator{}\n    foundindex := algorithm.binaryiterativesearch(sortednumbers, 5, 0, len(sortednumbers)-1, comparator)\n    fmt.println(foundindex) //4\n\n    notfoundindex := algorithm.binaryiterativesearch(sortednumbers, 9, 0, len(sortednumbers)-1, comparator)\n    fmt.println(notfoundindex) //-1\n}\n\n\n\n# linearsearch\n\nlinearsearch simple linear search algorithm that iterates over all elements of an slice. if a target is found, the index of the target is returned. else the function return -1.\n\nsignature:\n\nfunc linearsearch[t any](slice []t, target t, comparator lancetconstraints.comparator) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    type intcomparator struct{}\n\n    func (c *intcomparator) compare(v1 any, v2 any) int {\n        val1, _ := v1.(int)\n        val2, _ := v2.(int)\n\n        //ascending order\n        if val1 < val2 {\n            return -1\n        } else if val1 > val2 {\n            return 1\n        }\n        return 0\n    }\n\n    intslice := []int{2, 1, 5, 3, 6, 4}\n    comparator := &intcomparator{}\n    foundindex := algorithm.linearsearch(intslice, 5, comparator)\n    fmt.println(foundindex) //2\n\n    notfoundindex := algorithm.linearsearch(sortednumbers, 0, comparator)\n    fmt.println(notfoundindex) //-1\n}\n\n\n\n# lrucache\n\nlrucache implements mem cache with lru.\n\nsignature:\n\nfunc newlrucache[k comparable, v any](capacity int) *lrucache[k, v]\nfunc (l *lrucache[k, v]) get(key k) (v, bool)\nfunc (l *lrucache[k, v]) put(key k, value v)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/algorithm"\n)\n\nfunc main() {\n    cache := algorithm.newlrucache[int, int](2)\n\n    cache.put(1, 1)\n    cache.put(2, 2)\n\n    _, ok := cache.get(0) // ok -> false\n\n    v, ok := cache.get(1) // v->1, ok->true\n\n}\n',charsets:{}},{title:"Home",frontmatter:{home:!0,sidebar:!1,heroImage:"/logo.png",actionText:"快速上手 →",actionLink:"/algorithm/",features:[{title:"comprehensive",details:"👏 Comprehensive, efficient and reusable."},{title:"support",details:"💪 300+ go util functions, support string, slice, datetime, net, crypt..."},{title:"library",details:"💅 Only depend on the go standard library."},{title:"Unit test",details:"🌍 Unit test for every exported function."}]},regularPath:"/en/",relativePath:"en/README.md",key:"v-bb5bdf2a",path:"/en/",lastUpdated:"9/29/2022, 1:46:25 PM",lastUpdatedTimestamp:1664430385e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Convertor",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/concurrency/",relativePath:"en/concurrency/README.md",key:"v-6c0207eb",path:"/en/concurrency/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:87},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:173},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:245},{level:3,title:"ColorHexToRGB",slug:"colorhextorgb",normalizedTitle:"colorhextorgb",charIndex:263},{level:3,title:"ColorRGBToHex",slug:"colorrgbtohex",normalizedTitle:"colorrgbtohex",charIndex:608},{level:3,title:"ToBool",slug:"tobool",normalizedTitle:"tobool",charIndex:953},{level:3,title:"ToBytes",slug:"tobytes",normalizedTitle:"tobytes",charIndex:1442},{level:3,title:"ToChar",slug:"tochar",normalizedTitle:"tochar",charIndex:1796},{level:3,title:"ToChannel",slug:"tochannel",normalizedTitle:"tochannel",charIndex:2249},{level:3,title:"ToFloat",slug:"tofloat",normalizedTitle:"tofloat",charIndex:2722},{level:3,title:"ToInt",slug:"toint",normalizedTitle:"toint",charIndex:3220},{level:3,title:"ToJson",slug:"tojson",normalizedTitle:"tojson",charIndex:3698},{level:3,title:"ToMap",slug:"tomap",normalizedTitle:"tomap",charIndex:4117},{level:3,title:"ToPointer",slug:"topointer",normalizedTitle:"topointer",charIndex:4750},{level:3,title:"StructToMap",slug:"structtomap",normalizedTitle:"structtomap",charIndex:5028},{level:3,title:"MapToSlice",slug:"maptoslice",normalizedTitle:"maptoslice",charIndex:5586},{level:3,title:"EncodeByte",slug:"encodebyte",normalizedTitle:"encodebyte",charIndex:6094},{level:3,title:"DecodeByte",slug:"decodebyte",normalizedTitle:"decodebyte",charIndex:6410}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation ColorHexToRGB ColorRGBToHex ToBool ToBytes ToChar ToChannel ToFloat ToInt ToJson ToMap ToPointer StructToMap MapToSlice EncodeByte DecodeByte",content:'# Convertor\n\nPackage convertor contains some functions for data type convertion.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/convertor/convertor.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\n\n\n\n\n# Documentation\n\n\n# ColorHexToRGB\n\nConvert color hex to color rgb.\n\nSignature:\n\nfunc ColorHexToRGB(colorHex string) (red, green, blue int)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    colorHex := "#003366"\n    r, g, b := convertor.ColorHexToRGB(colorHex)\n    fmt.Println(r, g, b) //0,51,102\n}\n\n\n\n# ColorRGBToHex\n\nConvert color rgb to color hex.\n\nSignature:\n\nfunc ColorRGBToHex(red, green, blue int) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    r := 0\n    g := 51\n    b := 102\n    colorHex := convertor.ColorRGBToHex(r, g, b)\n\n    fmt.Println(colorHex) //#003366\n}\n\n\n\n# ToBool\n\nConvert string to a boolean value. Use strconv.ParseBool\n\nSignature:\n\nfunc ToBool(s string) (bool, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v1, _ := convertor.ToBool("1")\n    fmt.Println(v1) //true\n\n    v2, _ := convertor.ToBool("true")\n    fmt.Println(v2) //true\n\n    v3, _ := convertor.ToBool("True")\n    fmt.Println(v3) //true\n\n    v4, _ := convertor.ToBool("123")\n    fmt.Println(v4) //false\n}\n\n\n\n# ToBytes\n\nConvert interface to byte slice.\n\nSignature:\n\nfunc ToBytes(data any) ([]byte, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytesData, err := convertor.ToBytes("0")\n    if err != nil {\n        fmt.Println(err)\n    }\n    fmt.Println(bytesData) //[]bytes{3, 4, 0, 0}\n}\n\n\n\n# ToChar\n\nConvert string to char slice.\n\nSignature:\n\nfunc ToChar(s string) []string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    chars := convertor.ToChar("")\n    fmt.Println(chars) //[]string{""}\n\n    chars = convertor.ToChar("abc")\n    fmt.Println(chars) //[]string{"a", "b", "c"}\n\n    chars = convertor.ToChar("1 2#3")\n    fmt.Println(chars) //[]string{"1", " ", "2", "#", "3"}\n}\n\n\n\n# ToChannel\n\nConvert a collection of elements to a read-only channels.\n\nSignature:\n\nfunc ToChannel[T any](array []T) <-chan T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    ch := convertor.ToChannel([]int{1, 2, 3})\n\n    val1, _ := <-ch\n    fmt.Println(val1) //1\n\n    val2, _ := <-ch\n    fmt.Println(val2) //2\n\n    val3, _ := <-ch\n    fmt.Println(val3) //3\n\n    _, ok := <-ch\n    fmt.Println(ok) //false\n}\n\n\n\n# ToFloat\n\nConvert interface to a float64 value. If param is a invalid floatable, will return 0 and error.\n\nSignature:\n\nfunc ToFloat(value any) (float64, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.ToFloat("")\n    if err != nil {\n        fmt.Println(err) //strconv.ParseFloat: parsing "": invalid syntax\n    }\n    fmt.Println(v) //0\n\n    v, _ = convertor.ToFloat("-.11")\n    fmt.Println(v) //-0.11\n}\n\n\n\n# ToInt\n\nConvert interface to a int64 value. If param is a invalid intable, will return 0 and error.\n\nSignature:\n\nfunc ToInt(value any) (int64, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.ToInt("")\n    if err != nil {\n        fmt.Println(err) //strconv.ParseInt: parsing "": invalid syntax\n    }\n    fmt.Println(v) //0\n\n    v, _ = convertor.ToFloat(1.12)\n    fmt.Println(v) //1\n}\n\n\n\n# ToJson\n\nConvert interface to json string. If param can\'t be converted, will return "" and error.\n\nSignature:\n\nfunc ToJson(value any) (string, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var aMap = map[string]int{"a": 1, "b": 2, "c": 3}\n    jsonStr, _ := convertor.ToJson(aMap)\n    fmt.Printf("%q", jsonStr) //"{\\"a\\":1,\\"b\\":2,\\"c\\":3}"\n}\n\n\n\n# ToMap\n\nConvert a slice or an array of structs to a map based on iteratee function.\n\nSignature:\n\nfunc ToMap[T any, K comparable, V any](array []T, iteratee func(T) (K, V)) map[K]V\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type Message struct {\n        name string\n        code int\n    }\n    messages := []Message{\n        {name: "Hello", code: 100},\n        {name: "Hi", code: 101},\n    }\n    result := convertor.ToMap(messages, func(msg Message) (int, string) {\n        return msg.code, msg.name\n    })\n\n    fmt.Println(result) //{100: "Hello", 101: "Hi"}\n}\n\n\n\n# ToPointer\n\nReturns a pointer to passed value.\n\nSignature:\n\nfunc ToPointer[T any](value T) *T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    result := convertor.ToPointer(123)\n    fmt.Println(*result) //123\n}\n\n\n\n# StructToMap\n\nConvert struct to map, only convert exported field, struct field tag `json` should be set.\n\nSignature:\n\nfunc StructToMap(value any) (map[string]any, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type People struct {\n        Name string `json:"name"`\n        age  int\n    }\n    p := People{\n        "test",\n        100,\n    }\n    pm, _ := convertor.StructToMap(p)\n\n    fmt.Printf("type: %T, value: %s", pm, pm) //type: map[string]interface {}, value: map[name:test]\n}\n\n\n\n# MapToSlice\n\nConvert a map to a slice based on iteratee function.\n\nSignature:\n\nfunc MapToSlice[T any, K comparable, V any](aMap map[K]V, iteratee func(K, V) T) []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    aMap := map[string]int{"a": 1, "b": 2, "c": 3}\n    result := MapToSlice(aMap, func(key string, value int) string {\n        return key + ":" + strconv.Itoa(value)\n    })\n\n    fmt.Println(result) //[]string{"a:1", "b:2", "c:3"}\n}\n\n\n\n# EncodeByte\n\nEncode data to byte slice.\n\nSignature:\n\nfunc EncodeByte(data any) ([]byte, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    byteData, _ := convertor.EncodeByte("abc")\n    fmt.Println(byteData) //[]byte{6, 12, 0, 3, 97, 98, 99}\n}\n\n\n\n# DecodeByte\n\nDecode byte data to target object. target should be a pointer instance.\n\nSignature:\n\nfunc DecodeByte(data []byte, target any) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var result string\n\tbyteData := []byte{6, 12, 0, 3, 97, 98, 99}\n\tconvertor.DecodeByte(byteData, &result)\n    fmt.Println(result) //"abc"\n}\n',normalizedContent:'# convertor\n\npackage convertor contains some functions for data type convertion.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/convertor/convertor.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\n\n\n\n\n# documentation\n\n\n# colorhextorgb\n\nconvert color hex to color rgb.\n\nsignature:\n\nfunc colorhextorgb(colorhex string) (red, green, blue int)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    colorhex := "#003366"\n    r, g, b := convertor.colorhextorgb(colorhex)\n    fmt.println(r, g, b) //0,51,102\n}\n\n\n\n# colorrgbtohex\n\nconvert color rgb to color hex.\n\nsignature:\n\nfunc colorrgbtohex(red, green, blue int) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    r := 0\n    g := 51\n    b := 102\n    colorhex := convertor.colorrgbtohex(r, g, b)\n\n    fmt.println(colorhex) //#003366\n}\n\n\n\n# tobool\n\nconvert string to a boolean value. use strconv.parsebool\n\nsignature:\n\nfunc tobool(s string) (bool, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v1, _ := convertor.tobool("1")\n    fmt.println(v1) //true\n\n    v2, _ := convertor.tobool("true")\n    fmt.println(v2) //true\n\n    v3, _ := convertor.tobool("true")\n    fmt.println(v3) //true\n\n    v4, _ := convertor.tobool("123")\n    fmt.println(v4) //false\n}\n\n\n\n# tobytes\n\nconvert interface to byte slice.\n\nsignature:\n\nfunc tobytes(data any) ([]byte, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytesdata, err := convertor.tobytes("0")\n    if err != nil {\n        fmt.println(err)\n    }\n    fmt.println(bytesdata) //[]bytes{3, 4, 0, 0}\n}\n\n\n\n# tochar\n\nconvert string to char slice.\n\nsignature:\n\nfunc tochar(s string) []string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    chars := convertor.tochar("")\n    fmt.println(chars) //[]string{""}\n\n    chars = convertor.tochar("abc")\n    fmt.println(chars) //[]string{"a", "b", "c"}\n\n    chars = convertor.tochar("1 2#3")\n    fmt.println(chars) //[]string{"1", " ", "2", "#", "3"}\n}\n\n\n\n# tochannel\n\nconvert a collection of elements to a read-only channels.\n\nsignature:\n\nfunc tochannel[t any](array []t) <-chan t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    ch := convertor.tochannel([]int{1, 2, 3})\n\n    val1, _ := <-ch\n    fmt.println(val1) //1\n\n    val2, _ := <-ch\n    fmt.println(val2) //2\n\n    val3, _ := <-ch\n    fmt.println(val3) //3\n\n    _, ok := <-ch\n    fmt.println(ok) //false\n}\n\n\n\n# tofloat\n\nconvert interface to a float64 value. if param is a invalid floatable, will return 0 and error.\n\nsignature:\n\nfunc tofloat(value any) (float64, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.tofloat("")\n    if err != nil {\n        fmt.println(err) //strconv.parsefloat: parsing "": invalid syntax\n    }\n    fmt.println(v) //0\n\n    v, _ = convertor.tofloat("-.11")\n    fmt.println(v) //-0.11\n}\n\n\n\n# toint\n\nconvert interface to a int64 value. if param is a invalid intable, will return 0 and error.\n\nsignature:\n\nfunc toint(value any) (int64, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.toint("")\n    if err != nil {\n        fmt.println(err) //strconv.parseint: parsing "": invalid syntax\n    }\n    fmt.println(v) //0\n\n    v, _ = convertor.tofloat(1.12)\n    fmt.println(v) //1\n}\n\n\n\n# tojson\n\nconvert interface to json string. if param can\'t be converted, will return "" and error.\n\nsignature:\n\nfunc tojson(value any) (string, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var amap = map[string]int{"a": 1, "b": 2, "c": 3}\n    jsonstr, _ := convertor.tojson(amap)\n    fmt.printf("%q", jsonstr) //"{\\"a\\":1,\\"b\\":2,\\"c\\":3}"\n}\n\n\n\n# tomap\n\nconvert a slice or an array of structs to a map based on iteratee function.\n\nsignature:\n\nfunc tomap[t any, k comparable, v any](array []t, iteratee func(t) (k, v)) map[k]v\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type message struct {\n        name string\n        code int\n    }\n    messages := []message{\n        {name: "hello", code: 100},\n        {name: "hi", code: 101},\n    }\n    result := convertor.tomap(messages, func(msg message) (int, string) {\n        return msg.code, msg.name\n    })\n\n    fmt.println(result) //{100: "hello", 101: "hi"}\n}\n\n\n\n# topointer\n\nreturns a pointer to passed value.\n\nsignature:\n\nfunc topointer[t any](value t) *t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    result := convertor.topointer(123)\n    fmt.println(*result) //123\n}\n\n\n\n# structtomap\n\nconvert struct to map, only convert exported field, struct field tag `json` should be set.\n\nsignature:\n\nfunc structtomap(value any) (map[string]any, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type people struct {\n        name string `json:"name"`\n        age  int\n    }\n    p := people{\n        "test",\n        100,\n    }\n    pm, _ := convertor.structtomap(p)\n\n    fmt.printf("type: %t, value: %s", pm, pm) //type: map[string]interface {}, value: map[name:test]\n}\n\n\n\n# maptoslice\n\nconvert a map to a slice based on iteratee function.\n\nsignature:\n\nfunc maptoslice[t any, k comparable, v any](amap map[k]v, iteratee func(k, v) t) []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    amap := map[string]int{"a": 1, "b": 2, "c": 3}\n    result := maptoslice(amap, func(key string, value int) string {\n        return key + ":" + strconv.itoa(value)\n    })\n\n    fmt.println(result) //[]string{"a:1", "b:2", "c:3"}\n}\n\n\n\n# encodebyte\n\nencode data to byte slice.\n\nsignature:\n\nfunc encodebyte(data any) ([]byte, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytedata, _ := convertor.encodebyte("abc")\n    fmt.println(bytedata) //[]byte{6, 12, 0, 3, 97, 98, 99}\n}\n\n\n\n# decodebyte\n\ndecode byte data to target object. target should be a pointer instance.\n\nsignature:\n\nfunc decodebyte(data []byte, target any) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var result string\n\tbytedata := []byte{6, 12, 0, 3, 97, 98, 99}\n\tconvertor.decodebyte(bytedata, &result)\n    fmt.println(result) //"abc"\n}\n',charsets:{}},{title:"Convertor",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/convertor/",relativePath:"en/convertor/README.md",key:"v-404af24b",path:"/en/convertor/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:87},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:173},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:245},{level:3,title:"ColorHexToRGB",slug:"colorhextorgb",normalizedTitle:"colorhextorgb",charIndex:263},{level:3,title:"ColorRGBToHex",slug:"colorrgbtohex",normalizedTitle:"colorrgbtohex",charIndex:608},{level:3,title:"ToBool",slug:"tobool",normalizedTitle:"tobool",charIndex:953},{level:3,title:"ToBytes",slug:"tobytes",normalizedTitle:"tobytes",charIndex:1442},{level:3,title:"ToChar",slug:"tochar",normalizedTitle:"tochar",charIndex:1796},{level:3,title:"ToChannel",slug:"tochannel",normalizedTitle:"tochannel",charIndex:2249},{level:3,title:"ToFloat",slug:"tofloat",normalizedTitle:"tofloat",charIndex:2722},{level:3,title:"ToInt",slug:"toint",normalizedTitle:"toint",charIndex:3220},{level:3,title:"ToJson",slug:"tojson",normalizedTitle:"tojson",charIndex:3698},{level:3,title:"ToMap",slug:"tomap",normalizedTitle:"tomap",charIndex:4117},{level:3,title:"ToPointer",slug:"topointer",normalizedTitle:"topointer",charIndex:4750},{level:3,title:"StructToMap",slug:"structtomap",normalizedTitle:"structtomap",charIndex:5028},{level:3,title:"MapToSlice",slug:"maptoslice",normalizedTitle:"maptoslice",charIndex:5586},{level:3,title:"EncodeByte",slug:"encodebyte",normalizedTitle:"encodebyte",charIndex:6094},{level:3,title:"DecodeByte",slug:"decodebyte",normalizedTitle:"decodebyte",charIndex:6410}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation ColorHexToRGB ColorRGBToHex ToBool ToBytes ToChar ToChannel ToFloat ToInt ToJson ToMap ToPointer StructToMap MapToSlice EncodeByte DecodeByte",content:'# Convertor\n\nPackage convertor contains some functions for data type convertion.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/convertor/convertor.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\n\n\n\n\n# Documentation\n\n\n# ColorHexToRGB\n\nConvert color hex to color rgb.\n\nSignature:\n\nfunc ColorHexToRGB(colorHex string) (red, green, blue int)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    colorHex := "#003366"\n    r, g, b := convertor.ColorHexToRGB(colorHex)\n    fmt.Println(r, g, b) //0,51,102\n}\n\n\n\n# ColorRGBToHex\n\nConvert color rgb to color hex.\n\nSignature:\n\nfunc ColorRGBToHex(red, green, blue int) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    r := 0\n    g := 51\n    b := 102\n    colorHex := convertor.ColorRGBToHex(r, g, b)\n\n    fmt.Println(colorHex) //#003366\n}\n\n\n\n# ToBool\n\nConvert string to a boolean value. Use strconv.ParseBool\n\nSignature:\n\nfunc ToBool(s string) (bool, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v1, _ := convertor.ToBool("1")\n    fmt.Println(v1) //true\n\n    v2, _ := convertor.ToBool("true")\n    fmt.Println(v2) //true\n\n    v3, _ := convertor.ToBool("True")\n    fmt.Println(v3) //true\n\n    v4, _ := convertor.ToBool("123")\n    fmt.Println(v4) //false\n}\n\n\n\n# ToBytes\n\nConvert interface to byte slice.\n\nSignature:\n\nfunc ToBytes(data any) ([]byte, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytesData, err := convertor.ToBytes("0")\n    if err != nil {\n        fmt.Println(err)\n    }\n    fmt.Println(bytesData) //[]bytes{3, 4, 0, 0}\n}\n\n\n\n# ToChar\n\nConvert string to char slice.\n\nSignature:\n\nfunc ToChar(s string) []string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    chars := convertor.ToChar("")\n    fmt.Println(chars) //[]string{""}\n\n    chars = convertor.ToChar("abc")\n    fmt.Println(chars) //[]string{"a", "b", "c"}\n\n    chars = convertor.ToChar("1 2#3")\n    fmt.Println(chars) //[]string{"1", " ", "2", "#", "3"}\n}\n\n\n\n# ToChannel\n\nConvert a collection of elements to a read-only channels.\n\nSignature:\n\nfunc ToChannel[T any](array []T) <-chan T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    ch := convertor.ToChannel([]int{1, 2, 3})\n\n    val1, _ := <-ch\n    fmt.Println(val1) //1\n\n    val2, _ := <-ch\n    fmt.Println(val2) //2\n\n    val3, _ := <-ch\n    fmt.Println(val3) //3\n\n    _, ok := <-ch\n    fmt.Println(ok) //false\n}\n\n\n\n# ToFloat\n\nConvert interface to a float64 value. If param is a invalid floatable, will return 0 and error.\n\nSignature:\n\nfunc ToFloat(value any) (float64, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.ToFloat("")\n    if err != nil {\n        fmt.Println(err) //strconv.ParseFloat: parsing "": invalid syntax\n    }\n    fmt.Println(v) //0\n\n    v, _ = convertor.ToFloat("-.11")\n    fmt.Println(v) //-0.11\n}\n\n\n\n# ToInt\n\nConvert interface to a int64 value. If param is a invalid intable, will return 0 and error.\n\nSignature:\n\nfunc ToInt(value any) (int64, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.ToInt("")\n    if err != nil {\n        fmt.Println(err) //strconv.ParseInt: parsing "": invalid syntax\n    }\n    fmt.Println(v) //0\n\n    v, _ = convertor.ToFloat(1.12)\n    fmt.Println(v) //1\n}\n\n\n\n# ToJson\n\nConvert interface to json string. If param can\'t be converted, will return "" and error.\n\nSignature:\n\nfunc ToJson(value any) (string, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var aMap = map[string]int{"a": 1, "b": 2, "c": 3}\n    jsonStr, _ := convertor.ToJson(aMap)\n    fmt.Printf("%q", jsonStr) //"{\\"a\\":1,\\"b\\":2,\\"c\\":3}"\n}\n\n\n\n# ToMap\n\nConvert a slice or an array of structs to a map based on iteratee function.\n\nSignature:\n\nfunc ToMap[T any, K comparable, V any](array []T, iteratee func(T) (K, V)) map[K]V\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type Message struct {\n        name string\n        code int\n    }\n    messages := []Message{\n        {name: "Hello", code: 100},\n        {name: "Hi", code: 101},\n    }\n    result := convertor.ToMap(messages, func(msg Message) (int, string) {\n        return msg.code, msg.name\n    })\n\n    fmt.Println(result) //{100: "Hello", 101: "Hi"}\n}\n\n\n\n# ToPointer\n\nReturns a pointer to passed value.\n\nSignature:\n\nfunc ToPointer[T any](value T) *T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    result := convertor.ToPointer(123)\n    fmt.Println(*result) //123\n}\n\n\n\n# StructToMap\n\nConvert struct to map, only convert exported field, struct field tag `json` should be set.\n\nSignature:\n\nfunc StructToMap(value any) (map[string]any, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type People struct {\n        Name string `json:"name"`\n        age  int\n    }\n    p := People{\n        "test",\n        100,\n    }\n    pm, _ := convertor.StructToMap(p)\n\n    fmt.Printf("type: %T, value: %s", pm, pm) //type: map[string]interface {}, value: map[name:test]\n}\n\n\n\n# MapToSlice\n\nConvert a map to a slice based on iteratee function.\n\nSignature:\n\nfunc MapToSlice[T any, K comparable, V any](aMap map[K]V, iteratee func(K, V) T) []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    aMap := map[string]int{"a": 1, "b": 2, "c": 3}\n    result := MapToSlice(aMap, func(key string, value int) string {\n        return key + ":" + strconv.Itoa(value)\n    })\n\n    fmt.Println(result) //[]string{"a:1", "b:2", "c:3"}\n}\n\n\n\n# EncodeByte\n\nEncode data to byte slice.\n\nSignature:\n\nfunc EncodeByte(data any) ([]byte, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    byteData, _ := convertor.EncodeByte("abc")\n    fmt.Println(byteData) //[]byte{6, 12, 0, 3, 97, 98, 99}\n}\n\n\n\n# DecodeByte\n\nDecode byte data to target object. target should be a pointer instance.\n\nSignature:\n\nfunc DecodeByte(data []byte, target any) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var result string\n\tbyteData := []byte{6, 12, 0, 3, 97, 98, 99}\n\tconvertor.DecodeByte(byteData, &result)\n    fmt.Println(result) //"abc"\n}\n',normalizedContent:'# convertor\n\npackage convertor contains some functions for data type convertion.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/convertor/convertor.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\n\n\n\n\n# documentation\n\n\n# colorhextorgb\n\nconvert color hex to color rgb.\n\nsignature:\n\nfunc colorhextorgb(colorhex string) (red, green, blue int)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    colorhex := "#003366"\n    r, g, b := convertor.colorhextorgb(colorhex)\n    fmt.println(r, g, b) //0,51,102\n}\n\n\n\n# colorrgbtohex\n\nconvert color rgb to color hex.\n\nsignature:\n\nfunc colorrgbtohex(red, green, blue int) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    r := 0\n    g := 51\n    b := 102\n    colorhex := convertor.colorrgbtohex(r, g, b)\n\n    fmt.println(colorhex) //#003366\n}\n\n\n\n# tobool\n\nconvert string to a boolean value. use strconv.parsebool\n\nsignature:\n\nfunc tobool(s string) (bool, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v1, _ := convertor.tobool("1")\n    fmt.println(v1) //true\n\n    v2, _ := convertor.tobool("true")\n    fmt.println(v2) //true\n\n    v3, _ := convertor.tobool("true")\n    fmt.println(v3) //true\n\n    v4, _ := convertor.tobool("123")\n    fmt.println(v4) //false\n}\n\n\n\n# tobytes\n\nconvert interface to byte slice.\n\nsignature:\n\nfunc tobytes(data any) ([]byte, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytesdata, err := convertor.tobytes("0")\n    if err != nil {\n        fmt.println(err)\n    }\n    fmt.println(bytesdata) //[]bytes{3, 4, 0, 0}\n}\n\n\n\n# tochar\n\nconvert string to char slice.\n\nsignature:\n\nfunc tochar(s string) []string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    chars := convertor.tochar("")\n    fmt.println(chars) //[]string{""}\n\n    chars = convertor.tochar("abc")\n    fmt.println(chars) //[]string{"a", "b", "c"}\n\n    chars = convertor.tochar("1 2#3")\n    fmt.println(chars) //[]string{"1", " ", "2", "#", "3"}\n}\n\n\n\n# tochannel\n\nconvert a collection of elements to a read-only channels.\n\nsignature:\n\nfunc tochannel[t any](array []t) <-chan t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    ch := convertor.tochannel([]int{1, 2, 3})\n\n    val1, _ := <-ch\n    fmt.println(val1) //1\n\n    val2, _ := <-ch\n    fmt.println(val2) //2\n\n    val3, _ := <-ch\n    fmt.println(val3) //3\n\n    _, ok := <-ch\n    fmt.println(ok) //false\n}\n\n\n\n# tofloat\n\nconvert interface to a float64 value. if param is a invalid floatable, will return 0 and error.\n\nsignature:\n\nfunc tofloat(value any) (float64, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.tofloat("")\n    if err != nil {\n        fmt.println(err) //strconv.parsefloat: parsing "": invalid syntax\n    }\n    fmt.println(v) //0\n\n    v, _ = convertor.tofloat("-.11")\n    fmt.println(v) //-0.11\n}\n\n\n\n# toint\n\nconvert interface to a int64 value. if param is a invalid intable, will return 0 and error.\n\nsignature:\n\nfunc toint(value any) (int64, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    v, err := convertor.toint("")\n    if err != nil {\n        fmt.println(err) //strconv.parseint: parsing "": invalid syntax\n    }\n    fmt.println(v) //0\n\n    v, _ = convertor.tofloat(1.12)\n    fmt.println(v) //1\n}\n\n\n\n# tojson\n\nconvert interface to json string. if param can\'t be converted, will return "" and error.\n\nsignature:\n\nfunc tojson(value any) (string, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var amap = map[string]int{"a": 1, "b": 2, "c": 3}\n    jsonstr, _ := convertor.tojson(amap)\n    fmt.printf("%q", jsonstr) //"{\\"a\\":1,\\"b\\":2,\\"c\\":3}"\n}\n\n\n\n# tomap\n\nconvert a slice or an array of structs to a map based on iteratee function.\n\nsignature:\n\nfunc tomap[t any, k comparable, v any](array []t, iteratee func(t) (k, v)) map[k]v\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type message struct {\n        name string\n        code int\n    }\n    messages := []message{\n        {name: "hello", code: 100},\n        {name: "hi", code: 101},\n    }\n    result := convertor.tomap(messages, func(msg message) (int, string) {\n        return msg.code, msg.name\n    })\n\n    fmt.println(result) //{100: "hello", 101: "hi"}\n}\n\n\n\n# topointer\n\nreturns a pointer to passed value.\n\nsignature:\n\nfunc topointer[t any](value t) *t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    result := convertor.topointer(123)\n    fmt.println(*result) //123\n}\n\n\n\n# structtomap\n\nconvert struct to map, only convert exported field, struct field tag `json` should be set.\n\nsignature:\n\nfunc structtomap(value any) (map[string]any, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    type people struct {\n        name string `json:"name"`\n        age  int\n    }\n    p := people{\n        "test",\n        100,\n    }\n    pm, _ := convertor.structtomap(p)\n\n    fmt.printf("type: %t, value: %s", pm, pm) //type: map[string]interface {}, value: map[name:test]\n}\n\n\n\n# maptoslice\n\nconvert a map to a slice based on iteratee function.\n\nsignature:\n\nfunc maptoslice[t any, k comparable, v any](amap map[k]v, iteratee func(k, v) t) []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    amap := map[string]int{"a": 1, "b": 2, "c": 3}\n    result := maptoslice(amap, func(key string, value int) string {\n        return key + ":" + strconv.itoa(value)\n    })\n\n    fmt.println(result) //[]string{"a:1", "b:2", "c:3"}\n}\n\n\n\n# encodebyte\n\nencode data to byte slice.\n\nsignature:\n\nfunc encodebyte(data any) ([]byte, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    bytedata, _ := convertor.encodebyte("abc")\n    fmt.println(bytedata) //[]byte{6, 12, 0, 3, 97, 98, 99}\n}\n\n\n\n# decodebyte\n\ndecode byte data to target object. target should be a pointer instance.\n\nsignature:\n\nfunc decodebyte(data []byte, target any) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/convertor"\n)\n\nfunc main() {\n    var result string\n\tbytedata := []byte{6, 12, 0, 3, 97, 98, 99}\n\tconvertor.decodebyte(bytedata, &result)\n    fmt.println(result) //"abc"\n}\n',charsets:{}},{title:"HashMap",frontmatter:{},regularPath:"/en/datastructure/hashmap.html",relativePath:"en/datastructure/hashmap.md",key:"v-3024f548",path:"/en/datastructure/hashmap.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:60},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:155},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:246},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:335},{level:3,title:"",slug:"newhashmap",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"newhashmap-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"get",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"put",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"delete",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contains",normalizedTitle:"",charIndex:0}],lastUpdated:"10/22/2022, 11:35:23 AM",lastUpdatedTimestamp:1666409723e3,headersStr:"Source Usage Index Documentation      ",content:'# HashMap\n\nHashMap is a key value map data structure.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/hashmap/hashmap.go\n\n\n\n\n# Usage\n\nimport (\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\n\n\n\n\n# Index\n\n * NewHashMap\n * NewHashMapWithCapacity\n * Get\n * Put\n * Delete\n * Contains\n\n\n\n\n# Documentation\n\n\n# NewHashMap\n\nMake a HashMap instance with default capacity is 1 << 10.\n\nSignature:\n\nfunc NewHashMap() *HashMap\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    fmt.Println(hm)\n}\n\n\n\n# NewHashMap\n\nMake a HashMap instance with given size and capacity.\n\nSignature:\n\nfunc NewHashMapWithCapacity(size, capacity uint64) *HashMap\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMapWithCapacity(uint64(100), uint64(1000))\n    fmt.Println(hm)\n}\n\n\n\n# Get\n\nGet the value of given key in hashmap\n\nSignature:\n\nfunc (hm *HashMap) Get(key any) any\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    val := hm.Get("a")\n\n    fmt.Println(val) //nil\n}\n\n\n\n# Put\n\nPut new key value in hashmap, then return value\n\nSignature:\n\nfunc (hm *HashMap) Put(key any, value any) any\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    hm.Put("a", 1)\n\n    val := hm.Get("a")\n    fmt.Println(val) //1\n}\n\n\n\n# Delete\n\nDelete key-value item by given key in hashmap.\n\nSignature:\n\nfunc (hm *HashMap) Delete(key any)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    hm.Put("a", 1)\n    val := hm.Get("a")\n    fmt.Println(val) //1\n\n    hm.Delete("a")\n    val = hm.Get("a")\n    fmt.Println(val) //nil\n}\n\n\n\n# Contains\n\nChecks if given key is in hashmap or not.\n\nSignature:\n\nfunc (hm *HashMap) Contains(key any) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.NewHashMap()\n    hm.Put("a", 1)\n\n    fmt.Println(hm.Contains("a")) //true\n    fmt.Println(hm.Contains("b")) //false\n}\n',normalizedContent:'# hashmap\n\nhashmap is a key value map data structure.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/hashmap/hashmap.go\n\n\n\n\n# usage\n\nimport (\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\n\n\n\n\n# index\n\n * newhashmap\n * newhashmapwithcapacity\n * get\n * put\n * delete\n * contains\n\n\n\n\n# documentation\n\n\n# newhashmap\n\nmake a hashmap instance with default capacity is 1 << 10.\n\nsignature:\n\nfunc newhashmap() *hashmap\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    fmt.println(hm)\n}\n\n\n\n# newhashmap\n\nmake a hashmap instance with given size and capacity.\n\nsignature:\n\nfunc newhashmapwithcapacity(size, capacity uint64) *hashmap\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmapwithcapacity(uint64(100), uint64(1000))\n    fmt.println(hm)\n}\n\n\n\n# get\n\nget the value of given key in hashmap\n\nsignature:\n\nfunc (hm *hashmap) get(key any) any\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    val := hm.get("a")\n\n    fmt.println(val) //nil\n}\n\n\n\n# put\n\nput new key value in hashmap, then return value\n\nsignature:\n\nfunc (hm *hashmap) put(key any, value any) any\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    hm.put("a", 1)\n\n    val := hm.get("a")\n    fmt.println(val) //1\n}\n\n\n\n# delete\n\ndelete key-value item by given key in hashmap.\n\nsignature:\n\nfunc (hm *hashmap) delete(key any)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    hm.put("a", 1)\n    val := hm.get("a")\n    fmt.println(val) //1\n\n    hm.delete("a")\n    val = hm.get("a")\n    fmt.println(val) //nil\n}\n\n\n\n# contains\n\nchecks if given key is in hashmap or not.\n\nsignature:\n\nfunc (hm *hashmap) contains(key any) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    hashmap "github.com/duke-git/lancet/v2/datastructure/hashmap"\n)\n\nfunc main() {\n    hm := heap.newhashmap()\n    hm.put("a", 1)\n\n    fmt.println(hm.contains("a")) //true\n    fmt.println(hm.contains("b")) //false\n}\n',charsets:{}},{title:"Cryptor",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/cryptor/",relativePath:"en/cryptor/README.md",key:"v-1aad432b",path:"/en/cryptor/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:135},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:404},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:474},{level:3,title:"AesEcbEncrypt",slug:"aesecbencrypt",normalizedTitle:"aesecbencrypt",charIndex:492},{level:3,title:"AesEcbDecrypt",slug:"aesecbdecrypt",normalizedTitle:"aesecbdecrypt",charIndex:926},{level:3,title:"AesCbcEncrypt",slug:"aescbcencrypt",normalizedTitle:"aescbcencrypt",charIndex:1441},{level:3,title:"AesCbcDecrypt",slug:"aescbcdecrypt",normalizedTitle:"aescbcdecrypt",charIndex:1875},{level:3,title:"AesCtrCrypt",slug:"aesctrcrypt",normalizedTitle:"aesctrcrypt",charIndex:2390},{level:3,title:"AesCfbEncrypt",slug:"aescfbencrypt",normalizedTitle:"aescfbencrypt",charIndex:2904},{level:3,title:"AesCfbDecrypt",slug:"aescfbdecrypt",normalizedTitle:"aescfbdecrypt",charIndex:3337},{level:3,title:"AesOfbEncrypt",slug:"aesofbencrypt",normalizedTitle:"aesofbencrypt",charIndex:3852},{level:3,title:"AesOfbDecrypt",slug:"aesofbdecrypt",normalizedTitle:"aesofbdecrypt",charIndex:4286},{level:3,title:"Base64StdEncode",slug:"base64stdencode",normalizedTitle:"base64stdencode",charIndex:4802},{level:3,title:"Base64StdDecode",slug:"base64stddecode",normalizedTitle:"base64stddecode",charIndex:5121},{level:3,title:"DesEcbEncrypt",slug:"desecbencrypt",normalizedTitle:"desecbencrypt",charIndex:5424},{level:3,title:"DesEcbDecrypt",slug:"desecbdecrypt",normalizedTitle:"desecbdecrypt",charIndex:5839},{level:3,title:"DesCbcEncrypt",slug:"descbcencrypt",normalizedTitle:"descbcencrypt",charIndex:6334},{level:3,title:"DesCbcDecrypt",slug:"descbcdecrypt",normalizedTitle:"descbcdecrypt",charIndex:6747},{level:3,title:"DesCtrCrypt",slug:"desctrcrypt",normalizedTitle:"desctrcrypt",charIndex:7239},{level:3,title:"DesCfbEncrypt",slug:"descfbencrypt",normalizedTitle:"descfbencrypt",charIndex:7734},{level:3,title:"DesCfbDecrypt",slug:"descfbdecrypt",normalizedTitle:"descfbdecrypt",charIndex:8146},{level:3,title:"DesOfbEncrypt",slug:"desofbencrypt",normalizedTitle:"desofbencrypt",charIndex:8640},{level:3,title:"DesOfbDecrypt",slug:"desofbdecrypt",normalizedTitle:"desofbdecrypt",charIndex:9055},{level:3,title:"HmacMd5",slug:"hmacmd5",normalizedTitle:"hmacmd5",charIndex:9552},{level:3,title:"HmacSha1",slug:"hmacsha1",normalizedTitle:"hmacsha1",charIndex:9860},{level:3,title:"HmacSha256",slug:"hmacsha256",normalizedTitle:"hmacsha256",charIndex:10182},{level:3,title:"HmacSha512",slug:"hmacsha512",normalizedTitle:"hmacsha512",charIndex:10535},{level:3,title:"Md5String",slug:"md5string",normalizedTitle:"md5string",charIndex:10954},{level:3,title:"Md5File",slug:"md5file",normalizedTitle:"md5file",charIndex:11243},{level:3,title:"Sha1",slug:"sha1",normalizedTitle:"sha1",charIndex:9864},{level:3,title:"Sha256",slug:"sha256",normalizedTitle:"sha256",charIndex:10186},{level:3,title:"Sha512",slug:"sha512",normalizedTitle:"sha512",charIndex:10539},{level:3,title:"GenerateRsaKey",slug:"generatersakey",normalizedTitle:"generatersakey",charIndex:12513},{level:3,title:"RsaEncrypt",slug:"rsaencrypt",normalizedTitle:"rsaencrypt",charIndex:12918},{level:3,title:"RsaDecrypt",slug:"rsadecrypt",normalizedTitle:"rsadecrypt",charIndex:13412}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation AesEcbEncrypt AesEcbDecrypt AesCbcEncrypt AesCbcDecrypt AesCtrCrypt AesCfbEncrypt AesCfbDecrypt AesOfbEncrypt AesOfbDecrypt Base64StdEncode Base64StdDecode DesEcbEncrypt DesEcbDecrypt DesCbcEncrypt DesCbcDecrypt DesCtrCrypt DesCfbEncrypt DesCfbDecrypt DesOfbEncrypt DesOfbDecrypt HmacMd5 HmacSha1 HmacSha256 HmacSha512 Md5String Md5File Sha1 Sha256 Sha512 GenerateRsaKey RsaEncrypt RsaDecrypt",content:'# Cryptor\n\nPackage cryptor contains some functions for data encryption and decryption. Support base64, md5, hmac, aes, des, rsa.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/cryptor/aes.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/des.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/basic.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/rsa.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\n\n\n\n\n# Documentation\n\n\n# AesEcbEncrypt\n\nEncrypt data with key use AES ECB algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesEcbEncrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesEcbEncrypt([]byte(data), []byte(key))\n\n    fmt.Println(string(encrypted))\n}\n\n\n\n# AesEcbDecrypt\n\nDecrypt data with key use AES ECB algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesEcbDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesEcbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesEcbDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# AesCbcEncrypt\n\nEncrypt data with key use AES CBC algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesCbcEncrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCbcEncrypt([]byte(data), []byte(key))\n\n    fmt.Println(string(encrypted))\n}\n\n\n\n# AesCbcDecrypt\n\nDecrypt data with key use AES CBC algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesCbcDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCbcEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesCbcDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# AesCtrCrypt\n\nEncrypt or decrypt data with key use AES CTR algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesCtrCrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCtrCrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesCtrCrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# AesCfbEncrypt\n\nEncrypt data with key use AES CFB algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesCfbEncrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCfbEncrypt([]byte(data), []byte(key))\n    fmt.Println(string(encrypted))\n}\n\n\n\n# AesCfbDecrypt\n\nDecrypt data with key use AES CBC algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesCfbDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesCfbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesCfbDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# AesOfbEncrypt\n\nEnecrypt data with key use AES OFB algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesOfbEncrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesOfbEncrypt([]byte(data), []byte(key))\n    fmt.Println(string(encrypted))\n}\n\n\n\n# AesOfbDecrypt\n\nDecrypt data with key use AES OFB algorithm. Length of `key` param should be 16, 24 or 32.\n\nSignature:\n\nfunc AesOfbDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.AesOfbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.AesOfbDecrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# Base64StdEncode\n\nEncode string with base64 encoding.\n\nSignature:\n\nfunc Base64StdEncode(s string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    base64Str := cryptor.Base64StdEncode("hello world")\n    fmt.Println(base64Str) //aGVsbG8gd29ybGQ=\n}\n\n\n\n# Base64StdDecode\n\nDecode a base64 encoded string.\n\nSignature:\n\nfunc Base64StdDecode(s string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    str := cryptor.Base64StdDecode("aGVsbG8gd29ybGQ=")\n    fmt.Println(str) //hello world\n}\n\n\n\n# DesEcbEncrypt\n\nEncrypt data with key use DES ECB algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesEcbEncrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesEcbEncrypt([]byte(data), []byte(key))\n\n    fmt.Println(string(encrypted))\n}\n\n\n\n# DesEcbDecrypt\n\nDecrypt data with key use DES ECB algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesEcbDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesEcbEncrypt([]byte(data), []byt(key)\n    decrypted := cryptor.DesEcbDecrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# DesCbcEncrypt\n\nEncrypt data with key use DES CBC algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesCbcEncrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCbcEncrypt([]byte(data), []byt(key)\n\n    fmt.Println(string(encrypted))\n}\n\n\n\n# DesCbcDecrypt\n\nDecrypt data with key use DES CBC algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesCbcDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCbcEncrypt([]byte(data), []byt(key)\n\tdecrypted := cryptor.DesCbcDecrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# DesCtrCrypt\n\nEncrypt or decrypt data with key use DES CTR algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesCtrCrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCtrCrypt([]byte(data), []byte(key))\n    decrypted := cryptor.DesCtrCrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# DesCfbEncrypt\n\nEncrypt data with key use DES CFB algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesCfbEncrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCfbEncrypt([]byte(data), []byt(key)\n    fmt.Println(string(encrypted))\n}\n\n\n\n# DesCfbDecrypt\n\nDecrypt data with key use DES CBC algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesCfbDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesCfbEncrypt([]byte(data), []byt(key)\n    decrypted := cryptor.DesCfbDecrypt(encrypted, []byte(key))\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# DesOfbEncrypt\n\nEnecrypt data with key use DES OFB algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesOfbEncrypt(data, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesOfbEncrypt([]byte(data), []byte(key))\n    fmt.Println(string(encrypted))\n}\n\n\n\n# DesOfbDecrypt\n\nDecrypt data with key use DES OFB algorithm. Length of `key` param should be 8.\n\nSignature:\n\nfunc DesOfbDecrypt(encrypted, key []byte) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.DesOfbEncrypt([]byte(data), []byte(key))\n    decrypted := cryptor.DesOfbDecrypt(encrypted, []byte(key))\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# HmacMd5\n\nGet the md5 hmac hash of string.\n\nSignature:\n\nfunc HmacMd5(data, key string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n  \ts := cryptor.HmacMd5("hello world", "12345"))\n  \tfmt.Println(s) //5f4c9faaff0a1ad3007d9ddc06abe36d\n}\n\n\n\n# HmacSha1\n\nGet the sha1 hmac hash of string.\n\nSignature:\n\nfunc HmacSha1(data, key string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.HmacSha1("hello world", "12345"))\n    fmt.Println(s) //3826f812255d8683f051ee97346d1359234d5dbd\n}\n\n\n\n# HmacSha256\n\nGet the sha256 hmac hash of string\n\nSignature:\n\nfunc HmacSha256(data, key string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.HmacSha256("hello world", "12345"))\n    fmt.Println(s) //9dce2609f2d67d41f74c7f9efc8ccd44370d41ad2de52982627588dfe7289ab8\n}\n\n\n\n# HmacSha512\n\nGet the sha512 hmac hash of string.\n\nSignature:\n\nfunc HmacSha512(data, key string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.HmacSha512("hello world", "12345"))\n    fmt.Println(s)\n //5b1563ac4e9b49c9ada8ccb232588fc4f0c30fd12f756b3a0b95af4985c236ca60925253bae10ce2c6bf9af1c1679b51e5395ff3d2826c0a2c7c0d72225d4175\n}\n\n\n\n# Md5String\n\nGet the md5 value of string.\n\nSignature:\n\nfunc Md5String(s string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Md5String("hello"))\n    fmt.Println(s) //5d41402abc4b2a76b9719d911017c592\n}\n\n\n\n# Md5File\n\nGet the md5 value of file.\n\nSignature:\n\nfunc Md5File(filepath string) (string, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Md5File("./main.go"))\n    fmt.Println(s)\n}\n\n\n\n# Sha1\n\nGet the sha1 value of string.\n\nSignature:\n\nfunc Sha1(data string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Sha1("hello world"))\n    fmt.Println(s) //2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\n}\n\n\n\n# Sha256\n\nGet the sha256 value of string.\n\nSignature:\n\nfunc Sha256(data string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Sha256("hello world"))\n    fmt.Println(s) //b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n}\n\n\n\n# Sha512\n\nGet the sha512 value of string.\n\nSignature:\n\nfunc Sha512(data string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.Sha512("hello world"))\n    fmt.Println(s) //309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n}\n\n\n\n# GenerateRsaKey\n\nCreate the rsa public and private key file in current directory.\n\nSignature:\n\nfunc GenerateRsaKey(keySize int, priKeyFile, pubKeyFile string) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.GenerateRsaKey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# RsaEncrypt\n\nEncrypt data with public key file useing ras algorithm.\n\nSignature:\n\nfunc RsaEncrypt(data []byte, pubKeyFileName string) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.GenerateRsaKey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.Println(err)\n    }\n\n    data := []byte("hello world")\n    encrypted := cryptor.RsaEncrypt(data, "rsa_public.pem")\n    decrypted := cryptor.RsaDecrypt(encrypted, "rsa_private.pem")\n\n    fmt.Println(string(decrypted)) //hello world\n}\n\n\n\n# RsaDecrypt\n\nDecrypt data with private key file useing ras algorithm.\n\nSignature:\n\nfunc RsaDecrypt(data []byte, privateKeyFileName string) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.GenerateRsaKey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.Println(err)\n    }\n\n    data := []byte("hello world")\n    encrypted := cryptor.RsaEncrypt(data, "rsa_public.pem")\n    decrypted := cryptor.RsaDecrypt(encrypted, "rsa_private.pem")\n\n    fmt.Println(string(decrypted)) //hello world\n}\n',normalizedContent:'# cryptor\n\npackage cryptor contains some functions for data encryption and decryption. support base64, md5, hmac, aes, des, rsa.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/cryptor/aes.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/des.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/basic.go\n * https://github.com/duke-git/lancet/blob/main/cryptor/rsa.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\n\n\n\n\n# documentation\n\n\n# aesecbencrypt\n\nencrypt data with key use aes ecb algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aesecbencrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesecbencrypt([]byte(data), []byte(key))\n\n    fmt.println(string(encrypted))\n}\n\n\n\n# aesecbdecrypt\n\ndecrypt data with key use aes ecb algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aesecbdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesecbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aesecbdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# aescbcencrypt\n\nencrypt data with key use aes cbc algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aescbcencrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aescbcencrypt([]byte(data), []byte(key))\n\n    fmt.println(string(encrypted))\n}\n\n\n\n# aescbcdecrypt\n\ndecrypt data with key use aes cbc algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aescbcdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aescbcencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aescbcdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# aesctrcrypt\n\nencrypt or decrypt data with key use aes ctr algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aesctrcrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesctrcrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aesctrcrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# aescfbencrypt\n\nencrypt data with key use aes cfb algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aescfbencrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aescfbencrypt([]byte(data), []byte(key))\n    fmt.println(string(encrypted))\n}\n\n\n\n# aescfbdecrypt\n\ndecrypt data with key use aes cbc algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aescfbdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aescfbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aescfbdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# aesofbencrypt\n\nenecrypt data with key use aes ofb algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aesofbencrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesofbencrypt([]byte(data), []byte(key))\n    fmt.println(string(encrypted))\n}\n\n\n\n# aesofbdecrypt\n\ndecrypt data with key use aes ofb algorithm. length of `key` param should be 16, 24 or 32.\n\nsignature:\n\nfunc aesofbdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefghijklmnop"\n    encrypted := cryptor.aesofbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.aesofbdecrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# base64stdencode\n\nencode string with base64 encoding.\n\nsignature:\n\nfunc base64stdencode(s string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    base64str := cryptor.base64stdencode("hello world")\n    fmt.println(base64str) //agvsbg8gd29ybgq=\n}\n\n\n\n# base64stddecode\n\ndecode a base64 encoded string.\n\nsignature:\n\nfunc base64stddecode(s string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    str := cryptor.base64stddecode("agvsbg8gd29ybgq=")\n    fmt.println(str) //hello world\n}\n\n\n\n# desecbencrypt\n\nencrypt data with key use des ecb algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc desecbencrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desecbencrypt([]byte(data), []byte(key))\n\n    fmt.println(string(encrypted))\n}\n\n\n\n# desecbdecrypt\n\ndecrypt data with key use des ecb algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc desecbdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desecbencrypt([]byte(data), []byt(key)\n    decrypted := cryptor.desecbdecrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# descbcencrypt\n\nencrypt data with key use des cbc algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc descbcencrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.descbcencrypt([]byte(data), []byt(key)\n\n    fmt.println(string(encrypted))\n}\n\n\n\n# descbcdecrypt\n\ndecrypt data with key use des cbc algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc descbcdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.descbcencrypt([]byte(data), []byt(key)\n\tdecrypted := cryptor.descbcdecrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# desctrcrypt\n\nencrypt or decrypt data with key use des ctr algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc desctrcrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desctrcrypt([]byte(data), []byte(key))\n    decrypted := cryptor.desctrcrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# descfbencrypt\n\nencrypt data with key use des cfb algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc descfbencrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.descfbencrypt([]byte(data), []byt(key)\n    fmt.println(string(encrypted))\n}\n\n\n\n# descfbdecrypt\n\ndecrypt data with key use des cbc algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc descfbdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.descfbencrypt([]byte(data), []byt(key)\n    decrypted := cryptor.descfbdecrypt(encrypted, []byte(key))\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# desofbencrypt\n\nenecrypt data with key use des ofb algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc desofbencrypt(data, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desofbencrypt([]byte(data), []byte(key))\n    fmt.println(string(encrypted))\n}\n\n\n\n# desofbdecrypt\n\ndecrypt data with key use des ofb algorithm. length of `key` param should be 8.\n\nsignature:\n\nfunc desofbdecrypt(encrypted, key []byte) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    data := "hello world"\n    key := "abcdefgh"\n    encrypted := cryptor.desofbencrypt([]byte(data), []byte(key))\n    decrypted := cryptor.desofbdecrypt(encrypted, []byte(key))\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# hmacmd5\n\nget the md5 hmac hash of string.\n\nsignature:\n\nfunc hmacmd5(data, key string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n  \ts := cryptor.hmacmd5("hello world", "12345"))\n  \tfmt.println(s) //5f4c9faaff0a1ad3007d9ddc06abe36d\n}\n\n\n\n# hmacsha1\n\nget the sha1 hmac hash of string.\n\nsignature:\n\nfunc hmacsha1(data, key string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.hmacsha1("hello world", "12345"))\n    fmt.println(s) //3826f812255d8683f051ee97346d1359234d5dbd\n}\n\n\n\n# hmacsha256\n\nget the sha256 hmac hash of string\n\nsignature:\n\nfunc hmacsha256(data, key string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.hmacsha256("hello world", "12345"))\n    fmt.println(s) //9dce2609f2d67d41f74c7f9efc8ccd44370d41ad2de52982627588dfe7289ab8\n}\n\n\n\n# hmacsha512\n\nget the sha512 hmac hash of string.\n\nsignature:\n\nfunc hmacsha512(data, key string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.hmacsha512("hello world", "12345"))\n    fmt.println(s)\n //5b1563ac4e9b49c9ada8ccb232588fc4f0c30fd12f756b3a0b95af4985c236ca60925253bae10ce2c6bf9af1c1679b51e5395ff3d2826c0a2c7c0d72225d4175\n}\n\n\n\n# md5string\n\nget the md5 value of string.\n\nsignature:\n\nfunc md5string(s string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.md5string("hello"))\n    fmt.println(s) //5d41402abc4b2a76b9719d911017c592\n}\n\n\n\n# md5file\n\nget the md5 value of file.\n\nsignature:\n\nfunc md5file(filepath string) (string, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.md5file("./main.go"))\n    fmt.println(s)\n}\n\n\n\n# sha1\n\nget the sha1 value of string.\n\nsignature:\n\nfunc sha1(data string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.sha1("hello world"))\n    fmt.println(s) //2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\n}\n\n\n\n# sha256\n\nget the sha256 value of string.\n\nsignature:\n\nfunc sha256(data string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.sha256("hello world"))\n    fmt.println(s) //b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n}\n\n\n\n# sha512\n\nget the sha512 value of string.\n\nsignature:\n\nfunc sha512(data string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    s := cryptor.sha512("hello world"))\n    fmt.println(s) //309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n}\n\n\n\n# generatersakey\n\ncreate the rsa public and private key file in current directory.\n\nsignature:\n\nfunc generatersakey(keysize int, prikeyfile, pubkeyfile string) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.generatersakey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# rsaencrypt\n\nencrypt data with public key file useing ras algorithm.\n\nsignature:\n\nfunc rsaencrypt(data []byte, pubkeyfilename string) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.generatersakey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.println(err)\n    }\n\n    data := []byte("hello world")\n    encrypted := cryptor.rsaencrypt(data, "rsa_public.pem")\n    decrypted := cryptor.rsadecrypt(encrypted, "rsa_private.pem")\n\n    fmt.println(string(decrypted)) //hello world\n}\n\n\n\n# rsadecrypt\n\ndecrypt data with private key file useing ras algorithm.\n\nsignature:\n\nfunc rsadecrypt(data []byte, privatekeyfilename string) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/cryptor"\n)\n\nfunc main() {\n    err := cryptor.generatersakey(4096, "rsa_private.pem", "rsa_public.pem")\n    if err != nil {\n        fmt.println(err)\n    }\n\n    data := []byte("hello world")\n    encrypted := cryptor.rsaencrypt(data, "rsa_public.pem")\n    decrypted := cryptor.rsadecrypt(encrypted, "rsa_private.pem")\n\n    fmt.println(string(decrypted)) //hello world\n}\n',charsets:{}},{title:"Heap",frontmatter:{},regularPath:"/en/datastructure/heap.html",relativePath:"en/datastructure/heap.md",key:"v-78f7ce20",path:"/en/datastructure/heap.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:63},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:155},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:240},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:303},{level:3,title:"1. MaxHeap",slug:"_1-maxheap",normalizedTitle:"1. maxheap",charIndex:321},{level:3,title:"",slug:"newmaxheap",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"push",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"pop",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"peek",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"printstructure",normalizedTitle:"",charIndex:0}],lastUpdated:"10/22/2022, 11:35:23 AM",lastUpdatedTimestamp:1666409723e3,headersStr:"Source Usage Index Documentation 1. MaxHeap       ",content:'# Heap\n\nHeap is a binary heap tree implemented by slice.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/heap/maxheap.go\n\n\n\n\n# Usage\n\nimport (\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\n\n\n\n\n# Index\n\n * MaxHeap\n * Push\n * Pop\n * Peek\n * Data\n * Size\n\n\n\n\n# Documentation\n\n\n# 1. MaxHeap\n\nMaxHeap is a binary heap tree implemented by slice, The key of the root node is both greater than or equal to the key value of the left subtree and greater than or equal to the key value of the right subtree.\n\n\n# NewMaxHeap\n\nReturn a NewMaxHeap pointer instance.\n\nSignature:\n\ntype MaxHeap[T any] struct {\n\tdata       []T\n\tcomparator lancetconstraints.Comparator\n}\nfunc NewMaxHeap[T any](comparator lancetconstraints.Comparator) *MaxHeap[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    fmt.Println(maxHeap)\n}\n\n\n\n# Push\n\nPush value into the heap\n\nSignature:\n\nfunc (h *MaxHeap[T]) Push(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n\n    fmt.Println(maxHeap.Data()) //[]int{12, 9, 11, 4, 8, 10, 7, 1, 3, 5, 6, 2}\n}\n\n\n\n# Pop\n\nPop return the largest value, and remove it from the heap if heap is empty, return zero value and fasle\n\nSignature:\n\nfunc (h *MaxHeap[T]) Pop() (T, bool)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n    val, ok := maxHeap.Pop()\n\n    fmt.Println(val) //12\n    fmt.Println(ok) //true\n}\n\n\n\n# Peek\n\nReturn the largest element from the heap without removing it, if heap is empty, it returns zero value and false.\n\nSignature:\n\nfunc (h *MaxHeap[T]) Peek() (T, bool)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n    val, ok := maxHeap.Peek()\n\n    fmt.Println(val) //12\n    fmt.Println(maxHeap.Size()) //12\n}\n\n\n\n# Data\n\nReturn all element of the heap\n\nSignature:\n\nfunc (h *MaxHeap[T]) Data() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n\n    fmt.Println(maxHeap.Data()) //[]int{12, 9, 11, 4, 8, 10, 7, 1, 3, 5, 6, 2}\n}\n\n\n\n# Size\n\nReturn the number of elements in the heap\n\nSignature:\n\nfunc (h *MaxHeap[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n\n    fmt.Println(maxHeap.Size()) //3\n}\n\n\n\n# PrintStructure\n\nPrint the tree structure of the heap\n\nSignature:\n\nfunc (h *MaxHeap[T]) PrintStructure()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxHeap := heap.NewMaxHeap[int](&intComparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxHeap.Push(v)\n\t}\n\n    fmt.Println(maxHeap.PrintStructure())\n//        12\n//    9       11\n//  4   8   10   7\n// 1 3 5 6 2\n}\n',normalizedContent:'# heap\n\nheap is a binary heap tree implemented by slice.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/heap/maxheap.go\n\n\n\n\n# usage\n\nimport (\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\n\n\n\n\n# index\n\n * maxheap\n * push\n * pop\n * peek\n * data\n * size\n\n\n\n\n# documentation\n\n\n# 1. maxheap\n\nmaxheap is a binary heap tree implemented by slice, the key of the root node is both greater than or equal to the key value of the left subtree and greater than or equal to the key value of the right subtree.\n\n\n# newmaxheap\n\nreturn a newmaxheap pointer instance.\n\nsignature:\n\ntype maxheap[t any] struct {\n\tdata       []t\n\tcomparator lancetconstraints.comparator\n}\nfunc newmaxheap[t any](comparator lancetconstraints.comparator) *maxheap[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    fmt.println(maxheap)\n}\n\n\n\n# push\n\npush value into the heap\n\nsignature:\n\nfunc (h *maxheap[t]) push(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n\n    fmt.println(maxheap.data()) //[]int{12, 9, 11, 4, 8, 10, 7, 1, 3, 5, 6, 2}\n}\n\n\n\n# pop\n\npop return the largest value, and remove it from the heap if heap is empty, return zero value and fasle\n\nsignature:\n\nfunc (h *maxheap[t]) pop() (t, bool)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n    val, ok := maxheap.pop()\n\n    fmt.println(val) //12\n    fmt.println(ok) //true\n}\n\n\n\n# peek\n\nreturn the largest element from the heap without removing it, if heap is empty, it returns zero value and false.\n\nsignature:\n\nfunc (h *maxheap[t]) peek() (t, bool)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n    val, ok := maxheap.peek()\n\n    fmt.println(val) //12\n    fmt.println(maxheap.size()) //12\n}\n\n\n\n# data\n\nreturn all element of the heap\n\nsignature:\n\nfunc (h *maxheap[t]) data() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n\n    fmt.println(maxheap.data()) //[]int{12, 9, 11, 4, 8, 10, 7, 1, 3, 5, 6, 2}\n}\n\n\n\n# size\n\nreturn the number of elements in the heap\n\nsignature:\n\nfunc (h *maxheap[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n\n    fmt.println(maxheap.size()) //3\n}\n\n\n\n# printstructure\n\nprint the tree structure of the heap\n\nsignature:\n\nfunc (h *maxheap[t]) printstructure()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    heap "github.com/duke-git/lancet/v2/datastructure/heap"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    maxheap := heap.newmaxheap[int](&intcomparator{})\n    values := []int{6, 5, 2, 4, 7, 10, 12, 1, 3, 8, 9, 11}\n\n\tfor _, v := range values {\n\t\tmaxheap.push(v)\n\t}\n\n    fmt.println(maxheap.printstructure())\n//        12\n//    9       11\n//  4   8   10   7\n// 1 3 5 6 2\n}\n',charsets:{}},{title:"Linklist",frontmatter:{},regularPath:"/en/datastructure/linklist.html",relativePath:"en/datastructure/linklist.md",key:"v-c68b7ec0",path:"/en/datastructure/linklist.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:112},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:288},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:373},{level:3,title:"1. SinglyLink",slug:"_1-singlylink",normalizedTitle:"1. singlylink",charIndex:383},{level:3,title:"2. DoublyLink",slug:"_2-doublylink",normalizedTitle:"2. doublylink",charIndex:597},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:798},{level:3,title:"1. SinglyLink",slug:"_1-singlylink-2",normalizedTitle:"1. singlylink",charIndex:383},{level:3,title:"",slug:"newsinglylink",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"values",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertathead",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertattail",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteathead",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteattail",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deletevalue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"reverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"getmiddlenode",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"print",normalizedTitle:"",charIndex:0},{level:3,title:"2. DoublyLink",slug:"_2-doublylink-2",normalizedTitle:"2. doublylink",charIndex:597},{level:3,title:"",slug:"newdoublylink",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"values-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertat-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertathead-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertattail-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteat-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteathead-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteattail-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"reverse-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"getmiddlenode-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"print-2",normalizedTitle:"",charIndex:0}],lastUpdated:"10/22/2022, 11:35:23 AM",lastUpdatedTimestamp:1666409723e3,headersStr:"Source Usage Index 1. SinglyLink 2. DoublyLink Documentation 1. SinglyLink                2. DoublyLink              ",content:'# Linklist\n\nLinklist a linked list, whose node has a value and a pointer points to next node of the link.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/link/singlylink.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/link/doublylink.go\n\n\n\n\n# Usage\n\nimport (\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\n\n\n\n\n# Index\n\n\n# 1. SinglyLink\n\n * NewSinglyLink\n * Values\n * InsertAt\n * InsertAtHead\n * InsertAtTail\n * DeleteAt\n * DeleteAtHead\n * DeleteAtTail\n * DeleteValue\n * Reverse\n * GetMiddleNode\n * Size\n * IsEmpty\n * Clear\n * Print\n\n\n# 2. DoublyLink\n\n * NewDoublyLink\n * Values\n * InsertAt\n * InsertAtHead\n * InsertAtTail\n * DeleteAt\n * DeleteAtHead\n * DeleteAtTail\n * Reverse\n * GetMiddleNode\n * Size\n * IsEmpty\n * Clear\n * Print\n\n\n\n\n# Documentation\n\n\n# 1. SinglyLink\n\nSinglyLink a linked list, whose node has a value and a pointer points to next node of the link.\n\n\n# NewSinglyLink\n\nReturn a singly link(SinglyLink) instance\n\nSignature:\n\ntype LinkNode[T any] struct {\n\tValue T\n\tNext  *LinkNode[T]\n}\ntype SinglyLink[T any] struct {\n\tHead   *datastructure.LinkNode[T]\n\tlength int\n}\nfunc NewSinglyLink[T any]() *SinglyLink[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n    fmt.Println(lk)\n}\n\n\n\n# Values\n\nReturn a slice of all node value in singly linklist\n\nSignature:\n\nfunc (link *SinglyLink[T]) Values() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# InsertAt\n\nInsert value into singly linklist at index, index shoud be great or equal 0 and less or equal number of link nodes\n\nSignature:\n\nfunc (link *SinglyLink[T]) InsertAt(index int, value T) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAt(0, 1)\n    lk.InsertAt(1, 2)\n    lk.InsertAt(2, 3)\n    lk.InsertAt(2, 4)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 4, 3}\n}\n\n\n\n# InsertAtHead\n\nInsert value into singly linklist at head(first) index\n\nSignature:\n\nfunc (link *SinglyLink[T]) InsertAtHead(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtHead(1)\n    lk.InsertAtHead(2)\n    lk.InsertAtHead(3)\n\n    fmt.Println(lk.Values()) //[]int{3, 2, 1}\n}\n\n\n\n# InsertAtTail\n\nInsert value into singly linklist at tail(last) index\n\nSignature:\n\nfunc (link *SinglyLink[T]) InsertAtTail(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# DeleteAt\n\nDelete value at specific index, index shoud be great or equal 0 and less or less than number of link nodes - 1\n\nSignature:\n\nfunc (link *SinglyLink[T]) DeleteAt(index int) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    lk.InsertAtTail(4)\n\n    err := lk.DeleteAt(3)\n\n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# DeleteAtHead\n\nDelete value in singly linklist at first index\n\nSignature:\n\nfunc (link *SinglyLink[T]) DeleteAtHead() error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    lk.InsertAtTail(4)\n\n    err := lk.DeleteAtHead()\n    \n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{2, 3, 4}\n}\n\n\n\n# DeleteAtTail\n\nDelete value in singly linklist at last index\n\nSignature:\n\nfunc (link *SinglyLink[T]) DeleteAtTail() error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    err := lk.DeleteAtTail()\n    \n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{1, 2}\n}\n\n\n\n# DeleteValue\n\nDelete all `value` in singly linklist\n\nSignature:\n\nfunc (link *SinglyLink[T]) DeleteValue(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.DeleteValue(2)\n    fmt.Println(lk.Values()) //[]int{1, 3}\n}\n\n\n\n# Reverse\n\nReverse all nodes order in linkist\n\nSignature:\n\nfunc (link *SinglyLink[T]) Reverse()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.Reverse()\n    fmt.Println(lk.Values()) //[]int{3, 2, 1}\n}\n\n\n\n# GetMiddleNode\n\nGet the node at middle index of linkist\n\nSignature:\n\nfunc (link *SinglyLink[T]) GetMiddleNode() *datastructure.LinkNode[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    midNode := lk.GetMiddleNode()\n    fmt.Println(midNode.Value) //2\n}\n\n\n\n# Size\n\nGet the number of nodes in linklist\n\nSignature:\n\nfunc (link *SinglyLink[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Size()) //3\n}\n\n\n\n# IsEmpty\n\nChecks if linklist is empty or not\n\nSignature:\n\nfunc (link *SinglyLink[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n    fmt.Println(lk.IsEmpty()) //true\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.IsEmpty()) //false\n}\n\n\n\n# Clear\n\nClear all nodes in the linklist, make it empty\n\nSignature:\n\nfunc (link *SinglyLink[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.Clear()\n\n    fmt.Println(lk.Values()) //\n}\n\n\n\n# Print\n\nPrint all nodes info of linklist\n\nSignature:\n\nfunc (link *SinglyLink[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewSinglyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    \n    lk.Print() //[ &{Value:1 Pre:<nil> Next:0xc0000a4048}, &{Value:2 Pre:<nil> Next:0xc0000a4060}, &{Value:3 Pre:<nil> Next:<nil>} ]\n}\n\n\n\n# 2. DoublyLink\n\nDoublyLink is a linked list, whose node has a value, a next pointer points to next node and pre pointer points to previous node of the link.\n\n\n# NewDoublyLink\n\nReturn a doubly link instance\n\nSignature:\n\ntype LinkNode[T any] struct {\n\tValue T\n    Pre   *LinkNode[T]\n\tNext  *LinkNode[T]\n}\ntype DoublyLink[T any] struct {\n\tHead   *datastructure.LinkNode[T]\n\tlength int\n}\nfunc NewDoublyLink[T any]() *DoublyLink[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n    fmt.Println(lk)\n}\n\n\n\n# Values\n\nReturn a slice of all node value in doubly linklist\n\nSignature:\n\nfunc (link *DoublyLink[T]) Values() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# InsertAt\n\nInsert value into doubly linklist at index, index shoud be great or equal 0 and less or equal number of link nodes\n\nSignature:\n\nfunc (link *DoublyLink[T]) InsertAt(index int, value T) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAt(0, 1)\n    lk.InsertAt(1, 2)\n    lk.InsertAt(2, 3)\n    lk.InsertAt(2, 4)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 4, 3}\n}\n\n\n\n# InsertAtHead\n\nInsert value into doubly linklist at head(first) index\n\nSignature:\n\nfunc (link *DoublyLink[T]) InsertAtHead(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtHead(1)\n    lk.InsertAtHead(2)\n    lk.InsertAtHead(3)\n\n    fmt.Println(lk.Values()) //[]int{3, 2, 1}\n}\n\n\n\n# InsertAtTail\n\nInsert value into doubly linklist at tail(last) index\n\nSignature:\n\nfunc (link *DoublyLink[T]) InsertAtTail(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# DeleteAt\n\nDelete value at specific index, index shoud be great or equal 0 and less or less than number of link nodes - 1\n\nSignature:\n\nfunc (link *DoublyLink[T]) DeleteAt(index int) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    lk.InsertAtTail(4)\n\n    err := lk.DeleteAt(3)\n\n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{1, 2, 3}\n}\n\n\n\n# DeleteAtHead\n\nDelete value in doubly linklist at first index\n\nSignature:\n\nfunc (link *DoublyLink[T]) DeleteAtHead() error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    lk.InsertAtTail(4)\n\n    err := lk.DeleteAtHead()\n    \n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{2, 3, 4}\n}\n\n\n\n# DeleteAtTail\n\nDelete value in doubly linklist at last index\n\nSignature:\n\nfunc (link *DoublyLink[T]) DeleteAtTail() error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    err := lk.DeleteAtTail()\n    \n    fmt.Println(err) //nil\n    fmt.Println(lk.Values()) //[]int{1, 2}\n}\n\n\n\n# Reverse\n\nReverse all nodes order in linkist\n\nSignature:\n\nfunc (link *DoublyLink[T]) Reverse()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.Reverse()\n    fmt.Println(lk.Values()) //[]int{3, 2, 1}\n}\n\n\n\n# GetMiddleNode\n\nGet the node at middle index of linkist\n\nSignature:\n\nfunc (link *DoublyLink[T]) GetMiddleNode() *datastructure.LinkNode[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    midNode := lk.GetMiddleNode()\n    fmt.Println(midNode.Value) //2\n}\n\n\n\n# Size\n\nGet the number of nodes in linklist\n\nSignature:\n\nfunc (link *DoublyLink[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.Size()) //3\n}\n\n\n\n# IsEmpty\n\nChecks if linklist is empty or not\n\nSignature:\n\nfunc (link *DoublyLink[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n    fmt.Println(lk.IsEmpty()) //true\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    fmt.Println(lk.IsEmpty()) //false\n}\n\n\n\n# Clear\n\nClear all nodes in the linklist, make it empty\n\nSignature:\n\nfunc (link *DoublyLink[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n\n    lk.Clear()\n\n    fmt.Println(lk.Values()) //\n}\n\n\n\n# Print\n\nPrint all nodes info of linklist\n\nSignature:\n\nfunc (link *DoublyLink[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.NewDoublyLink[int]()\n\n    lk.InsertAtTail(1)\n    lk.InsertAtTail(2)\n    lk.InsertAtTail(3)\n    \n    lk.Print() //\n}\n',normalizedContent:'# linklist\n\nlinklist a linked list, whose node has a value and a pointer points to next node of the link.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/link/singlylink.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/link/doublylink.go\n\n\n\n\n# usage\n\nimport (\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\n\n\n\n\n# index\n\n\n# 1. singlylink\n\n * newsinglylink\n * values\n * insertat\n * insertathead\n * insertattail\n * deleteat\n * deleteathead\n * deleteattail\n * deletevalue\n * reverse\n * getmiddlenode\n * size\n * isempty\n * clear\n * print\n\n\n# 2. doublylink\n\n * newdoublylink\n * values\n * insertat\n * insertathead\n * insertattail\n * deleteat\n * deleteathead\n * deleteattail\n * reverse\n * getmiddlenode\n * size\n * isempty\n * clear\n * print\n\n\n\n\n# documentation\n\n\n# 1. singlylink\n\nsinglylink a linked list, whose node has a value and a pointer points to next node of the link.\n\n\n# newsinglylink\n\nreturn a singly link(singlylink) instance\n\nsignature:\n\ntype linknode[t any] struct {\n\tvalue t\n\tnext  *linknode[t]\n}\ntype singlylink[t any] struct {\n\thead   *datastructure.linknode[t]\n\tlength int\n}\nfunc newsinglylink[t any]() *singlylink[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n    fmt.println(lk)\n}\n\n\n\n# values\n\nreturn a slice of all node value in singly linklist\n\nsignature:\n\nfunc (link *singlylink[t]) values() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# insertat\n\ninsert value into singly linklist at index, index shoud be great or equal 0 and less or equal number of link nodes\n\nsignature:\n\nfunc (link *singlylink[t]) insertat(index int, value t) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertat(0, 1)\n    lk.insertat(1, 2)\n    lk.insertat(2, 3)\n    lk.insertat(2, 4)\n\n    fmt.println(lk.values()) //[]int{1, 2, 4, 3}\n}\n\n\n\n# insertathead\n\ninsert value into singly linklist at head(first) index\n\nsignature:\n\nfunc (link *singlylink[t]) insertathead(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertathead(1)\n    lk.insertathead(2)\n    lk.insertathead(3)\n\n    fmt.println(lk.values()) //[]int{3, 2, 1}\n}\n\n\n\n# insertattail\n\ninsert value into singly linklist at tail(last) index\n\nsignature:\n\nfunc (link *singlylink[t]) insertattail(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# deleteat\n\ndelete value at specific index, index shoud be great or equal 0 and less or less than number of link nodes - 1\n\nsignature:\n\nfunc (link *singlylink[t]) deleteat(index int) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    lk.insertattail(4)\n\n    err := lk.deleteat(3)\n\n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# deleteathead\n\ndelete value in singly linklist at first index\n\nsignature:\n\nfunc (link *singlylink[t]) deleteathead() error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    lk.insertattail(4)\n\n    err := lk.deleteathead()\n    \n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{2, 3, 4}\n}\n\n\n\n# deleteattail\n\ndelete value in singly linklist at last index\n\nsignature:\n\nfunc (link *singlylink[t]) deleteattail() error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    err := lk.deleteattail()\n    \n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{1, 2}\n}\n\n\n\n# deletevalue\n\ndelete all `value` in singly linklist\n\nsignature:\n\nfunc (link *singlylink[t]) deletevalue(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.deletevalue(2)\n    fmt.println(lk.values()) //[]int{1, 3}\n}\n\n\n\n# reverse\n\nreverse all nodes order in linkist\n\nsignature:\n\nfunc (link *singlylink[t]) reverse()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.reverse()\n    fmt.println(lk.values()) //[]int{3, 2, 1}\n}\n\n\n\n# getmiddlenode\n\nget the node at middle index of linkist\n\nsignature:\n\nfunc (link *singlylink[t]) getmiddlenode() *datastructure.linknode[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    midnode := lk.getmiddlenode()\n    fmt.println(midnode.value) //2\n}\n\n\n\n# size\n\nget the number of nodes in linklist\n\nsignature:\n\nfunc (link *singlylink[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.size()) //3\n}\n\n\n\n# isempty\n\nchecks if linklist is empty or not\n\nsignature:\n\nfunc (link *singlylink[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n    fmt.println(lk.isempty()) //true\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.isempty()) //false\n}\n\n\n\n# clear\n\nclear all nodes in the linklist, make it empty\n\nsignature:\n\nfunc (link *singlylink[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.clear()\n\n    fmt.println(lk.values()) //\n}\n\n\n\n# print\n\nprint all nodes info of linklist\n\nsignature:\n\nfunc (link *singlylink[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newsinglylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    \n    lk.print() //[ &{value:1 pre:<nil> next:0xc0000a4048}, &{value:2 pre:<nil> next:0xc0000a4060}, &{value:3 pre:<nil> next:<nil>} ]\n}\n\n\n\n# 2. doublylink\n\ndoublylink is a linked list, whose node has a value, a next pointer points to next node and pre pointer points to previous node of the link.\n\n\n# newdoublylink\n\nreturn a doubly link instance\n\nsignature:\n\ntype linknode[t any] struct {\n\tvalue t\n    pre   *linknode[t]\n\tnext  *linknode[t]\n}\ntype doublylink[t any] struct {\n\thead   *datastructure.linknode[t]\n\tlength int\n}\nfunc newdoublylink[t any]() *doublylink[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n    fmt.println(lk)\n}\n\n\n\n# values\n\nreturn a slice of all node value in doubly linklist\n\nsignature:\n\nfunc (link *doublylink[t]) values() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# insertat\n\ninsert value into doubly linklist at index, index shoud be great or equal 0 and less or equal number of link nodes\n\nsignature:\n\nfunc (link *doublylink[t]) insertat(index int, value t) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertat(0, 1)\n    lk.insertat(1, 2)\n    lk.insertat(2, 3)\n    lk.insertat(2, 4)\n\n    fmt.println(lk.values()) //[]int{1, 2, 4, 3}\n}\n\n\n\n# insertathead\n\ninsert value into doubly linklist at head(first) index\n\nsignature:\n\nfunc (link *doublylink[t]) insertathead(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertathead(1)\n    lk.insertathead(2)\n    lk.insertathead(3)\n\n    fmt.println(lk.values()) //[]int{3, 2, 1}\n}\n\n\n\n# insertattail\n\ninsert value into doubly linklist at tail(last) index\n\nsignature:\n\nfunc (link *doublylink[t]) insertattail(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# deleteat\n\ndelete value at specific index, index shoud be great or equal 0 and less or less than number of link nodes - 1\n\nsignature:\n\nfunc (link *doublylink[t]) deleteat(index int) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    lk.insertattail(4)\n\n    err := lk.deleteat(3)\n\n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{1, 2, 3}\n}\n\n\n\n# deleteathead\n\ndelete value in doubly linklist at first index\n\nsignature:\n\nfunc (link *doublylink[t]) deleteathead() error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    lk.insertattail(4)\n\n    err := lk.deleteathead()\n    \n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{2, 3, 4}\n}\n\n\n\n# deleteattail\n\ndelete value in doubly linklist at last index\n\nsignature:\n\nfunc (link *doublylink[t]) deleteattail() error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    err := lk.deleteattail()\n    \n    fmt.println(err) //nil\n    fmt.println(lk.values()) //[]int{1, 2}\n}\n\n\n\n# reverse\n\nreverse all nodes order in linkist\n\nsignature:\n\nfunc (link *doublylink[t]) reverse()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.reverse()\n    fmt.println(lk.values()) //[]int{3, 2, 1}\n}\n\n\n\n# getmiddlenode\n\nget the node at middle index of linkist\n\nsignature:\n\nfunc (link *doublylink[t]) getmiddlenode() *datastructure.linknode[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    midnode := lk.getmiddlenode()\n    fmt.println(midnode.value) //2\n}\n\n\n\n# size\n\nget the number of nodes in linklist\n\nsignature:\n\nfunc (link *doublylink[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.size()) //3\n}\n\n\n\n# isempty\n\nchecks if linklist is empty or not\n\nsignature:\n\nfunc (link *doublylink[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n    fmt.println(lk.isempty()) //true\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    fmt.println(lk.isempty()) //false\n}\n\n\n\n# clear\n\nclear all nodes in the linklist, make it empty\n\nsignature:\n\nfunc (link *doublylink[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n\n    lk.clear()\n\n    fmt.println(lk.values()) //\n}\n\n\n\n# print\n\nprint all nodes info of linklist\n\nsignature:\n\nfunc (link *doublylink[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    link "github.com/duke-git/lancet/v2/datastructure/link"\n)\n\nfunc main() {\n    lk := link.newdoublylink[int]()\n\n    lk.insertattail(1)\n    lk.insertattail(2)\n    lk.insertattail(3)\n    \n    lk.print() //\n}\n',charsets:{}},{title:"Set",frontmatter:{},regularPath:"/en/datastructure/set.html",relativePath:"en/datastructure/set.md",key:"v-11a307a0",path:"/en/datastructure/set.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:87},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:174},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:257},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:451},{level:3,title:"",slug:"newset",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"values",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"add",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"delete",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"containall",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clone",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"equal",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"iterate",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"union",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"intersection",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"symmetricdifference",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"minus",normalizedTitle:"",charIndex:0}],lastUpdated:"10/22/2022, 11:35:23 AM",lastUpdatedTimestamp:1666409723e3,headersStr:"Source Usage Index Documentation               ",content:'# Set\n\nSet is a data container, like list, but elements of set is not duplicate.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/set/set.go\n\n\n\n\n# Usage\n\nimport (\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\n\n\n\n\n# Index\n\n * NewSet\n\n * Values\n\n * Add\n\n * Delete\n\n * Contain\n\n * ContainAll\n\n * Clone\n\n * Size\n\n * Equal\n\n * Iterate\n\n * IsEmpty\n\n * Union\n\n * Intersection\n\n * SymmetricDifference\n\n * Minus\n\n\n\n\n# Documentation\n\n\n# NewSet\n\nMake a Set instance\n\nSignature:\n\ntype Set[T comparable] map[T]bool\nfunc NewSet[T comparable](values ...T) Set[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int](1,2,2,3)\n    fmt.Println(st.Values()) //1,2,3\n}\n\n\n\n# Values\n\nReturn slice of all set data\n\nSignature:\n\nfunc (s Set[T]) Values() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int](1,2,2,3)\n    fmt.Println(st.Values()) //1,2,3\n}\n\n\n\n# Add\n\nAdd value to set\n\nSignature:\n\nfunc (s Set[T]) Add(values ...T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int]()\n    st.Add(1, 2, 3)\n\n    fmt.Println(st.Values()) //1,2,3\n}\n\n\n\n# Delete\n\nDelete value in set\n\nSignature:\n\nfunc (s Set[T]) Delete(values ...T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int]()\n    st.Add(1, 2, 3)\n\n    set.Delete(3)\n    fmt.Println(st.Values()) //1,2\n}\n\n\n\n# Contain\n\nCheck if value is in set or not\n\nSignature:\n\nfunc (s Set[T]) Contain(value T) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.NewSet[int]()\n    st.Add(1, 2, 3)\n\n    fmt.Println(st.Contain(1)) //true\n    fmt.Println(st.Contain(4)) //false\n}\n\n\n\n# ContainAll\n\nChecks if set contains another set\n\nSignature:\n\nfunc (s Set[T]) ContainAll(other Set[T]) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n\tset2 := set.NewSet(1, 2)\n\tset3 := set.NewSet(1, 2, 3, 4)\n\n    fmt.Println(set1.ContainAll(set2)) //true\n    fmt.Println(set1.ContainAll(set3)) //false\n}\n\n\n\n# Size\n\nGet the number of elements in set\n\nSignature:\n\nfunc (s Set[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n\n    fmt.Println(set1.Size()) //3\n}\n\n\n\n# Clone\n\nMake a copy of set\n\nSignature:\n\nfunc (s Set[T]) Clone() Set[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set1.Clone()\n\n    fmt.Println(set1.Size() == set2.Size()) //true\n    fmt.Println(set1.ContainAll(set2)) //true\n}\n\n\n\n# Equal\n\nCheck if two sets has same elements or not\n\nSignature:\n\nfunc (s Set[T]) Equal(other Set[T]) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set.NewSet(1, 2, 3)\n    set3 := set.NewSet(1, 2, 3, 4)\n\n    fmt.Println(set1.Equal(set2)) //true\n    fmt.Println(set1.Equal(set3)) //false\n}\n\n\n\n# Iterate\n\nCall function by every element of set\n\nSignature:\n\nfunc (s Set[T]) Iterate(fn func(value T))\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    arr := []int{}\n    set.Iterate(func(value int) {\n        arr = append(arr, value)\n    })\n\n    fmt.Println(arr) //1,2,3\n}\n\n\n\n# IsEmpty\n\nCheck if the set is empty or not\n\nSignature:\n\nfunc (s Set[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set.NewSet()\n\n    fmt.Println(set1.IsEmpty()) //false\n    fmt.Println(set2.IsEmpty()) //true\n}\n\n\n\n# Union\n\nCreate a new set contain all element of set s and other\n\nSignature:\n\nfunc (s Set[T]) Union(other Set[T]) Set[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set.NewSet(2, 3, 4, 5)\n    set3 := set1.Union(set2)\n\n    fmt.Println(set3.Values()) //1,2,3,4,5\n}\n\n\n\n# Intersection\n\nCreate a new set whose element both be contained in set s and other\n\nSignature:\n\nfunc (s Set[T]) Intersection(other Set[T]) Set[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n    set2 := set.NewSet(2, 3, 4, 5)\n    set3 := set1.Intersection(set2)\n\n    fmt.Println(set3.Values()) //2,3\n}\n\n\n\n# SymmetricDifference\n\nCreate a new set whose element is in set1 or set2, but not in both set1 and set2\n\nSignature:\n\nfunc (s Set[T]) SymmetricDifference(other Set[T]) Set[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n\tset2 := set.NewSet(2, 3, 4, 5)\n\tset3 := set1.SymmetricDifference(set2)\n\n    fmt.Println(set3.Values()) //1,4,5\n}\n\n\n\n# Minus\n\nCreate an set of whose element in origin set but not in compared set\n\nSignature:\n\nfunc (s Set[T]) Minus(comparedSet Set[T]) Set[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.NewSet(1, 2, 3)\n\tset2 := set.NewSet(2, 3, 4, 5)\n\tset3 := set.NewSet(2, 3)\n\n    res1 := set1.Minus(set2)\n    fmt.Println(res1.Values()) //1\n\n    res2 := set2.Minus(set3)\n    fmt.Println(res2.Values()) //4,5\n}\n',normalizedContent:'# set\n\nset is a data container, like list, but elements of set is not duplicate.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/set/set.go\n\n\n\n\n# usage\n\nimport (\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\n\n\n\n\n# index\n\n * newset\n\n * values\n\n * add\n\n * delete\n\n * contain\n\n * containall\n\n * clone\n\n * size\n\n * equal\n\n * iterate\n\n * isempty\n\n * union\n\n * intersection\n\n * symmetricdifference\n\n * minus\n\n\n\n\n# documentation\n\n\n# newset\n\nmake a set instance\n\nsignature:\n\ntype set[t comparable] map[t]bool\nfunc newset[t comparable](values ...t) set[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int](1,2,2,3)\n    fmt.println(st.values()) //1,2,3\n}\n\n\n\n# values\n\nreturn slice of all set data\n\nsignature:\n\nfunc (s set[t]) values() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int](1,2,2,3)\n    fmt.println(st.values()) //1,2,3\n}\n\n\n\n# add\n\nadd value to set\n\nsignature:\n\nfunc (s set[t]) add(values ...t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int]()\n    st.add(1, 2, 3)\n\n    fmt.println(st.values()) //1,2,3\n}\n\n\n\n# delete\n\ndelete value in set\n\nsignature:\n\nfunc (s set[t]) delete(values ...t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int]()\n    st.add(1, 2, 3)\n\n    set.delete(3)\n    fmt.println(st.values()) //1,2\n}\n\n\n\n# contain\n\ncheck if value is in set or not\n\nsignature:\n\nfunc (s set[t]) contain(value t) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    st := set.newset[int]()\n    st.add(1, 2, 3)\n\n    fmt.println(st.contain(1)) //true\n    fmt.println(st.contain(4)) //false\n}\n\n\n\n# containall\n\nchecks if set contains another set\n\nsignature:\n\nfunc (s set[t]) containall(other set[t]) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n\tset2 := set.newset(1, 2)\n\tset3 := set.newset(1, 2, 3, 4)\n\n    fmt.println(set1.containall(set2)) //true\n    fmt.println(set1.containall(set3)) //false\n}\n\n\n\n# size\n\nget the number of elements in set\n\nsignature:\n\nfunc (s set[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n\n    fmt.println(set1.size()) //3\n}\n\n\n\n# clone\n\nmake a copy of set\n\nsignature:\n\nfunc (s set[t]) clone() set[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set1.clone()\n\n    fmt.println(set1.size() == set2.size()) //true\n    fmt.println(set1.containall(set2)) //true\n}\n\n\n\n# equal\n\ncheck if two sets has same elements or not\n\nsignature:\n\nfunc (s set[t]) equal(other set[t]) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set.newset(1, 2, 3)\n    set3 := set.newset(1, 2, 3, 4)\n\n    fmt.println(set1.equal(set2)) //true\n    fmt.println(set1.equal(set3)) //false\n}\n\n\n\n# iterate\n\ncall function by every element of set\n\nsignature:\n\nfunc (s set[t]) iterate(fn func(value t))\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    arr := []int{}\n    set.iterate(func(value int) {\n        arr = append(arr, value)\n    })\n\n    fmt.println(arr) //1,2,3\n}\n\n\n\n# isempty\n\ncheck if the set is empty or not\n\nsignature:\n\nfunc (s set[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set.newset()\n\n    fmt.println(set1.isempty()) //false\n    fmt.println(set2.isempty()) //true\n}\n\n\n\n# union\n\ncreate a new set contain all element of set s and other\n\nsignature:\n\nfunc (s set[t]) union(other set[t]) set[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set.newset(2, 3, 4, 5)\n    set3 := set1.union(set2)\n\n    fmt.println(set3.values()) //1,2,3,4,5\n}\n\n\n\n# intersection\n\ncreate a new set whose element both be contained in set s and other\n\nsignature:\n\nfunc (s set[t]) intersection(other set[t]) set[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n    set2 := set.newset(2, 3, 4, 5)\n    set3 := set1.intersection(set2)\n\n    fmt.println(set3.values()) //2,3\n}\n\n\n\n# symmetricdifference\n\ncreate a new set whose element is in set1 or set2, but not in both set1 and set2\n\nsignature:\n\nfunc (s set[t]) symmetricdifference(other set[t]) set[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n\tset2 := set.newset(2, 3, 4, 5)\n\tset3 := set1.symmetricdifference(set2)\n\n    fmt.println(set3.values()) //1,4,5\n}\n\n\n\n# minus\n\ncreate an set of whose element in origin set but not in compared set\n\nsignature:\n\nfunc (s set[t]) minus(comparedset set[t]) set[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    set "github.com/duke-git/lancet/v2/datastructure/set"\n)\n\nfunc main() {\n    set1 := set.newset(1, 2, 3)\n\tset2 := set.newset(2, 3, 4, 5)\n\tset3 := set.newset(2, 3)\n\n    res1 := set1.minus(set2)\n    fmt.println(res1.values()) //1\n\n    res2 := set2.minus(set3)\n    fmt.println(res2.values()) //4,5\n}\n',charsets:{}},{title:"List",frontmatter:{},regularPath:"/en/datastructure/list.html",relativePath:"en/datastructure/list.md",key:"v-09112c40",path:"/en/datastructure/list.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:62},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:151},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:236},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:556},{level:3,title:"",slug:"newlist",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"valueof",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"indexof",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"lastindexof",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"indexoffunc",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"lastindexoffunc",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"push",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"popfirst",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"popfirst-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insertat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"updateat",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"equal",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clone",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"merge",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"cap",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"swap",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"reverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"unique",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"union",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"intersection",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"sublist",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"deleteif",normalizedTitle:"",charIndex:0}],lastUpdated:"10/22/2022, 11:35:23 AM",lastUpdatedTimestamp:1666409723e3,headersStr:"Source Usage Index Documentation                            ",content:'# List\n\nList is a linear table, implemented with slice.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/list/list.go\n\n\n\n\n# Usage\n\nimport (\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\n\n\n\n\n# Index\n\n * NewList\n * Contain\n * Data\n * ValueOf\n * IndexOf\n * LastIndexOf\n * IndexOfFunc\n * LastIndexOfFunc\n * Push\n * PopFirst\n * PopLast\n * DeleteAt\n * InsertAt\n * UpdateAt\n * Equal\n * IsEmpty\n * Clear\n * Clone\n * Merge\n * Size\n * Cap\n * Swap\n * Reverse\n * Unique\n * Union\n * Intersection\n * SubList\n * DeleteIf\n\n\n\n\n# Documentation\n\n\n# NewList\n\nList is a linear table, implemented with slice. NewList function return a list pointer\n\nSignature:\n\ntype List[T any] struct {\n\tdata []T\n}\nfunc NewList[T any](data []T) *List[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    fmt.Println(li)\n}\n\n\n\n# Contain\n\nCheck if the value in the list or not\n\nSignature:\n\nfunc (l *List[T]) Contain(value T) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    fmt.Println(li.Contain(1)) //true\n    fmt.Println(li.Contain(0)) //false\n}\n\n\n\n# Data\n\nReturn slice of list data\n\nSignature:\n\nfunc (l *List[T]) Data() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    data := li.Data()\n\n    fmt.Println(data) //[]int{1, 2, 3}\n}\n\n\n\n# ValueOf\n\nReturn the value pointer at index in list\n\nSignature:\n\nfunc (l *List[T]) ValueOf(index int) (*T, bool)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    v, ok := li.ValueOf(0)\n\n    fmt.Println(*v) //1\n    fmt.Println(ok) //true\n}\n\n\n\n# IndexOf\n\nReturns the index of value in the list. if not found return -1\n\nSignature:\n\nfunc (l *List[T]) IndexOf(value T) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    fmt.Println(li.IndexOf(1)) //0\n    fmt.Println(li.IndexOf(0)) //-1\n}\n\n\n\n# LastIndexOf\n\nReturns the index of the last occurrence of the value in this list if not found return -1\n\nSignature:\n\nfunc (l *List[T]) LastIndexOf(value T) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 1})\n\n    fmt.Println(li.LastIndexOf(1)) // 3\n    fmt.Println(li.LastIndexOf(0)) //-1\n}\n\n\n\n# IndexOfFunc\n\nIndexOfFunc returns the first index satisfying f(v). if not found return -1\n\nSignature:\n\nfunc (l *List[T]) IndexOfFunc(f func(T) bool) int \n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    fmt.Println(li.IndexOfFunc(func(a int) bool { return a == 1 })) //0\n    fmt.Println(li.IndexOfFunc(func(a int) bool { return a == 0 })) //-1\n}\n\n\n\n# LastIndexOfFunc\n\nLastIndexOfFunc returns the index of the last occurrence of the value in this list satisfying f(data[i]). if not found return -1\n\nSignature:\n\nfunc (l *List[T]) LastIndexOfFunc(f func(T) bool) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 1})\n\n    fmt.Println(li.LastIndexOfFunc(func(a int) bool { return a == 1 })) // 3\n    fmt.Println(li.LastIndexOfFunc(func(a int) bool { return a == 0 })) //-1\n}\n\n\n\n# Push\n\nAppend value to the list\n\nSignature:\n\nfunc (l *List[T]) Push(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    li.Push(4)\n\n    fmt.Println(li.Data()) //[]int{1, 2, 3, 4}\n}\n\n\n\n# PopFirst\n\nDelete the first value of list and return it\n\nSignature:\n\nfunc (l *List[T]) PopFirst() (*T, bool)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    v, ok := li.PopFirst()\n\n    fmt.Println(*v) //1\n    fmt.Println(ok) //true\n    fmt.Println(li.Data()) //2, 3\n}\n\n\n\n# PopFirst\n\nDelete the last value of list and return it\n\nSignature:\n\nfunc (l *List[T]) PopLast() (*T, bool)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    v, ok := li.PopLast()\n\n    fmt.Println(*v) //3\n    fmt.Println(ok) //true\n    fmt.Println(li.Data()) //1, 2\n}\n\n\n\n# DeleteAt\n\nDelete the value of list at index, if index is not between 0 and length of list data, do nothing\n\nSignature:\n\nfunc (l *List[T]) DeleteAt(index int)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 4})\n\n    li.DeleteAt(-1)\n    fmt.Println(li.Data()) //1,2,3,4\n\n    li.DeleteAt(4)\n    fmt.Println(li.Data()) //1,2,3,4\n\n    li.DeleteAt(0)\n    fmt.Println(li.Data()) //2,3,4\n\n    li.DeleteAt(2)\n    fmt.Println(li.Data()) //2,3\n}\n\n\n\n# InsertAt\n\nInsert value into list at index, if index is not between 0 and length of list data, do nothing\n\nSignature:\n\nfunc (l *List[T]) InsertAt(index int, value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    li.InsertAt(-1, 0)\n    fmt.Println(li.Data()) //1,2,3\n\n    li.InsertAt(4, 0)\n    fmt.Println(li.Data()) //1,2,3\n\n    li.InsertAt(3, 4)\n    fmt.Println(li.Data()) //1,2,3,4\n\n    // li.InsertAt(2, 4)\n    // fmt.Println(li.Data()) //1,2,4,3\n}\n\n\n\n# UpdateAt\n\nUpdate value of list at index, index shoud between 0 and list size - 1\n\nSignature:\n\nfunc (l *List[T]) UpdateAt(index int, value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n\n    li.UpdateAt(-1, 0)\n    fmt.Println(li.Data()) //1,2,3\n\n    li.UpdateAt(2, 4)\n    fmt.Println(li.Data()) //1,2,4\n\n    li.UpdateAt(3, 5)\n    fmt.Println(li.Data()) //1,2,4\n}\n\n\n\n# Equal\n\nCompare a list to another list, use reflect.DeepEqual on every element\n\nSignature:\n\nfunc (l *List[T]) Equal(other *List[T]) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3, 4})\n    li2 := list.NewList([]int{1, 2, 3, 4})\n    li3 := list.NewList([]int{1, 2, 3})\n\n    fmt.Println(li1.Equal(li2)) //true\n    fmt.Println(li1.Equal(li3)) //false\n}\n\n\n\n# IsEmpty\n\nCheck if a list is empty or not\n\nSignature:\n\nfunc (l *List[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3})\n    li2 := list.NewList([]int{})\n\n    fmt.Println(li1.IsEmpty()) //false\n    fmt.Println(li2.IsEmpty()) //true\n}\n\n\n\n# Clear\n\nClear the data of list\n\nSignature:\n\nfunc (l *List[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    li.Clear()\n\n    fmt.Println(li.Data()) // empty\n}\n\n\n\n# Clone\n\nReturn a copy of list\n\nSignature:\n\nfunc (l *List[T]) Clone() *List[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3})\n    cloneList := li.Clone()\n\n    fmt.Println(cloneList.Data()) // 1,2,3\n}\n\n\n\n# Merge\n\nMerge two list, return new list, don\'t change original list\n\nSignature:\n\nfunc (l *List[T]) Merge(other *List[T]) *List[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3, 4})\n    li2 := list.NewList([]int{4, 5, 6})\n    li3 := li1.Merge(li2)\n\n    fmt.Println(li3.Data()) //1, 2, 3, 4, 4, 5, 6\n}\n\n\n\n# Size\n\nReturn number of list data items\n\nSignature:\n\nfunc (l *List[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 4})\n\n    fmt.Println(li.Size()) //4\n}\n\n\n\n# Cap\n\nCap return cap of the inner data\n\nSignature:\n\nfunc (l *List[T]) Cap() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n\tdata := make([]int, 0, 100)\n\t\n    li := list.NewList(data)\n\n    fmt.Println(li.Cap()) // 100\n}\n\n\n\n# Swap\n\nSwap the value at two index in list\n\nSignature:\n\nfunc (l *List[T]) Swap(i, j int)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 4})\n    li.Swap(0, 3)\n\n    fmt.Println(li.Data()) //4, 2, 3, 1\n}\n\n\n\n# Reverse\n\nReverse the data item order of list\n\nSignature:\n\nfunc (l *List[T]) Reverse()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 3, 4})\n    li.Reverse()\n\n    fmt.Println(li.Data()) //4, 3, 2, 1\n}\n\n\n\n# Unique\n\nRemove duplicate items in list\n\nSignature:\n\nfunc (l *List[T]) Unique()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.NewList([]int{1, 2, 2, 3, 4})\n    li.Unique()\n\n    fmt.Println(li.Data()) //1,2,3,4\n}\n\n\n\n# Union\n\nCreates a new list contain all elements in list l and other, remove duplicate element\n\nSignature:\n\nfunc (l *List[T]) Union(other *List[T]) *List[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3, 4})\n    li2 := list.NewList([]int{4, 5, 6})\n    li3 := li1.Union(li2)\n\n    fmt.Println(li3.Data()) //1,2,3,4,5,6\n}\n\n\n\n# Intersection\n\nCreates a new list whose element both be contained in list l and other\n\nSignature:\n\nfunc (l *List[T]) Intersection(other *List[T]) *List[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.NewList([]int{1, 2, 3, 4})\n    li2 := list.NewList([]int{4, 5, 6})\n    li3 := li1.Intersection(li2)\n\n    fmt.Println(li3.Data()) //4\n}\n\n\n\n# SubList\n\nSubList returns a sub list of the original list between the specified fromIndex, inclusive, and toIndex, exclusive.\n\nSignature:\n\nfunc (l *List[T]) SubList(fromIndex, toIndex int) *List[T] \n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    l := list.NewList([]int{1, 2, 3, 4, 5, 6})\n   \n    fmt.Println(l.SubList(2, 5)) // []int{3, 4, 5}\n}\n\n\n\n# DeleteIf\n\nDeleteIf delete all satisfying f(data[i]), returns count of removed elements\n\nSignature:\n\nfunc (l *List[T]) DeleteIf(f func(T) bool) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n\tl := list.NewList([]int{1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1})\n\n\tfmt.Println(l.DeleteIf(func(a int) bool { return a == 1 })) // 12 \n\tfmt.Println(l.Data()) // []int{2, 3, 4}\n}\n',normalizedContent:'# list\n\nlist is a linear table, implemented with slice.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/list/list.go\n\n\n\n\n# usage\n\nimport (\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\n\n\n\n\n# index\n\n * newlist\n * contain\n * data\n * valueof\n * indexof\n * lastindexof\n * indexoffunc\n * lastindexoffunc\n * push\n * popfirst\n * poplast\n * deleteat\n * insertat\n * updateat\n * equal\n * isempty\n * clear\n * clone\n * merge\n * size\n * cap\n * swap\n * reverse\n * unique\n * union\n * intersection\n * sublist\n * deleteif\n\n\n\n\n# documentation\n\n\n# newlist\n\nlist is a linear table, implemented with slice. newlist function return a list pointer\n\nsignature:\n\ntype list[t any] struct {\n\tdata []t\n}\nfunc newlist[t any](data []t) *list[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    fmt.println(li)\n}\n\n\n\n# contain\n\ncheck if the value in the list or not\n\nsignature:\n\nfunc (l *list[t]) contain(value t) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    fmt.println(li.contain(1)) //true\n    fmt.println(li.contain(0)) //false\n}\n\n\n\n# data\n\nreturn slice of list data\n\nsignature:\n\nfunc (l *list[t]) data() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    data := li.data()\n\n    fmt.println(data) //[]int{1, 2, 3}\n}\n\n\n\n# valueof\n\nreturn the value pointer at index in list\n\nsignature:\n\nfunc (l *list[t]) valueof(index int) (*t, bool)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    v, ok := li.valueof(0)\n\n    fmt.println(*v) //1\n    fmt.println(ok) //true\n}\n\n\n\n# indexof\n\nreturns the index of value in the list. if not found return -1\n\nsignature:\n\nfunc (l *list[t]) indexof(value t) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    fmt.println(li.indexof(1)) //0\n    fmt.println(li.indexof(0)) //-1\n}\n\n\n\n# lastindexof\n\nreturns the index of the last occurrence of the value in this list if not found return -1\n\nsignature:\n\nfunc (l *list[t]) lastindexof(value t) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 1})\n\n    fmt.println(li.lastindexof(1)) // 3\n    fmt.println(li.lastindexof(0)) //-1\n}\n\n\n\n# indexoffunc\n\nindexoffunc returns the first index satisfying f(v). if not found return -1\n\nsignature:\n\nfunc (l *list[t]) indexoffunc(f func(t) bool) int \n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    fmt.println(li.indexoffunc(func(a int) bool { return a == 1 })) //0\n    fmt.println(li.indexoffunc(func(a int) bool { return a == 0 })) //-1\n}\n\n\n\n# lastindexoffunc\n\nlastindexoffunc returns the index of the last occurrence of the value in this list satisfying f(data[i]). if not found return -1\n\nsignature:\n\nfunc (l *list[t]) lastindexoffunc(f func(t) bool) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 1})\n\n    fmt.println(li.lastindexoffunc(func(a int) bool { return a == 1 })) // 3\n    fmt.println(li.lastindexoffunc(func(a int) bool { return a == 0 })) //-1\n}\n\n\n\n# push\n\nappend value to the list\n\nsignature:\n\nfunc (l *list[t]) push(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    li.push(4)\n\n    fmt.println(li.data()) //[]int{1, 2, 3, 4}\n}\n\n\n\n# popfirst\n\ndelete the first value of list and return it\n\nsignature:\n\nfunc (l *list[t]) popfirst() (*t, bool)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    v, ok := li.popfirst()\n\n    fmt.println(*v) //1\n    fmt.println(ok) //true\n    fmt.println(li.data()) //2, 3\n}\n\n\n\n# popfirst\n\ndelete the last value of list and return it\n\nsignature:\n\nfunc (l *list[t]) poplast() (*t, bool)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    v, ok := li.poplast()\n\n    fmt.println(*v) //3\n    fmt.println(ok) //true\n    fmt.println(li.data()) //1, 2\n}\n\n\n\n# deleteat\n\ndelete the value of list at index, if index is not between 0 and length of list data, do nothing\n\nsignature:\n\nfunc (l *list[t]) deleteat(index int)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 4})\n\n    li.deleteat(-1)\n    fmt.println(li.data()) //1,2,3,4\n\n    li.deleteat(4)\n    fmt.println(li.data()) //1,2,3,4\n\n    li.deleteat(0)\n    fmt.println(li.data()) //2,3,4\n\n    li.deleteat(2)\n    fmt.println(li.data()) //2,3\n}\n\n\n\n# insertat\n\ninsert value into list at index, if index is not between 0 and length of list data, do nothing\n\nsignature:\n\nfunc (l *list[t]) insertat(index int, value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    li.insertat(-1, 0)\n    fmt.println(li.data()) //1,2,3\n\n    li.insertat(4, 0)\n    fmt.println(li.data()) //1,2,3\n\n    li.insertat(3, 4)\n    fmt.println(li.data()) //1,2,3,4\n\n    // li.insertat(2, 4)\n    // fmt.println(li.data()) //1,2,4,3\n}\n\n\n\n# updateat\n\nupdate value of list at index, index shoud between 0 and list size - 1\n\nsignature:\n\nfunc (l *list[t]) updateat(index int, value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n\n    li.updateat(-1, 0)\n    fmt.println(li.data()) //1,2,3\n\n    li.updateat(2, 4)\n    fmt.println(li.data()) //1,2,4\n\n    li.updateat(3, 5)\n    fmt.println(li.data()) //1,2,4\n}\n\n\n\n# equal\n\ncompare a list to another list, use reflect.deepequal on every element\n\nsignature:\n\nfunc (l *list[t]) equal(other *list[t]) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3, 4})\n    li2 := list.newlist([]int{1, 2, 3, 4})\n    li3 := list.newlist([]int{1, 2, 3})\n\n    fmt.println(li1.equal(li2)) //true\n    fmt.println(li1.equal(li3)) //false\n}\n\n\n\n# isempty\n\ncheck if a list is empty or not\n\nsignature:\n\nfunc (l *list[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3})\n    li2 := list.newlist([]int{})\n\n    fmt.println(li1.isempty()) //false\n    fmt.println(li2.isempty()) //true\n}\n\n\n\n# clear\n\nclear the data of list\n\nsignature:\n\nfunc (l *list[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    li.clear()\n\n    fmt.println(li.data()) // empty\n}\n\n\n\n# clone\n\nreturn a copy of list\n\nsignature:\n\nfunc (l *list[t]) clone() *list[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3})\n    clonelist := li.clone()\n\n    fmt.println(clonelist.data()) // 1,2,3\n}\n\n\n\n# merge\n\nmerge two list, return new list, don\'t change original list\n\nsignature:\n\nfunc (l *list[t]) merge(other *list[t]) *list[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3, 4})\n    li2 := list.newlist([]int{4, 5, 6})\n    li3 := li1.merge(li2)\n\n    fmt.println(li3.data()) //1, 2, 3, 4, 4, 5, 6\n}\n\n\n\n# size\n\nreturn number of list data items\n\nsignature:\n\nfunc (l *list[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 4})\n\n    fmt.println(li.size()) //4\n}\n\n\n\n# cap\n\ncap return cap of the inner data\n\nsignature:\n\nfunc (l *list[t]) cap() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n\tdata := make([]int, 0, 100)\n\t\n    li := list.newlist(data)\n\n    fmt.println(li.cap()) // 100\n}\n\n\n\n# swap\n\nswap the value at two index in list\n\nsignature:\n\nfunc (l *list[t]) swap(i, j int)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 4})\n    li.swap(0, 3)\n\n    fmt.println(li.data()) //4, 2, 3, 1\n}\n\n\n\n# reverse\n\nreverse the data item order of list\n\nsignature:\n\nfunc (l *list[t]) reverse()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 3, 4})\n    li.reverse()\n\n    fmt.println(li.data()) //4, 3, 2, 1\n}\n\n\n\n# unique\n\nremove duplicate items in list\n\nsignature:\n\nfunc (l *list[t]) unique()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li := list.newlist([]int{1, 2, 2, 3, 4})\n    li.unique()\n\n    fmt.println(li.data()) //1,2,3,4\n}\n\n\n\n# union\n\ncreates a new list contain all elements in list l and other, remove duplicate element\n\nsignature:\n\nfunc (l *list[t]) union(other *list[t]) *list[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3, 4})\n    li2 := list.newlist([]int{4, 5, 6})\n    li3 := li1.union(li2)\n\n    fmt.println(li3.data()) //1,2,3,4,5,6\n}\n\n\n\n# intersection\n\ncreates a new list whose element both be contained in list l and other\n\nsignature:\n\nfunc (l *list[t]) intersection(other *list[t]) *list[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    li1 := list.newlist([]int{1, 2, 3, 4})\n    li2 := list.newlist([]int{4, 5, 6})\n    li3 := li1.intersection(li2)\n\n    fmt.println(li3.data()) //4\n}\n\n\n\n# sublist\n\nsublist returns a sub list of the original list between the specified fromindex, inclusive, and toindex, exclusive.\n\nsignature:\n\nfunc (l *list[t]) sublist(fromindex, toindex int) *list[t] \n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n    l := list.newlist([]int{1, 2, 3, 4, 5, 6})\n   \n    fmt.println(l.sublist(2, 5)) // []int{3, 4, 5}\n}\n\n\n\n# deleteif\n\ndeleteif delete all satisfying f(data[i]), returns count of removed elements\n\nsignature:\n\nfunc (l *list[t]) deleteif(f func(t) bool) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    list "github.com/duke-git/lancet/v2/datastructure/list"\n)\n\nfunc main() {\n\tl := list.newlist([]int{1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1})\n\n\tfmt.println(l.deleteif(func(a int) bool { return a == 1 })) // 12 \n\tfmt.println(l.data()) // []int{2, 3, 4}\n}\n',charsets:{}},{title:"Fileutil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/fileutil/",relativePath:"en/fileutil/README.md",key:"v-63ac6c31",path:"/en/fileutil/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:88},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:168},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:239},{level:3,title:"ClearFile",slug:"clearfile",normalizedTitle:"clearfile",charIndex:257},{level:3,title:"CreateFile",slug:"createfile",normalizedTitle:"createfile",charIndex:580},{level:3,title:"CreateDir",slug:"createdir",normalizedTitle:"createdir",charIndex:897},{level:3,title:"CopyFile",slug:"copyfile",normalizedTitle:"copyfile",charIndex:1198},{level:3,title:"FileMode",slug:"filemode",normalizedTitle:"filemode",charIndex:1574},{level:3,title:"MiMeType",slug:"mimetype",normalizedTitle:"mimetype",charIndex:1910},{level:3,title:"IsExist",slug:"isexist",normalizedTitle:"isexist",charIndex:2372},{level:3,title:"IsLink",slug:"islink",normalizedTitle:"islink",charIndex:2701},{level:3,title:"IsDir",slug:"isdir",normalizedTitle:"isdir",charIndex:2990},{level:3,title:"ListFileNames",slug:"listfilenames",normalizedTitle:"listfilenames",charIndex:3328},{level:3,title:"RemoveFile",slug:"removefile",normalizedTitle:"removefile",charIndex:3631},{level:3,title:"ReadFileToString",slug:"readfiletostring",normalizedTitle:"readfiletostring",charIndex:3926},{level:3,title:"ReadFileByLine",slug:"readfilebyline",normalizedTitle:"readfilebyline",charIndex:4401},{level:3,title:"Zip",slug:"zip",normalizedTitle:"zip",charIndex:4928},{level:3,title:"UnZip",slug:"unzip",normalizedTitle:"unzip",charIndex:5275}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation ClearFile CreateFile CreateDir CopyFile FileMode MiMeType IsExist IsLink IsDir ListFileNames RemoveFile ReadFileToString ReadFileByLine Zip UnZip",content:'# Fileutil\n\nPackage fileutil implements some basic functions for file operations.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/fileutil/file.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\n\n\n\n\n# Documentation\n\n\n# ClearFile\n\nClear the file content, write empty string to the file.\n\nSignature:\n\nfunc ClearFile(path string) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.ClearFile("./test.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# CreateFile\n\nCreate file in path. return true if create succeed.\n\nSignature:\n\nfunc CreateFile(path string) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    isCreatedSucceed := fileutil.CreateFile("./test.txt")\n    fmt.Println(isCreatedSucceed)\n}\n\n\n\n# CreateDir\n\nCreate directory in absolute path. param `absPath` like /a/, /a/b/.\n\nSignature:\n\nfunc CreateDir(absPath string) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.CreateDir("/a/")\n    fmt.Println(err)\n}\n\n\n\n# CopyFile\n\nCopy src file to dest file. If dest file exist will overwrite it.\n\nSignature:\n\nfunc CopyFile(srcFilePath string, dstFilePath string) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.CopyFile("./test.txt", "./test_copy.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# FileMode\n\nReturn file mode infomation.\n\nSignature:\n\nfunc FileMode(path string) (fs.FileMode, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    mode, err := fileutil.FileMode("./test.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n    fmt.Println(mode)\n}\n\n\n\n# MiMeType\n\nGet file mime type, \'file\' param\'s type should be string or *os.File.\n\nSignature:\n\nfunc MiMeType(file any) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    type1 := fileutil.MiMeType("./test.txt")\n    fmt.Println(type1) //text/plain; charset=utf-8\n\n    f, _ := os.Open("./file.go")\n    type2 := fileutil.MiMeType(f)\n    fmt.Println(type2) //text/plain; charset=utf-8\n}\n\n\n\n# IsExist\n\nChecks if a file or directory exists.\n\nSignature:\n\nfunc IsExist(path string) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    fileutil.CreateFile("./test.txt")\n    isFileExist := fileutil.IsExist("./test.txt")\n    fmt.Println(isFileExist) //true\n}\n\n\n\n# IsLink\n\nChecks if a file is symbol link or not.\n\nSignature:\n\nfunc IsLink(path string) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    isLinkFile := fileutil.IsLink("./test.txt")\n    fmt.Println(isLinkFile) //false\n}\n\n\n\n# IsDir\n\nChecks if the path is directy or not.\n\nSignature:\n\nfunc IsDir(path string) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    isDir := fileutil.IsDir("./")\n    fmt.Println(isDir) //true\n\n    isDir = fileutil.IsDir("./test.txt")\n    fmt.Println(isDir) //false\n}\n\n\n\n# ListFileNames\n\nList all file names in given path.\n\nSignature:\n\nfunc ListFileNames(path string) ([]string, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    fileNames, _ := fileutil.ListFileNames("./")\n    fmt.Println(fileNames)\n}\n\n\n\n# RemoveFile\n\nRemove the file of path.\n\nSignature:\n\nfunc RemoveFile(path string) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.RemoveFile("./test.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# ReadFileToString\n\nReturn string of file content.\n\nSignature:\n\nfunc ReadFileToString(path string) (string, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    path := "./test.txt"\n    fileutil.CreateFile(path)\n\n    f, _ := os.OpenFile(path, os.O_WRONLY|os.O_TRUNC, 0777)\n    f.WriteString("hello world")\n\n    content, _ := fileutil.ReadFileToString(path)\n    fmt.Println(content) //hello world\n}\n\n\n\n# ReadFileByLine\n\nRead file line by line, and return slice of lines\n\nSignature:\n\nfunc ReadFileByLine(path string)([]string, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    path := "./text.txt"\n    fileutil.CreateFile(path)\n\n    f, _ := os.OpenFile(path, os.O_WRONLY|os.O_TRUNC, 0777)\n    defer f.Close()\n    f.WriteString("hello\\nworld")\n\n    contents, _ := fileutil.ReadFileByLine(path)\n    fmt.Println(contents) //[]string{"hello", "world"}\n}\n\n\n\n# Zip\n\nCreate a zip file of fpath, fpath could be a file or a directory.\n\nSignature:\n\nfunc Zip(fpath string, destPath string) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.Zip("./test.txt", "./test.zip")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# UnZip\n\nUnzip the file and save it to dest path.\n\nSignature:\n\nfunc UnZip(zipFile string, destPath string) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.Zip("./test.zip", "./unzip/test.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n',normalizedContent:'# fileutil\n\npackage fileutil implements some basic functions for file operations.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/fileutil/file.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\n\n\n\n\n# documentation\n\n\n# clearfile\n\nclear the file content, write empty string to the file.\n\nsignature:\n\nfunc clearfile(path string) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.clearfile("./test.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# createfile\n\ncreate file in path. return true if create succeed.\n\nsignature:\n\nfunc createfile(path string) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    iscreatedsucceed := fileutil.createfile("./test.txt")\n    fmt.println(iscreatedsucceed)\n}\n\n\n\n# createdir\n\ncreate directory in absolute path. param `abspath` like /a/, /a/b/.\n\nsignature:\n\nfunc createdir(abspath string) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.createdir("/a/")\n    fmt.println(err)\n}\n\n\n\n# copyfile\n\ncopy src file to dest file. if dest file exist will overwrite it.\n\nsignature:\n\nfunc copyfile(srcfilepath string, dstfilepath string) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.copyfile("./test.txt", "./test_copy.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# filemode\n\nreturn file mode infomation.\n\nsignature:\n\nfunc filemode(path string) (fs.filemode, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    mode, err := fileutil.filemode("./test.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n    fmt.println(mode)\n}\n\n\n\n# mimetype\n\nget file mime type, \'file\' param\'s type should be string or *os.file.\n\nsignature:\n\nfunc mimetype(file any) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    type1 := fileutil.mimetype("./test.txt")\n    fmt.println(type1) //text/plain; charset=utf-8\n\n    f, _ := os.open("./file.go")\n    type2 := fileutil.mimetype(f)\n    fmt.println(type2) //text/plain; charset=utf-8\n}\n\n\n\n# isexist\n\nchecks if a file or directory exists.\n\nsignature:\n\nfunc isexist(path string) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    fileutil.createfile("./test.txt")\n    isfileexist := fileutil.isexist("./test.txt")\n    fmt.println(isfileexist) //true\n}\n\n\n\n# islink\n\nchecks if a file is symbol link or not.\n\nsignature:\n\nfunc islink(path string) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    islinkfile := fileutil.islink("./test.txt")\n    fmt.println(islinkfile) //false\n}\n\n\n\n# isdir\n\nchecks if the path is directy or not.\n\nsignature:\n\nfunc isdir(path string) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    isdir := fileutil.isdir("./")\n    fmt.println(isdir) //true\n\n    isdir = fileutil.isdir("./test.txt")\n    fmt.println(isdir) //false\n}\n\n\n\n# listfilenames\n\nlist all file names in given path.\n\nsignature:\n\nfunc listfilenames(path string) ([]string, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    filenames, _ := fileutil.listfilenames("./")\n    fmt.println(filenames)\n}\n\n\n\n# removefile\n\nremove the file of path.\n\nsignature:\n\nfunc removefile(path string) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.removefile("./test.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# readfiletostring\n\nreturn string of file content.\n\nsignature:\n\nfunc readfiletostring(path string) (string, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    path := "./test.txt"\n    fileutil.createfile(path)\n\n    f, _ := os.openfile(path, os.o_wronly|os.o_trunc, 0777)\n    f.writestring("hello world")\n\n    content, _ := fileutil.readfiletostring(path)\n    fmt.println(content) //hello world\n}\n\n\n\n# readfilebyline\n\nread file line by line, and return slice of lines\n\nsignature:\n\nfunc readfilebyline(path string)([]string, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    path := "./text.txt"\n    fileutil.createfile(path)\n\n    f, _ := os.openfile(path, os.o_wronly|os.o_trunc, 0777)\n    defer f.close()\n    f.writestring("hello\\nworld")\n\n    contents, _ := fileutil.readfilebyline(path)\n    fmt.println(contents) //[]string{"hello", "world"}\n}\n\n\n\n# zip\n\ncreate a zip file of fpath, fpath could be a file or a directory.\n\nsignature:\n\nfunc zip(fpath string, destpath string) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.zip("./test.txt", "./test.zip")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# unzip\n\nunzip the file and save it to dest path.\n\nsignature:\n\nfunc unzip(zipfile string, destpath string) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.zip("./test.zip", "./unzip/test.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n',charsets:{cjk:!0}},{title:"Queue",frontmatter:{},regularPath:"/en/datastructure/queue.html",relativePath:"en/datastructure/queue.md",key:"v-90bb1d7c",path:"/en/datastructure/queue.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:238},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:587},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:674},{level:3,title:"1. ArrayQueue",slug:"_1-arrayqueue",normalizedTitle:"1. arrayqueue",charIndex:684},{level:3,title:"2. LinkedQueue",slug:"_2-linkedqueue",normalizedTitle:"2. linkedqueue",charIndex:816},{level:3,title:"3. CircularQueue",slug:"_3-circularqueue",normalizedTitle:"3. circularqueue",charIndex:940},{level:3,title:"4. PriorityQueue",slug:"_4-priorityqueue",normalizedTitle:"4. priorityqueue",charIndex:1078},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:1181},{level:3,title:"1. ArrayQueue",slug:"_1-arrayqueue-2",normalizedTitle:"1. arrayqueue",charIndex:684},{level:3,title:"",slug:"newarrayqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"enqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"dequeue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"front",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"back",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isfull",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain",normalizedTitle:"",charIndex:0},{level:3,title:"2. LinkedQueue",slug:"_2-linkedqueue-2",normalizedTitle:"2. linkedqueue",charIndex:816},{level:3,title:"",slug:"newlinkedqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"enqueue-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"dequeue-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"front-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"back-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain-2",normalizedTitle:"",charIndex:0},{level:3,title:"3. CircularQueue",slug:"_3-circularqueue-2",normalizedTitle:"3. circularqueue",charIndex:940},{level:3,title:"",slug:"newcircularqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"enqueue-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"dequeue-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"front-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"back-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isfull-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"contain-3",normalizedTitle:"",charIndex:0},{level:3,title:"4. PriorityQueue",slug:"_4-priorityqueue-2",normalizedTitle:"4. priorityqueue",charIndex:1078},{level:3,title:"",slug:"newpriorityqueue",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data-4",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"enqueue-4",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"dequeue-4",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-4",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isfull-3",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-4",normalizedTitle:"",charIndex:0}],lastUpdated:"10/22/2022, 11:35:23 AM",lastUpdatedTimestamp:1666409723e3,headersStr:"Source Usage Index 1. ArrayQueue 2. LinkedQueue 3. CircularQueue 4. PriorityQueue Documentation 1. ArrayQueue            2. LinkedQueue           3. CircularQueue            4. PriorityQueue       ",content:'# Queue\n\nA queue is a kind of linear table. It only allows delete operations at the front of the table and insert operations at the rear of the table. This package includes ArrayQueue, LinkedQueue, CircularQueue, and PriorityQueue.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/arrayqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/linkedqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/circularqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/priorityqueue.go\n\n\n\n\n# Usage\n\nimport (\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\n\n\n\n\n# Index\n\n\n# 1. ArrayQueue\n\n * NewArrayQueue\n * Data\n * Enqueue\n * Dequeue\n * Front\n * Back\n * Size\n * IsEmpty\n * IsFull\n * Clear\n * Contain\n\n\n# 2. LinkedQueue\n\n * NewLinkedQueue\n * Data\n * Enqueue\n * Dequeue\n * Front\n * Back\n * Size\n * IsEmpty\n * Clear\n * Contain\n\n\n# 3. CircularQueue\n\n * NewCircularQueue\n * Data\n * Enqueue\n * Dequeue\n * Front\n * Back\n * Size\n * IsEmpty\n * IsFull\n * Clear\n * Contain\n\n\n# 4. PriorityQueue\n\n * NewPriorityQueue\n * Data\n * Enqueue\n * Dequeue\n * IsEmpty\n * IsFull\n * Size\n\n\n\n\n# Documentation\n\n\n# 1. ArrayQueue\n\nCommon queue implemented by slice.\n\n\n# NewArrayQueue\n\nReturn a ArrayQueue pointer with specific capacity\n\nSignature:\n\nfunc NewArrayQueue[T any](capacity int) *ArrayQueue[T]\n\ntype ArrayQueue[T any] struct {\n\titems    []T\n\thead     int\n\ttail     int\n\tcapacity int\n\tsize     int\n}\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Data\n\nGet all queue data\n\nSignature:\n\nfunc (q *ArrayQueue[T]) Data() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Enqueue\n\nPut element into queue, if queue is full, return false\n\nSignature:\n\nfunc (q *ArrayQueue[T]) Enqueue(item T) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Dequeue\n\nRemove head element of queue and return it\n\nSignature:\n\nfunc (q *ArrayQueue[T]) Dequeue() (T, bool)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Dequeue()) // 1\n    fmt.Println(q.Data()) // 2,3\n}\n\n\n\n# Front\n\nJust get the head element of queue\n\nSignature:\n\nfunc (q *ArrayQueue[T]) Front() T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Front()) // 1\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Back\n\nJust get the tail element of queue\n\nSignature:\n\nfunc (q *ArrayQueue[T]) Back() T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Back()) // 3\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Size\n\nGet the number of elements in queue\n\nSignature:\n\nfunc (q *ArrayQueue[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Size()) // 3\n}\n\n\n\n# IsEmpty\n\nCheck if queue is empty or not\n\nSignature:\n\nfunc (q *ArrayQueue[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    fmt.Println(q.IsEmpty()) // true\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsEmpty()) // false\n}\n\n\n\n# IsFull\n\nCheck if queue is full or not\n\nSignature:\n\nfunc (q *ArrayQueue[T]) IsFull() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](3)\n    fmt.Println(q.IsFull()) // false\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsFull()) // true\n}\n\n\n\n# Clear\n\nClean all data in queue\n\nSignature:\n\nfunc (q *ArrayQueue[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n    q.Clear()\n\n    fmt.Println(q.IsEmpty()) // true\n}\n\n\n\n# Contain\n\nCheck if the value is in queue or not\n\nSignature:\n\nfunc (q *ArrayQueue[T]) Contain(value T) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewArrayQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Contain(1)) // true\n    fmt.Println(q.Contain(4)) // false\n}\n\n\n\n# 2. LinkedQueue\n\nCommon queue implemented by link.\n\n\n# NewLinkedQueue\n\nReturn a LinkedQueue pointer\n\nSignature:\n\nfunc NewLinkedQueue[T any]() *LinkedQueue[T]\n\ntype LinkedQueue[T any] struct {\n\thead   *datastructure.QueueNode[T]\n\ttail   *datastructure.QueueNode[T]\n\tlength int\n}\ntype QueueNode[T any] struct {\n\tValue T\n\tNext  *QueueNode[T]\n}\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int]()\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Data\n\nGet all queue data\n\nSignature:\n\nfunc (q *LinkedQueue[T]) Data() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int]()\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Enqueue\n\nPut element into queue\n\nSignature:\n\nfunc (q *LinkedQueue[T]) Enqueue(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Dequeue\n\nRemove head element of queue and return it\n\nSignature:\n\nfunc (q *LinkedQueue[T]) Dequeue() (T, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Dequeue()) // 1\n    fmt.Println(q.Data()) // 2,3\n}\n\n\n\n# Front\n\nJust get the head element of queue\n\nSignature:\n\nfunc (q *LinkedQueue[T]) Front() (*T, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Front()) // 1\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Back\n\nJust get the tail element of queue\n\nSignature:\n\nfunc (q *LinkedQueue[T]) Back() (*T, error) \n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Back()) // 3\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Size\n\nGet the number of elements in queue\n\nSignature:\n\nfunc (q *LinkedQueue[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Size()) // 3\n}\n\n\n\n# IsEmpty\n\nCheck if queue is empty or not\n\nSignature:\n\nfunc (q *LinkedQueue[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    fmt.Println(q.IsEmpty()) // true\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsEmpty()) // false\n}\n\n\n\n# Clear\n\nClean all data in queue\n\nSignature:\n\nfunc (q *LinkedQueue[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n    q.Clear()\n\n    fmt.Println(q.IsEmpty()) // true\n}\n\n\n\n# Contain\n\nCheck if the value is in queue or not\n\nSignature:\n\nfunc (q *LinkedQueue[T]) Contain(value T) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewLinkedQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Contain(1)) // true\n    fmt.Println(q.Contain(4)) // false\n}\n\n\n\n# 3. CircularQueue\n\nCircular queue implemented by slice.\n\n\n# NewCircularQueue\n\nReturn a CircularQueue pointer with specific capacity\n\nSignature:\n\nfunc NewCircularQueue[T any](capacity int) *CircularQueue[T]\n\ntype CircularQueue[T any] struct {\n\tdata  []T\n\tfront int\n\trear  int\n\tcapacity  int\n}\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Data\n\nGet all queue data\n\nSignature:\n\nfunc (q *CircularQueue[T]) Data() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Enqueue\n\nPut element into queue, if queue is full, return error\n\nSignature:\n\nfunc (q *CircularQueue[T]) Enqueue(value T) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Dequeue\n\nRemove head element of queue and return it\n\nSignature:\n\nfunc (q *CircularQueue[T]) Dequeue() (*T, bool)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    val := q.Dequeue()\n    fmt.Println(*val) // 1\n    fmt.Println(q.Data()) // 2,3\n}\n\n\n\n# Front\n\nJust get head element of queue\n\nSignature:\n\nfunc (q *CircularQueue[T]) Front() T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Front()) // 1\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Back\n\nJust get tail element of queue\n\nSignature:\n\nfunc (q *CircularQueue[T]) Back() T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Back()) // 3\n    fmt.Println(q.Data()) // 1,2,3\n}\n\n\n\n# Size\n\nGet the number of elements in queue\n\nSignature:\n\nfunc (q *CircularQueue[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Size()) // 3\n}\n\n\n\n# IsEmpty\n\nCheck if queue is empty or not\n\nSignature:\n\nfunc (q *CircularQueue[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    fmt.Println(q.IsEmpty()) // true\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsEmpty()) // false\n}\n\n\n\n# IsFull\n\nCheck if queue is full or not\n\nSignature:\n\nfunc (q *CircularQueue[T]) IsFull() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](3)\n    fmt.Println(q.IsFull()) // false\n\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.IsFull()) // true\n}\n\n\n\n# Clear\n\nClean all data in queue\n\nSignature:\n\nfunc (q *CircularQueue[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n    q.Clear()\n\n    fmt.Println(q.IsEmpty()) // true\n}\n\n\n\n# Contain\n\nCheck if the value is in queue or not\n\nSignature:\n\nfunc (q *CircularQueue[T]) Contain(value T) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewCircularQueue[int](5)\n    q.Enqueue(1)\n    q.Enqueue(2)\n    q.Enqueue(3)\n\n    fmt.Println(q.Contain(1)) // true\n    fmt.Println(q.Contain(4)) // false\n}\n\n\n\n# 4. PriorityQueue\n\nCommon queue implemented by slice.\n\n\n# NewPriorityQueue\n\nReturn a PriorityQueue pointer with specific capacity, param `comparator` is used to compare values of type T in the queue.\n\nSignature:\n\nfunc NewPriorityQueue[T any](capacity int, comparator lancetconstraints.Comparator) *PriorityQueue[T]\n\ntype PriorityQueue[T any] struct {\n\titems      []T\n\tsize       int\n\tcomparator lancetconstraints.Comparator\n}\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewPriorityQueue[int](3)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Data\n\nGet all queue data\n\nSignature:\n\nfunc (q *PriorityQueue[T]) Data() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.NewPriorityQueue[int](3)\n    fmt.Println(q.Data()) // []\n}\n\n\n\n# Enqueue\n\nPut element into queue, if queue is full, return false\n\nSignature:\n\nfunc (q *PriorityQueue[T]) Enqueue(item T) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    for i := 1; i < 11; i++ {\n\t\tq.Enqueue(i)\n\t}\n\n    fmt.Println(q.Data()) // 10, 9, 6, 7, 8, 2, 5, 1, 4, 3\n}\n\n\n\n# Dequeue\n\nRemove head element of queue and return it\n\nSignature:\n\nfunc (q *PriorityQueue[T]) Dequeue() (T, bool)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    for i := 1; i < 11; i++ {\n\t\tq.Enqueue(i)\n\t}\n    val, ok := pq.Dequeue()\n    fmt.Println(val) // 10\n    fmt.Println(q.Data()) // 9, 8, 6, 7, 3, 2, 5, 1, 4\n}\n\n\n\n# IsEmpty\n\nCheck if queue is empty or not\n\nSignature:\n\nfunc (q *PriorityQueue[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    fmt.Println(q.IsEmpty()) // true\n\n    for i := 1; i < 11; i++ {\n\t\tq.Enqueue(i)\n\t}\n    fmt.Println(q.IsEmpty()) // false\n}\n\n\n\n# IsFull\n\nCheck if queue is full or not\n\nSignature:\n\nfunc (q *PriorityQueue[T]) IsFull() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    fmt.Println(q.IsFull()) // false\n\n    for i := 1; i < 11; i++ {\n\t\tq.Enqueue(i)\n\t}\n    fmt.Println(q.IsFull()) // true\n}\n\n\n\n# Size\n\nGet nubmers of elements in queue\n\nSignature:\n\nfunc (q *PriorityQueue[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intComparator{}\n    q := queue.NewPriorityQueue[int](10, comparator)\n    fmt.Println(q.IsFull()) // false\n\n    for i := 1; i < 5; i++ {\n\t\tq.Enqueue(i)\n\t}\n    fmt.Println(q.Size()) // 4\n}\n',normalizedContent:'# queue\n\na queue is a kind of linear table. it only allows delete operations at the front of the table and insert operations at the rear of the table. this package includes arrayqueue, linkedqueue, circularqueue, and priorityqueue.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/arrayqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/linkedqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/circularqueue.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/queue/priorityqueue.go\n\n\n\n\n# usage\n\nimport (\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\n\n\n\n\n# index\n\n\n# 1. arrayqueue\n\n * newarrayqueue\n * data\n * enqueue\n * dequeue\n * front\n * back\n * size\n * isempty\n * isfull\n * clear\n * contain\n\n\n# 2. linkedqueue\n\n * newlinkedqueue\n * data\n * enqueue\n * dequeue\n * front\n * back\n * size\n * isempty\n * clear\n * contain\n\n\n# 3. circularqueue\n\n * newcircularqueue\n * data\n * enqueue\n * dequeue\n * front\n * back\n * size\n * isempty\n * isfull\n * clear\n * contain\n\n\n# 4. priorityqueue\n\n * newpriorityqueue\n * data\n * enqueue\n * dequeue\n * isempty\n * isfull\n * size\n\n\n\n\n# documentation\n\n\n# 1. arrayqueue\n\ncommon queue implemented by slice.\n\n\n# newarrayqueue\n\nreturn a arrayqueue pointer with specific capacity\n\nsignature:\n\nfunc newarrayqueue[t any](capacity int) *arrayqueue[t]\n\ntype arrayqueue[t any] struct {\n\titems    []t\n\thead     int\n\ttail     int\n\tcapacity int\n\tsize     int\n}\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    fmt.println(q.data()) // []\n}\n\n\n\n# data\n\nget all queue data\n\nsignature:\n\nfunc (q *arrayqueue[t]) data() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    fmt.println(q.data()) // []\n}\n\n\n\n# enqueue\n\nput element into queue, if queue is full, return false\n\nsignature:\n\nfunc (q *arrayqueue[t]) enqueue(item t) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# dequeue\n\nremove head element of queue and return it\n\nsignature:\n\nfunc (q *arrayqueue[t]) dequeue() (t, bool)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.dequeue()) // 1\n    fmt.println(q.data()) // 2,3\n}\n\n\n\n# front\n\njust get the head element of queue\n\nsignature:\n\nfunc (q *arrayqueue[t]) front() t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.front()) // 1\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# back\n\njust get the tail element of queue\n\nsignature:\n\nfunc (q *arrayqueue[t]) back() t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.back()) // 3\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# size\n\nget the number of elements in queue\n\nsignature:\n\nfunc (q *arrayqueue[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.size()) // 3\n}\n\n\n\n# isempty\n\ncheck if queue is empty or not\n\nsignature:\n\nfunc (q *arrayqueue[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    fmt.println(q.isempty()) // true\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isempty()) // false\n}\n\n\n\n# isfull\n\ncheck if queue is full or not\n\nsignature:\n\nfunc (q *arrayqueue[t]) isfull() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](3)\n    fmt.println(q.isfull()) // false\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isfull()) // true\n}\n\n\n\n# clear\n\nclean all data in queue\n\nsignature:\n\nfunc (q *arrayqueue[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n    q.clear()\n\n    fmt.println(q.isempty()) // true\n}\n\n\n\n# contain\n\ncheck if the value is in queue or not\n\nsignature:\n\nfunc (q *arrayqueue[t]) contain(value t) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newarrayqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.contain(1)) // true\n    fmt.println(q.contain(4)) // false\n}\n\n\n\n# 2. linkedqueue\n\ncommon queue implemented by link.\n\n\n# newlinkedqueue\n\nreturn a linkedqueue pointer\n\nsignature:\n\nfunc newlinkedqueue[t any]() *linkedqueue[t]\n\ntype linkedqueue[t any] struct {\n\thead   *datastructure.queuenode[t]\n\ttail   *datastructure.queuenode[t]\n\tlength int\n}\ntype queuenode[t any] struct {\n\tvalue t\n\tnext  *queuenode[t]\n}\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int]()\n    fmt.println(q.data()) // []\n}\n\n\n\n# data\n\nget all queue data\n\nsignature:\n\nfunc (q *linkedqueue[t]) data() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int]()\n    fmt.println(q.data()) // []\n}\n\n\n\n# enqueue\n\nput element into queue\n\nsignature:\n\nfunc (q *linkedqueue[t]) enqueue(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# dequeue\n\nremove head element of queue and return it\n\nsignature:\n\nfunc (q *linkedqueue[t]) dequeue() (t, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.dequeue()) // 1\n    fmt.println(q.data()) // 2,3\n}\n\n\n\n# front\n\njust get the head element of queue\n\nsignature:\n\nfunc (q *linkedqueue[t]) front() (*t, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.front()) // 1\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# back\n\njust get the tail element of queue\n\nsignature:\n\nfunc (q *linkedqueue[t]) back() (*t, error) \n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.back()) // 3\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# size\n\nget the number of elements in queue\n\nsignature:\n\nfunc (q *linkedqueue[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.size()) // 3\n}\n\n\n\n# isempty\n\ncheck if queue is empty or not\n\nsignature:\n\nfunc (q *linkedqueue[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    fmt.println(q.isempty()) // true\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isempty()) // false\n}\n\n\n\n# clear\n\nclean all data in queue\n\nsignature:\n\nfunc (q *linkedqueue[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n    q.clear()\n\n    fmt.println(q.isempty()) // true\n}\n\n\n\n# contain\n\ncheck if the value is in queue or not\n\nsignature:\n\nfunc (q *linkedqueue[t]) contain(value t) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newlinkedqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.contain(1)) // true\n    fmt.println(q.contain(4)) // false\n}\n\n\n\n# 3. circularqueue\n\ncircular queue implemented by slice.\n\n\n# newcircularqueue\n\nreturn a circularqueue pointer with specific capacity\n\nsignature:\n\nfunc newcircularqueue[t any](capacity int) *circularqueue[t]\n\ntype circularqueue[t any] struct {\n\tdata  []t\n\tfront int\n\trear  int\n\tcapacity  int\n}\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    fmt.println(q.data()) // []\n}\n\n\n\n# data\n\nget all queue data\n\nsignature:\n\nfunc (q *circularqueue[t]) data() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    fmt.println(q.data()) // []\n}\n\n\n\n# enqueue\n\nput element into queue, if queue is full, return error\n\nsignature:\n\nfunc (q *circularqueue[t]) enqueue(value t) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# dequeue\n\nremove head element of queue and return it\n\nsignature:\n\nfunc (q *circularqueue[t]) dequeue() (*t, bool)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    val := q.dequeue()\n    fmt.println(*val) // 1\n    fmt.println(q.data()) // 2,3\n}\n\n\n\n# front\n\njust get head element of queue\n\nsignature:\n\nfunc (q *circularqueue[t]) front() t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.front()) // 1\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# back\n\njust get tail element of queue\n\nsignature:\n\nfunc (q *circularqueue[t]) back() t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.back()) // 3\n    fmt.println(q.data()) // 1,2,3\n}\n\n\n\n# size\n\nget the number of elements in queue\n\nsignature:\n\nfunc (q *circularqueue[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.size()) // 3\n}\n\n\n\n# isempty\n\ncheck if queue is empty or not\n\nsignature:\n\nfunc (q *circularqueue[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    fmt.println(q.isempty()) // true\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isempty()) // false\n}\n\n\n\n# isfull\n\ncheck if queue is full or not\n\nsignature:\n\nfunc (q *circularqueue[t]) isfull() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](3)\n    fmt.println(q.isfull()) // false\n\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.isfull()) // true\n}\n\n\n\n# clear\n\nclean all data in queue\n\nsignature:\n\nfunc (q *circularqueue[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n    q.clear()\n\n    fmt.println(q.isempty()) // true\n}\n\n\n\n# contain\n\ncheck if the value is in queue or not\n\nsignature:\n\nfunc (q *circularqueue[t]) contain(value t) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newcircularqueue[int](5)\n    q.enqueue(1)\n    q.enqueue(2)\n    q.enqueue(3)\n\n    fmt.println(q.contain(1)) // true\n    fmt.println(q.contain(4)) // false\n}\n\n\n\n# 4. priorityqueue\n\ncommon queue implemented by slice.\n\n\n# newpriorityqueue\n\nreturn a priorityqueue pointer with specific capacity, param `comparator` is used to compare values of type t in the queue.\n\nsignature:\n\nfunc newpriorityqueue[t any](capacity int, comparator lancetconstraints.comparator) *priorityqueue[t]\n\ntype priorityqueue[t any] struct {\n\titems      []t\n\tsize       int\n\tcomparator lancetconstraints.comparator\n}\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newpriorityqueue[int](3)\n    fmt.println(q.data()) // []\n}\n\n\n\n# data\n\nget all queue data\n\nsignature:\n\nfunc (q *priorityqueue[t]) data() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\nfunc main() {\n    q := queue.newpriorityqueue[int](3)\n    fmt.println(q.data()) // []\n}\n\n\n\n# enqueue\n\nput element into queue, if queue is full, return false\n\nsignature:\n\nfunc (q *priorityqueue[t]) enqueue(item t) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    for i := 1; i < 11; i++ {\n\t\tq.enqueue(i)\n\t}\n\n    fmt.println(q.data()) // 10, 9, 6, 7, 8, 2, 5, 1, 4, 3\n}\n\n\n\n# dequeue\n\nremove head element of queue and return it\n\nsignature:\n\nfunc (q *priorityqueue[t]) dequeue() (t, bool)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    for i := 1; i < 11; i++ {\n\t\tq.enqueue(i)\n\t}\n    val, ok := pq.dequeue()\n    fmt.println(val) // 10\n    fmt.println(q.data()) // 9, 8, 6, 7, 3, 2, 5, 1, 4\n}\n\n\n\n# isempty\n\ncheck if queue is empty or not\n\nsignature:\n\nfunc (q *priorityqueue[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    fmt.println(q.isempty()) // true\n\n    for i := 1; i < 11; i++ {\n\t\tq.enqueue(i)\n\t}\n    fmt.println(q.isempty()) // false\n}\n\n\n\n# isfull\n\ncheck if queue is full or not\n\nsignature:\n\nfunc (q *priorityqueue[t]) isfull() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    fmt.println(q.isfull()) // false\n\n    for i := 1; i < 11; i++ {\n\t\tq.enqueue(i)\n\t}\n    fmt.println(q.isfull()) // true\n}\n\n\n\n# size\n\nget nubmers of elements in queue\n\nsignature:\n\nfunc (q *priorityqueue[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    queue "github.com/duke-git/lancet/v2/datastructure/queue"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    comparator := &intcomparator{}\n    q := queue.newpriorityqueue[int](10, comparator)\n    fmt.println(q.isfull()) // false\n\n    for i := 1; i < 5; i++ {\n\t\tq.enqueue(i)\n\t}\n    fmt.println(q.size()) // 4\n}\n',charsets:{}},{title:"Stack",frontmatter:{},regularPath:"/en/datastructure/stack.html",relativePath:"en/datastructure/stack.md",key:"v-b8d3fc58",path:"/en/datastructure/stack.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:225},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:404},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:491},{level:3,title:"1. ArrayStack",slug:"_1-arraystack",normalizedTitle:"1. arraystack",charIndex:501},{level:3,title:"2. LinkedStack",slug:"_2-linkedstack",normalizedTitle:"2. linkedstack",charIndex:596},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:704},{level:3,title:"1. ArrayStack",slug:"_1-arraystack-2",normalizedTitle:"1. arraystack",charIndex:501},{level:3,title:"",slug:"newarraystack",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"push",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"pop",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"peak",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear",normalizedTitle:"",charIndex:0},{level:3,title:"2. LinkedStack",slug:"_2-linkedstack-2",normalizedTitle:"2. linkedstack",charIndex:596},{level:3,title:"",slug:"newlinkedstack",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"push-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"pop-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"peak-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"data-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"size-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"isempty-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"clear-2",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"print",normalizedTitle:"",charIndex:0}],lastUpdated:"10/22/2022, 11:35:23 AM",lastUpdatedTimestamp:1666409723e3,headersStr:"Source Usage Index 1. ArrayStack 2. LinkedStack Documentation 1. ArrayStack         2. LinkedStack         ",content:'# Stack\n\nStack is an abstract data type that serves as a collection of elements. Elements follow the LIFO principle. FIFO is last-in, first-out, meaning that the most recently produced items are recorded as sold first.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/stack/arraystack.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/stack/linkedstack.go\n\n\n\n\n# Usage\n\nimport (\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\n\n\n\n\n# Index\n\n\n# 1. ArrayStack\n\n * NewArrayStack\n * Push\n * Pop\n * Peak\n * Data\n * Size\n * IsEmpty\n * Clear\n\n\n# 2. LinkedStack\n\n * NewLinkedStack\n * Push\n * Pop\n * Peak\n * Data\n * Size\n * IsEmpty\n * Clear\n * Print\n\n\n\n\n# Documentation\n\n\n# 1. ArrayStack\n\nArrayStack is a stack implemented by slice.\n\n\n# NewArrayStack\n\nReturn a empty ArrayStack pointer\n\nSignature:\n\ntype ArrayStack[T any] struct {\n\tdata   []T\n\tlength int\n}\nfunc NewArrayStack[T any]() *ArrayStack[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    fmt.Println(sk)\n}\n\n\n\n# Push\n\nPush element into array stack\n\nSignature:\n\nfunc (s *ArrayStack[T]) Push(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Pop\n\nDelete the top element of stack then return it, if stack is empty, return nil and error\n\nSignature:\n\nfunc (s *ArrayStack[T]) Pop() (*T, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    val, err := sk.Pop()\n    fmt.Println(err) //nil\n    fmt.Println(*val) //3\n\n    fmt.Println(sk.Data()) //[]int{2, 1}\n}\n\n\n\n# Peak\n\nReturn the top element of array stack\n\nSignature:\n\nfunc (s *ArrayStack[T]) Peak() (*T, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    val, err := sk.Peak()\n    fmt.Println(err) //nil\n    fmt.Println(*val) //3\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Data\n\nReturn a slice of all data in array stack\n\nSignature:\n\nfunc (s *ArrayStack[T]) Data() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Size\n\nReturn number of elements in array stack\n\nSignature:\n\nfunc (s *ArrayStack[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Size()) //3\n}\n\n\n\n# IsEmpty\n\nCheck if array stack is empty or not\n\nSignature:\n\nfunc (s *ArrayStack[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n    fmt.Println(sk.IsEmpty()) //true\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.IsEmpty()) //false\n}\n\n\n\n# Clear\n\nClear all elments in array stack\n\nSignature:\n\nfunc (s *ArrayStack[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewArrayStack[int]()\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    sk.Clear()\n\n    fmt.Println(sk.Data()) //[]int{}\n}\n\n\n\n# 2. LinkedStack\n\nLinkedStack is a stack implemented by linked list.\n\n\n# NewLinkedStack\n\nReturn a empty LinkedStack pointer\n\nSignature:\n\ntype StackNode[T any] struct {\n\tValue T\n\tNext  *StackNode[T]\n}\ntype LinkedStack[T any] struct {\n\ttop    *datastructure.StackNode[T]\n\tlength int\n}\nfunc NewLinkedStack[T any]() *LinkedStack[T]\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    fmt.Println(sk)\n}\n\n\n\n# Push\n\nPush element into linked stack\n\nSignature:\n\nfunc (s *LinkedStack[T]) Push(value T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Pop\n\nDelete the top element of stack then return it, if stack is empty, return nil and error\n\nSignature:\n\nfunc (s *LinkedStack[T]) Pop() (*T, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    val, err := sk.Pop()\n    fmt.Println(err) //nil\n    fmt.Println(*val) //3\n\n    fmt.Println(sk.Data()) //[]int{2, 1}\n}\n\n\n\n# Peak\n\nReturn the top element of linked stack\n\nSignature:\n\nfunc (s *LinkedStack[T]) Peak() (*T, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    val, err := sk.Peak()\n    fmt.Println(err) //nil\n    fmt.Println(*val) //3\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Data\n\nReturn a slice of all data in linked stack\n\nSignature:\n\nfunc (s *LinkedStack[T]) Data() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Data()) //[]int{3, 2, 1}\n}\n\n\n\n# Size\n\nReturn number of elements in linked stack\n\nSignature:\n\nfunc (s *LinkedStack[T]) Size() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.Size()) //3\n}\n\n\n\n# IsEmpty\n\nCheck if linked stack is empty or not\n\nSignature:\n\nfunc (s *LinkedStack[T]) IsEmpty() bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n    fmt.Println(sk.IsEmpty()) //true\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    fmt.Println(sk.IsEmpty()) //false\n}\n\n\n\n# Clear\n\nClear all elments in linked stack\n\nSignature:\n\nfunc (s *LinkedStack[T]) Clear()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n    sk.Clear()\n\n    fmt.Println(sk.Data()) //[]int{}\n}\n\n\n\n# Print\n\nPrint the structure of a linked stack\n\nSignature:\n\nfunc (s *LinkedStack[T]) Print()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.NewLinkedStack[int]()\n\n    sk.Push(1)\n    sk.Push(2)\n    sk.Push(3)\n\n\n    sk.Print() //[ &{Value:3 Next:0xc000010260}, &{Value:2 Next:0xc000010250}, &{Value:1 Next:<nil>},  ]\n}\n',normalizedContent:'# stack\n\nstack is an abstract data type that serves as a collection of elements. elements follow the lifo principle. fifo is last-in, first-out, meaning that the most recently produced items are recorded as sold first.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/stack/arraystack.go\n * https://github.com/duke-git/lancet/blob/main/datastructure/stack/linkedstack.go\n\n\n\n\n# usage\n\nimport (\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\n\n\n\n\n# index\n\n\n# 1. arraystack\n\n * newarraystack\n * push\n * pop\n * peak\n * data\n * size\n * isempty\n * clear\n\n\n# 2. linkedstack\n\n * newlinkedstack\n * push\n * pop\n * peak\n * data\n * size\n * isempty\n * clear\n * print\n\n\n\n\n# documentation\n\n\n# 1. arraystack\n\narraystack is a stack implemented by slice.\n\n\n# newarraystack\n\nreturn a empty arraystack pointer\n\nsignature:\n\ntype arraystack[t any] struct {\n\tdata   []t\n\tlength int\n}\nfunc newarraystack[t any]() *arraystack[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    fmt.println(sk)\n}\n\n\n\n# push\n\npush element into array stack\n\nsignature:\n\nfunc (s *arraystack[t]) push(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# pop\n\ndelete the top element of stack then return it, if stack is empty, return nil and error\n\nsignature:\n\nfunc (s *arraystack[t]) pop() (*t, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    val, err := sk.pop()\n    fmt.println(err) //nil\n    fmt.println(*val) //3\n\n    fmt.println(sk.data()) //[]int{2, 1}\n}\n\n\n\n# peak\n\nreturn the top element of array stack\n\nsignature:\n\nfunc (s *arraystack[t]) peak() (*t, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    val, err := sk.peak()\n    fmt.println(err) //nil\n    fmt.println(*val) //3\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# data\n\nreturn a slice of all data in array stack\n\nsignature:\n\nfunc (s *arraystack[t]) data() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# size\n\nreturn number of elements in array stack\n\nsignature:\n\nfunc (s *arraystack[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.size()) //3\n}\n\n\n\n# isempty\n\ncheck if array stack is empty or not\n\nsignature:\n\nfunc (s *arraystack[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n    fmt.println(sk.isempty()) //true\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.isempty()) //false\n}\n\n\n\n# clear\n\nclear all elments in array stack\n\nsignature:\n\nfunc (s *arraystack[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newarraystack[int]()\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    sk.clear()\n\n    fmt.println(sk.data()) //[]int{}\n}\n\n\n\n# 2. linkedstack\n\nlinkedstack is a stack implemented by linked list.\n\n\n# newlinkedstack\n\nreturn a empty linkedstack pointer\n\nsignature:\n\ntype stacknode[t any] struct {\n\tvalue t\n\tnext  *stacknode[t]\n}\ntype linkedstack[t any] struct {\n\ttop    *datastructure.stacknode[t]\n\tlength int\n}\nfunc newlinkedstack[t any]() *linkedstack[t]\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    fmt.println(sk)\n}\n\n\n\n# push\n\npush element into linked stack\n\nsignature:\n\nfunc (s *linkedstack[t]) push(value t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# pop\n\ndelete the top element of stack then return it, if stack is empty, return nil and error\n\nsignature:\n\nfunc (s *linkedstack[t]) pop() (*t, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    val, err := sk.pop()\n    fmt.println(err) //nil\n    fmt.println(*val) //3\n\n    fmt.println(sk.data()) //[]int{2, 1}\n}\n\n\n\n# peak\n\nreturn the top element of linked stack\n\nsignature:\n\nfunc (s *linkedstack[t]) peak() (*t, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    val, err := sk.peak()\n    fmt.println(err) //nil\n    fmt.println(*val) //3\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# data\n\nreturn a slice of all data in linked stack\n\nsignature:\n\nfunc (s *linkedstack[t]) data() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.data()) //[]int{3, 2, 1}\n}\n\n\n\n# size\n\nreturn number of elements in linked stack\n\nsignature:\n\nfunc (s *linkedstack[t]) size() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.size()) //3\n}\n\n\n\n# isempty\n\ncheck if linked stack is empty or not\n\nsignature:\n\nfunc (s *linkedstack[t]) isempty() bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n    fmt.println(sk.isempty()) //true\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    fmt.println(sk.isempty()) //false\n}\n\n\n\n# clear\n\nclear all elments in linked stack\n\nsignature:\n\nfunc (s *linkedstack[t]) clear()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n    sk.clear()\n\n    fmt.println(sk.data()) //[]int{}\n}\n\n\n\n# print\n\nprint the structure of a linked stack\n\nsignature:\n\nfunc (s *linkedstack[t]) print()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    stack "github.com/duke-git/lancet/v2/datastructure/stack"\n)\n\nfunc main() {\n    sk := stack.newlinkedstack[int]()\n\n    sk.push(1)\n    sk.push(2)\n    sk.push(3)\n\n\n    sk.print() //[ &{value:3 next:0xc000010260}, &{value:2 next:0xc000010250}, &{value:1 next:<nil>},  ]\n}\n',charsets:{}},{title:"Function",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/function/",relativePath:"en/function/README.md",key:"v-35c54d06",path:"/en/function/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:122},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:274},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:345},{level:3,title:"After",slug:"after",normalizedTitle:"after",charIndex:363},{level:3,title:"Before",slug:"before",normalizedTitle:"before",charIndex:1066},{level:3,title:"Curry",slug:"curry",normalizedTitle:"curry",charIndex:1769},{level:3,title:"Compose",slug:"compose",normalizedTitle:"compose",charIndex:2221},{level:3,title:"Debounced",slug:"debounced",normalizedTitle:"debounced",charIndex:2706},{level:3,title:"Delay",slug:"delay",normalizedTitle:"delay",charIndex:3404},{level:3,title:"Schedule",slug:"schedule",normalizedTitle:"schedule",charIndex:3746},{level:3,title:"Watcher",slug:"watcher",normalizedTitle:"watcher",charIndex:4230}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation After Before Curry Compose Debounced Delay Schedule Watcher",content:'# Function\n\nPackage function can control the flow of function execution and support part of functional programming.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/function/function.go\n * https://github.com/duke-git/lancet/blob/main/function/watcher.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/function"\n)\n\n\n\n\n\n# Documentation\n\n\n# After\n\nCreates a function that invokes given func once it\'s called n or more times.\n\nSignature:\n\nfunc After(n int, fn any) func(args ...any) []reflect.Value\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tarr := []string{"a", "b"}\n\tf := function.After(len(arr), func(i int) int {\n\t\tfmt.Println("last print")\n\t\treturn i\n\t})\n\n\ttype cb func(args ...any) []reflect.Value\n\tprint := func(i int, s string, fn cb) {\n\t\tfmt.Printf("arr[%d] is %s \\n", i, s)\n\t\tfn(i)\n\t}\n\n\tfmt.Println("arr is", arr)\n\tfor i := 0; i < len(arr); i++ {\n\t\tprint(i, arr[i], f)\n\t}\n\n    //output:\n    // arr is [a b]\n    // arr[0] is a\n    // arr[1] is b\n    // last print\n}\n\n\n\n# Before\n\ncreates a function that invokes func once it\'s called less than n times.\n\nSignature:\n\nfunc Before(n int, fn any) func(args ...any) []reflect.Value\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n    "github.com/duke-git/lancet/v2/internal"\n)\n\nfunc main() {\n\tarr := []string{"a", "b", "c", "d", "e"}\n\tf := function.Before(3, func(i int) int {\n\t\treturn i\n\t})\n\n\tvar res []int64\n\ttype cb func(args ...any) []reflect.Value\n\tappendStr := func(i int, s string, fn cb) {\n\t\tv := fn(i)\n\t\tres = append(res, v[0].Int())\n\t}\n\n\tfor i := 0; i < len(arr); i++ {\n\t\tappendStr(i, arr[i], f)\n\t}\n\n\texpected := []int64{0, 1, 2, 2, 2}\n\tfmt.Println(res) // 0, 1, 2, 2, 2\n}\n\n\n\n# Curry\n\nMake a curry function.\n\nSignature:\n\ntype Fn func(...any) any\nfunc (f Fn) Curry(i any) func(...any) any\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    add := func(a, b int) int {\n\t\treturn a + b\n\t}\n\tvar addCurry function.Fn = func(values ...any) any {\n\t\treturn add(values[0].(int), values[1].(int))\n\t}\n\tadd1 := addCurry.Curry(1)\n\tresult := add1(2)\n    fmt.Println(result) //3\n}\n\n\n\n# Compose\n\nCompose the function list from right to left, then return the composed function.\n\nSignature:\n\nfunc Compose(fnList ...func(...any) any) func(...any) any\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    add1 := func(v ...any) any {\n\t\treturn v[0].(int) + 1\n\t}\n    add2 := func(v ...any) any {\n\t\treturn v[0].(int) + 2\n\t}\n\n    add3 := function.Compose(add1, add2)\n\tresult := add3(1)\n\n    fmt.Println(result) //4\n}\n\n\n\n# Debounced\n\nCreates a debounced function that delays invoking fn until after wait duration have elapsed since the last time the debounced function was invoked.\n\nSignature:\n\nfunc Debounced(fn func(), duration time.Duration) func()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    count := 0\n\tadd := func() {\n\t\tcount++\n\t}\n\n\tdebouncedAdd := function.Debounced(add, 50*time.Microsecond)\n\tfunction.debouncedAdd()\n\tfunction.debouncedAdd()\n\tfunction.debouncedAdd()\n\tfunction.debouncedAdd()\n\n\ttime.Sleep(100 * time.Millisecond)\n\tfmt.Println(count) //1\n\n\tfunction.debouncedAdd()\n\ttime.Sleep(100 * time.Millisecond)\n\tfmt.Println(count) //2\n}\n\n\n\n# Delay\n\nInvoke function after delayed time.\n\nSignature:\n\nfunc Delay(delay time.Duration, fn any, args ...any)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tvar print = func(s string) {\n\t\tfmt.Println(count) //test delay\n\t}\n\tfunction.Delay(2*time.Second, print, "test delay")\n}\n\n\n\n# Schedule\n\nInvoke function every duration time, until close the returned bool chan.\n\nSignature:\n\nfunc Schedule(d time.Duration, fn any, args ...any) chan bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    var res []string\n\tappendStr := func(s string) {\n\t\tres = append(res, s)\n\t}\n\n\tstop := function.Schedule(1*time.Second, appendStr, "*")\n\ttime.Sleep(5 * time.Second)\n\tclose(stop)\n\n\tfmt.Println(res) //[* * * * *]\n}\n\n\n\n# Watcher\n\nWatcher is used for record code excution time. can start/stop/reset the watch timer. get the elapsed time of function execution.\n\nSignature:\n\ntype Watcher struct {\n\tstartTime int64\n\tstopTime  int64\n\texcuting  bool\n}\nfunc (w *Watcher) Start() //start the watcher\nfunc (w *Watcher) Stop() //stop the watcher\nfunc (w *Watcher) Reset() //reset the watcher\nfunc (w *Watcher) GetElapsedTime() time.Duration //get the elapsed time of function execution\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    w := &function.Watcher{}\n\tw.Start()\n\n\tlongRunningTask()\n\n\tfmt.Println(w.excuting) //true\n\n\tw.Stop()\n\n\teapsedTime := w.GetElapsedTime().Milliseconds()\n\tfmt.Println(eapsedTime)\n\n\tw.Reset()\n\n\tfmt.Println(w.excuting) //false\n\n\tfmt.Println(w.startTime) //0\n\tfmt.Println(w.stopTime) //0\n}\n\nfunc longRunningTask() {\n\tvar slice []int64\n\tfor i := 0; i < 10000000; i++ {\n\t\tslice = append(slice, int64(i))\n\t}\n}\n\n',normalizedContent:'# function\n\npackage function can control the flow of function execution and support part of functional programming.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/function/function.go\n * https://github.com/duke-git/lancet/blob/main/function/watcher.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/function"\n)\n\n\n\n\n\n# documentation\n\n\n# after\n\ncreates a function that invokes given func once it\'s called n or more times.\n\nsignature:\n\nfunc after(n int, fn any) func(args ...any) []reflect.value\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tarr := []string{"a", "b"}\n\tf := function.after(len(arr), func(i int) int {\n\t\tfmt.println("last print")\n\t\treturn i\n\t})\n\n\ttype cb func(args ...any) []reflect.value\n\tprint := func(i int, s string, fn cb) {\n\t\tfmt.printf("arr[%d] is %s \\n", i, s)\n\t\tfn(i)\n\t}\n\n\tfmt.println("arr is", arr)\n\tfor i := 0; i < len(arr); i++ {\n\t\tprint(i, arr[i], f)\n\t}\n\n    //output:\n    // arr is [a b]\n    // arr[0] is a\n    // arr[1] is b\n    // last print\n}\n\n\n\n# before\n\ncreates a function that invokes func once it\'s called less than n times.\n\nsignature:\n\nfunc before(n int, fn any) func(args ...any) []reflect.value\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n    "github.com/duke-git/lancet/v2/internal"\n)\n\nfunc main() {\n\tarr := []string{"a", "b", "c", "d", "e"}\n\tf := function.before(3, func(i int) int {\n\t\treturn i\n\t})\n\n\tvar res []int64\n\ttype cb func(args ...any) []reflect.value\n\tappendstr := func(i int, s string, fn cb) {\n\t\tv := fn(i)\n\t\tres = append(res, v[0].int())\n\t}\n\n\tfor i := 0; i < len(arr); i++ {\n\t\tappendstr(i, arr[i], f)\n\t}\n\n\texpected := []int64{0, 1, 2, 2, 2}\n\tfmt.println(res) // 0, 1, 2, 2, 2\n}\n\n\n\n# curry\n\nmake a curry function.\n\nsignature:\n\ntype fn func(...any) any\nfunc (f fn) curry(i any) func(...any) any\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    add := func(a, b int) int {\n\t\treturn a + b\n\t}\n\tvar addcurry function.fn = func(values ...any) any {\n\t\treturn add(values[0].(int), values[1].(int))\n\t}\n\tadd1 := addcurry.curry(1)\n\tresult := add1(2)\n    fmt.println(result) //3\n}\n\n\n\n# compose\n\ncompose the function list from right to left, then return the composed function.\n\nsignature:\n\nfunc compose(fnlist ...func(...any) any) func(...any) any\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    add1 := func(v ...any) any {\n\t\treturn v[0].(int) + 1\n\t}\n    add2 := func(v ...any) any {\n\t\treturn v[0].(int) + 2\n\t}\n\n    add3 := function.compose(add1, add2)\n\tresult := add3(1)\n\n    fmt.println(result) //4\n}\n\n\n\n# debounced\n\ncreates a debounced function that delays invoking fn until after wait duration have elapsed since the last time the debounced function was invoked.\n\nsignature:\n\nfunc debounced(fn func(), duration time.duration) func()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    count := 0\n\tadd := func() {\n\t\tcount++\n\t}\n\n\tdebouncedadd := function.debounced(add, 50*time.microsecond)\n\tfunction.debouncedadd()\n\tfunction.debouncedadd()\n\tfunction.debouncedadd()\n\tfunction.debouncedadd()\n\n\ttime.sleep(100 * time.millisecond)\n\tfmt.println(count) //1\n\n\tfunction.debouncedadd()\n\ttime.sleep(100 * time.millisecond)\n\tfmt.println(count) //2\n}\n\n\n\n# delay\n\ninvoke function after delayed time.\n\nsignature:\n\nfunc delay(delay time.duration, fn any, args ...any)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tvar print = func(s string) {\n\t\tfmt.println(count) //test delay\n\t}\n\tfunction.delay(2*time.second, print, "test delay")\n}\n\n\n\n# schedule\n\ninvoke function every duration time, until close the returned bool chan.\n\nsignature:\n\nfunc schedule(d time.duration, fn any, args ...any) chan bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    var res []string\n\tappendstr := func(s string) {\n\t\tres = append(res, s)\n\t}\n\n\tstop := function.schedule(1*time.second, appendstr, "*")\n\ttime.sleep(5 * time.second)\n\tclose(stop)\n\n\tfmt.println(res) //[* * * * *]\n}\n\n\n\n# watcher\n\nwatcher is used for record code excution time. can start/stop/reset the watch timer. get the elapsed time of function execution.\n\nsignature:\n\ntype watcher struct {\n\tstarttime int64\n\tstoptime  int64\n\texcuting  bool\n}\nfunc (w *watcher) start() //start the watcher\nfunc (w *watcher) stop() //stop the watcher\nfunc (w *watcher) reset() //reset the watcher\nfunc (w *watcher) getelapsedtime() time.duration //get the elapsed time of function execution\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    w := &function.watcher{}\n\tw.start()\n\n\tlongrunningtask()\n\n\tfmt.println(w.excuting) //true\n\n\tw.stop()\n\n\teapsedtime := w.getelapsedtime().milliseconds()\n\tfmt.println(eapsedtime)\n\n\tw.reset()\n\n\tfmt.println(w.excuting) //false\n\n\tfmt.println(w.starttime) //0\n\tfmt.println(w.stoptime) //0\n}\n\nfunc longrunningtask() {\n\tvar slice []int64\n\tfor i := 0; i < 10000000; i++ {\n\t\tslice = append(slice, int64(i))\n\t}\n}\n\n',charsets:{}},{title:"Tree",frontmatter:{},regularPath:"/en/datastructure/tree.html",relativePath:"en/datastructure/tree.md",key:"v-20bbec40",path:"/en/datastructure/tree.html",headers:[{level:2,title:"Source",slug:"source",normalizedTitle:"source",charIndex:153},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:244},{level:2,title:"Index",slug:"index",normalizedTitle:"index",charIndex:329},{level:3,title:"1. BSTree",slug:"_1-bstree",normalizedTitle:"1. bstree",charIndex:339},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:512},{level:2,title:"1. BSTree",slug:"_1-bstree-2",normalizedTitle:"1. bstree",charIndex:339},{level:3,title:"",slug:"newbstree",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"insert",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"delete",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"preordertraverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"inordertraverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"postordertraverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"levelordertraverse",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"depth",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"hassubtree",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"print",normalizedTitle:"",charIndex:0}],lastUpdated:"10/22/2022, 11:35:23 AM",lastUpdatedTimestamp:1666409723e3,headersStr:"Source Usage Index 1. BSTree Documentation 1. BSTree          ",content:'# Tree\n\nTree is a collection of tree nodes. Each tree node has a value, a left pointer point to left node and a right pointer point to right node.\n\n\n\n\n# Source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/tree/bstree.go\n\n\n\n\n# Usage\n\nimport (\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\n\n\n\n\n# Index\n\n\n# 1. BSTree\n\n * NewBSTree\n\n * Insert\n\n * Delete\n\n * PreOrderTraverse\n\n * InOrderTraverse\n\n * PostOrderTraverse\n\n * LevelOrderTraverse\n\n * Depth\n\n * HasSubTree\n\n * Print\n\n\n\n\n# Documentation\n\n\n# 1. BSTree\n\nBSTree is a binary search tree data structure in which each node has at two children, which are referred to as the left child and the right child. In BSTree: leftNode < rootNode < rightNode. Type T should implements Compare function in lancetconstraints.Comparator interface.\n\n\n# NewBSTree\n\nMake a BSTree pointer instance\n\nSignature:\n\nfunc NewBSTree[T any](rootData T, comparator lancetconstraints.Comparator) *BSTree[T]\n\ntype BSTree[T any] struct {\n\troot       *datastructure.TreeNode[T]\n\tcomparator lancetconstraints.Comparator\n}\n\ntype TreeNode[T any] struct {\n\tValue T\n\tLeft  *TreeNode[T]\n\tRight *TreeNode[T]\n}\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    fmt.Println(bstree) //\n}\n\n\n\n# Insert\n\nInsert value into binary search tree\n\nSignature:\n\nfunc (t *BSTree[T]) Insert(data T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.PreOrderTraverse()) //6, 5, 2, 4, 7\n}\n\n\n\n# Delete\n\nDelete value of binary search tree\n\nSignature:\n\nfunc (t *BSTree[T]) Delete(data T)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    bstree.Delete(4)\n\n    fmt.Println(bstree.PreOrderTraverse()) //2, 5, 6, 7\n}\n\n\n\n# PreOrderTraverse\n\nTraverse tree nodes in pre order\n\nSignature:\n\nfunc (t *BSTree[T]) PreOrderTraverse() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.PreOrderTraverse()) //6, 5, 2, 4, 7\n}\n\n\n\n# InOrderTraverse\n\nTraverse tree nodes in middle order\n\nSignature:\n\nfunc (t *BSTree[T]) InOrderTraverse() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.InOrderTraverse()) //2, 4, 5, 6, 7\n}\n\n\n\n# PostOrderTraverse\n\nTraverse tree nodes in post order\n\nSignature:\n\nfunc (t *BSTree[T]) PostOrderTraverse() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.PostOrderTraverse()) //5, 2, 4, 7, 6\n}\n\n\n\n# LevelOrderTraverse\n\nTraverse tree nodes in node level order\n\nSignature:\n\nfunc (t *BSTree[T]) LevelOrderTraverse() []T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.LevelOrderTraverse()) //6, 5, 7, 2, 4\n}\n\n\n\n# Depth\n\nGet the depth of a binary saerch tree\n\nSignature:\n\nfunc (t *BSTree[T]) Depth() int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.Depth()) //4\n}\n\n\n\n# HasSubTree\n\nCheck if the given tree is sub tree of origin tree or not\n\nSignature:\n\nfunc (t *BSTree[T]) HasSubTree(subTree *BSTree[T]) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    superTree := tree.NewBSTree(8, &intComparator{})\n\tsuperTree.Insert(4)\n\tsuperTree.Insert(5)\n\tsuperTree.Insert(6)\n\tsuperTree.Insert(9)\n\tsuperTree.Insert(4)\n\n    subTree := tree.NewBSTree(5, &intComparator{})\n\tsubTree.Insert(4)\n\tsubTree.Insert(6)\n\n    fmt.Println(superTree.HasSubTree(subTree)) //true\n    fmt.Println(subTree.HasSubTree(superTree)) //false\n}\n\n\n\n# Print\n\nPrint the structure of binary saerch tree\n\nSignature:\n\nfunc (t *BSTree[T]) Print()\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intComparator struct{}\n\nfunc (c *intComparator) Compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.NewBSTree(6, &intComparator{})\n    bstree.Insert(7)\n\tbstree.Insert(5)\n\tbstree.Insert(2)\n\tbstree.Insert(4)\n\n    fmt.Println(bstree.Print())\n//        6\n//       / \\\n//      /   \\\n//     /     \\\n//    /       \\\n//    5       7\n//   /\n//  /\n//  2\n//   \\\n//    4\n}\n',normalizedContent:'# tree\n\ntree is a collection of tree nodes. each tree node has a value, a left pointer point to left node and a right pointer point to right node.\n\n\n\n\n# source\n\n * https://github.com/duke-git/lancet/blob/main/datastructure/tree/bstree.go\n\n\n\n\n# usage\n\nimport (\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\n\n\n\n\n# index\n\n\n# 1. bstree\n\n * newbstree\n\n * insert\n\n * delete\n\n * preordertraverse\n\n * inordertraverse\n\n * postordertraverse\n\n * levelordertraverse\n\n * depth\n\n * hassubtree\n\n * print\n\n\n\n\n# documentation\n\n\n# 1. bstree\n\nbstree is a binary search tree data structure in which each node has at two children, which are referred to as the left child and the right child. in bstree: leftnode < rootnode < rightnode. type t should implements compare function in lancetconstraints.comparator interface.\n\n\n# newbstree\n\nmake a bstree pointer instance\n\nsignature:\n\nfunc newbstree[t any](rootdata t, comparator lancetconstraints.comparator) *bstree[t]\n\ntype bstree[t any] struct {\n\troot       *datastructure.treenode[t]\n\tcomparator lancetconstraints.comparator\n}\n\ntype treenode[t any] struct {\n\tvalue t\n\tleft  *treenode[t]\n\tright *treenode[t]\n}\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    fmt.println(bstree) //\n}\n\n\n\n# insert\n\ninsert value into binary search tree\n\nsignature:\n\nfunc (t *bstree[t]) insert(data t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.preordertraverse()) //6, 5, 2, 4, 7\n}\n\n\n\n# delete\n\ndelete value of binary search tree\n\nsignature:\n\nfunc (t *bstree[t]) delete(data t)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    bstree.delete(4)\n\n    fmt.println(bstree.preordertraverse()) //2, 5, 6, 7\n}\n\n\n\n# preordertraverse\n\ntraverse tree nodes in pre order\n\nsignature:\n\nfunc (t *bstree[t]) preordertraverse() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.preordertraverse()) //6, 5, 2, 4, 7\n}\n\n\n\n# inordertraverse\n\ntraverse tree nodes in middle order\n\nsignature:\n\nfunc (t *bstree[t]) inordertraverse() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.inordertraverse()) //2, 4, 5, 6, 7\n}\n\n\n\n# postordertraverse\n\ntraverse tree nodes in post order\n\nsignature:\n\nfunc (t *bstree[t]) postordertraverse() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.postordertraverse()) //5, 2, 4, 7, 6\n}\n\n\n\n# levelordertraverse\n\ntraverse tree nodes in node level order\n\nsignature:\n\nfunc (t *bstree[t]) levelordertraverse() []t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.levelordertraverse()) //6, 5, 7, 2, 4\n}\n\n\n\n# depth\n\nget the depth of a binary saerch tree\n\nsignature:\n\nfunc (t *bstree[t]) depth() int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.depth()) //4\n}\n\n\n\n# hassubtree\n\ncheck if the given tree is sub tree of origin tree or not\n\nsignature:\n\nfunc (t *bstree[t]) hassubtree(subtree *bstree[t]) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    supertree := tree.newbstree(8, &intcomparator{})\n\tsupertree.insert(4)\n\tsupertree.insert(5)\n\tsupertree.insert(6)\n\tsupertree.insert(9)\n\tsupertree.insert(4)\n\n    subtree := tree.newbstree(5, &intcomparator{})\n\tsubtree.insert(4)\n\tsubtree.insert(6)\n\n    fmt.println(supertree.hassubtree(subtree)) //true\n    fmt.println(subtree.hassubtree(supertree)) //false\n}\n\n\n\n# print\n\nprint the structure of binary saerch tree\n\nsignature:\n\nfunc (t *bstree[t]) print()\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    tree "github.com/duke-git/lancet/v2/datastructure/tree"\n)\n\ntype intcomparator struct{}\n\nfunc (c *intcomparator) compare(v1, v2 any) int {\n\tval1, _ := v1.(int)\n\tval2, _ := v2.(int)\n\n\tif val1 < val2 {\n\t\treturn -1\n\t} else if val1 > val2 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc main() {\n    bstree := tree.newbstree(6, &intcomparator{})\n    bstree.insert(7)\n\tbstree.insert(5)\n\tbstree.insert(2)\n\tbstree.insert(4)\n\n    fmt.println(bstree.print())\n//        6\n//       / \\\n//      /   \\\n//     /     \\\n//    /       \\\n//    5       7\n//   /\n//  /\n//  2\n//   \\\n//    4\n}\n',charsets:{}},{title:"Maputil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/maputil/",relativePath:"en/maputil/README.md",key:"v-d2ed45ea",path:"/en/maputil/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:76},{level:2,title:"Example:",slug:"example",normalizedTitle:"example:",charIndex:154},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:226},{level:3,title:"ForEach",slug:"foreach",normalizedTitle:"foreach",charIndex:244},{level:3,title:"Filter",slug:"filter",normalizedTitle:"filter",charIndex:691},{level:3,title:"Intersect",slug:"intersect",normalizedTitle:"intersect",charIndex:1310},{level:3,title:"Keys",slug:"keys",normalizedTitle:"keys",charIndex:1992},{level:3,title:"Merge",slug:"merge",normalizedTitle:"merge",charIndex:2366},{level:3,title:"Minus",slug:"minus",normalizedTitle:"minus",charIndex:2774},{level:3,title:"Values",slug:"values",normalizedTitle:"values",charIndex:3198},{level:3,title:"IsDisjoint",slug:"isdisjoint",normalizedTitle:"isdisjoint",charIndex:3603}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Example: Documentation ForEach Filter Intersect Keys Merge Minus Values IsDisjoint",content:'# Maputil\n\nPackage maputil includes some functions to manipulate map.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/maputil/map.go\n\n\n\n\n# Example:\n\nimport (\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\n\n\n\n\n# Documentation\n\n\n# ForEach\n\nExecutes iteratee funcation for every key and value pair in map.\n\nSignature:\n\nfunc ForEach[K comparable, V any](m map[K]V, iteratee func(key K, value V))\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t\t"d": 4,\n\t}\n\n\tvar sum int\n\n\tmaputil.ForEach(m, func(_ string, value int) {\n\t\tsum += value\n\t})\n\tfmt.Println(sum) // 10\n}\n\n\n\n# Filter\n\nIterates over map, return a new map contains all key and value pairs pass the predicate function.\n\nSignature:\n\nfunc Filter[K comparable, V any](m map[K]V, predicate func(key K, value V) bool) map[K]V\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t\t"d": 4,\n\t\t"e": 5,\n\t}\n\tisEven := func(_ string, value int) bool {\n\t\treturn value%2 == 0\n\t}\n\n\tmaputil.Filter(m, func(_ string, value int) {\n\t\tsum += value\n\t})\n\tres := maputil.Filter(m, isEven)\n\tfmt.Println(res) // map[string]int{"b": 2, "d": 4,}\n}\n\n\n\n# Intersect\n\nIterates over maps, return a new map of key and value pairs in all given maps.\n\nSignature:\n\nfunc Intersect[K comparable, V any](maps ...map[K]V) map[K]V\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t}\n\n\tm2 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 6,\n\t\t"d": 7,\n\t}\n\n\tm3 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 9,\n\t\t"e": 9,\n\t}\n\n\tfmt.Println(maputil.Intersect(m1)) // map[string]int{"a": 1, "b": 2, "c": 3}\n\n\tfmt.Println(maputil.Intersect(m1, m2)) // map[string]int{"a": 1, "b": 2}\n\n\tfmt.Println(maputil.Intersect(m1, m2, m3)) // map[string]int{"a": 1}\n}\n\n\n\n# Keys\n\nReturns a slice of the map\'s keys.\n\nSignature:\n\nfunc Keys[K comparable, V any](m map[K]V) []K\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tkeys := maputil.Keys(m)\n\tsort.Ints(keys)\n\tfmt.Println(keys) // []int{1, 2, 3, 4, 5}\n}\n\n\n\n# Merge\n\nMerge maps, next key will overwrite previous key.\n\nSignature:\n\nfunc Merge[K comparable, V any](maps ...map[K]V) map[K]V\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[int]string{\n\t\t1: "a",\n\t\t2: "b",\n\t}\n\tm2 := map[int]string{\n\t\t1: "1",\n\t\t3: "2",\n\t}\n\tfmt.Println(maputil.Merge(m1, m2)) // map[int]string{1:"1", 2:"b", 3:"2",}\n}\n\n\n\n# Minus\n\nCreates an map of whose key in mapA but not in mapB.\n\nSignature:\n\nfunc Minus[K comparable, V any](mapA, mapB map[K]V) map[K]V\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t}\n\n\tm2 := map[string]int{\n\t\t"a": 11,\n\t\t"b": 22,\n\t\t"d": 33,\n\t}\n\n\tfmt.Println(maputil.Minus(m1, m2)) //map[string]int{"c": 3}\n}\n\n\n\n# Values\n\nReturns a slice of the map\'s values.\n\nSignature:\n\nfunc Values[K comparable, V any](m map[K]V) []V\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tvalues := maputil.Values(m)\n\tsort.Strings(values)\n\n\tfmt.Println(values) // []string{"a", "a", "b", "c", "d"}\n}\n\n\n\n# IsDisjoint\n\nChecks two maps are disjoint if they have no keys in common\n\nSignature:\n\nfunc IsDisjoint[K comparable, V any](mapA, mapB map[K]V) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tm2 := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tm3 := map[int]string{\n\t\t6: "a",\n\t}\n\n\tok := maputil.IsDisjoint(m2, m1)\n\tfmt.Println(ok) // false\n\n\tok = maputil.IsDisjoint(m2, m3)\n\tfmt.Println(ok) // true\n}\n',normalizedContent:'# maputil\n\npackage maputil includes some functions to manipulate map.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/maputil/map.go\n\n\n\n\n# example:\n\nimport (\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\n\n\n\n\n# documentation\n\n\n# foreach\n\nexecutes iteratee funcation for every key and value pair in map.\n\nsignature:\n\nfunc foreach[k comparable, v any](m map[k]v, iteratee func(key k, value v))\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t\t"d": 4,\n\t}\n\n\tvar sum int\n\n\tmaputil.foreach(m, func(_ string, value int) {\n\t\tsum += value\n\t})\n\tfmt.println(sum) // 10\n}\n\n\n\n# filter\n\niterates over map, return a new map contains all key and value pairs pass the predicate function.\n\nsignature:\n\nfunc filter[k comparable, v any](m map[k]v, predicate func(key k, value v) bool) map[k]v\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t\t"d": 4,\n\t\t"e": 5,\n\t}\n\tiseven := func(_ string, value int) bool {\n\t\treturn value%2 == 0\n\t}\n\n\tmaputil.filter(m, func(_ string, value int) {\n\t\tsum += value\n\t})\n\tres := maputil.filter(m, iseven)\n\tfmt.println(res) // map[string]int{"b": 2, "d": 4,}\n}\n\n\n\n# intersect\n\niterates over maps, return a new map of key and value pairs in all given maps.\n\nsignature:\n\nfunc intersect[k comparable, v any](maps ...map[k]v) map[k]v\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t}\n\n\tm2 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 6,\n\t\t"d": 7,\n\t}\n\n\tm3 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 9,\n\t\t"e": 9,\n\t}\n\n\tfmt.println(maputil.intersect(m1)) // map[string]int{"a": 1, "b": 2, "c": 3}\n\n\tfmt.println(maputil.intersect(m1, m2)) // map[string]int{"a": 1, "b": 2}\n\n\tfmt.println(maputil.intersect(m1, m2, m3)) // map[string]int{"a": 1}\n}\n\n\n\n# keys\n\nreturns a slice of the map\'s keys.\n\nsignature:\n\nfunc keys[k comparable, v any](m map[k]v) []k\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tkeys := maputil.keys(m)\n\tsort.ints(keys)\n\tfmt.println(keys) // []int{1, 2, 3, 4, 5}\n}\n\n\n\n# merge\n\nmerge maps, next key will overwrite previous key.\n\nsignature:\n\nfunc merge[k comparable, v any](maps ...map[k]v) map[k]v\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[int]string{\n\t\t1: "a",\n\t\t2: "b",\n\t}\n\tm2 := map[int]string{\n\t\t1: "1",\n\t\t3: "2",\n\t}\n\tfmt.println(maputil.merge(m1, m2)) // map[int]string{1:"1", 2:"b", 3:"2",}\n}\n\n\n\n# minus\n\ncreates an map of whose key in mapa but not in mapb.\n\nsignature:\n\nfunc minus[k comparable, v any](mapa, mapb map[k]v) map[k]v\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t}\n\n\tm2 := map[string]int{\n\t\t"a": 11,\n\t\t"b": 22,\n\t\t"d": 33,\n\t}\n\n\tfmt.println(maputil.minus(m1, m2)) //map[string]int{"c": 3}\n}\n\n\n\n# values\n\nreturns a slice of the map\'s values.\n\nsignature:\n\nfunc values[k comparable, v any](m map[k]v) []v\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tvalues := maputil.values(m)\n\tsort.strings(values)\n\n\tfmt.println(values) // []string{"a", "a", "b", "c", "d"}\n}\n\n\n\n# isdisjoint\n\nchecks two maps are disjoint if they have no keys in common\n\nsignature:\n\nfunc isdisjoint[k comparable, v any](mapa, mapb map[k]v) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tm2 := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tm3 := map[int]string{\n\t\t6: "a",\n\t}\n\n\tok := maputil.isdisjoint(m2, m1)\n\tfmt.println(ok) // false\n\n\tok = maputil.isdisjoint(m2, m3)\n\tfmt.println(ok) // true\n}\n',charsets:{}},{title:"Mathutil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/mathutil/",relativePath:"en/mathutil/README.md",key:"v-ee866dce",path:"/en/mathutil/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:83},{level:2,title:"Example:",slug:"example",normalizedTitle:"example:",charIndex:167},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:240},{level:3,title:"Average",slug:"average",normalizedTitle:"average",charIndex:258},{level:3,title:"Exponent",slug:"exponent",normalizedTitle:"exponent",charIndex:708},{level:3,title:"Fibonacci",slug:"fibonacci",normalizedTitle:"fibonacci",charIndex:1039},{level:3,title:"Factorial",slug:"factorial",normalizedTitle:"factorial",charIndex:1496},{level:3,title:"Max",slug:"max",normalizedTitle:"max",charIndex:1852},{level:3,title:"MaxBy",slug:"maxby",normalizedTitle:"maxby",charIndex:2196},{level:3,title:"Min",slug:"min",normalizedTitle:"min",charIndex:2854},{level:3,title:"MinBy",slug:"minby",normalizedTitle:"minby",charIndex:3198},{level:3,title:"Percent",slug:"percent",normalizedTitle:"percent",charIndex:3852},{level:3,title:"RoundToFloat",slug:"roundtofloat",normalizedTitle:"roundtofloat",charIndex:311},{level:3,title:"RoundToString",slug:"roundtostring",normalizedTitle:"roundtostring",charIndex:4672},{level:3,title:"TruncRound",slug:"truncround",normalizedTitle:"truncround",charIndex:5183}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Example: Documentation Average Exponent Fibonacci Factorial Max MaxBy Min MinBy Percent RoundToFloat RoundToString TruncRound",content:'# Mathutil\n\nPackage mathutil implements some functions for math calculation.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/mathutil/mathutil.go\n\n\n\n\n# Example:\n\nimport (\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\n\n\n\n\n# Documentation\n\n\n# Average\n\nReturn average value of numbers. Maybe call RoundToFloat to round result.\n\nSignature:\n\nfunc Average[T lancetconstraints.Number](numbers ...T) T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Average(0, 0)) //0\n\tfmt.Println(mathutil.Average(1, 1)) //1\n\tavg := mathutil.Average(1.2, 1.4) //1.2999999998\n\troundAvg := mmathutil.RoundToFloat(avg, 1) // 1.3\n}\n\n\n\n# Exponent\n\nCalculate x to the nth power.\n\nSignature:\n\nfunc Exponent(x, n int64) int64\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Exponent(10, 0)) //1\n\tfmt.Println(mathutil.Exponent(10, 1)) //10\n\tfmt.Println(mathutil.Exponent(10, 2)) //100\n}\n\n\n\n# Fibonacci\n\nCalculate the nth number of fibonacci sequence.\n\nSignature:\n\nfunc Fibonacci(first, second, n int) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Fibonacci(1, 1, 1)) //1\n\tfmt.Println(mathutil.Fibonacci(1, 1, 2)) //1\n\tfmt.Println(mathutil.Fibonacci(1, 1, 3)) //2\n\tfmt.Println(mathutil.Fibonacci(1, 1, 4)) //3\n\tfmt.Println(mathutil.Fibonacci(1, 1, 5)) //5\n}\n\n\n\n# Factorial\n\nCalculate the factorial of x.\n\nSignature:\n\nfunc Factorial(x uint) uint\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Factorial(0)) //1\n\tfmt.Println(mathutil.Factorial(1)) //1\n\tfmt.Println(mathutil.Factorial(2)) //2\n\tfmt.Println(mathutil.Factorial(3)) //6\n}\n\n\n\n# Max\n\nReturn max value of numbers.\n\nSignature:\n\nfunc Max[T lancetconstraints.Number](numbers ...T) T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Max(0, 0)) //0\n\tfmt.Println(mathutil.Max(1, 2, 3)) //3\n\tfmt.Println(mathutil.Max(1.2, 1.4, 1.1, 1.4)) //1.4\n}\n\n\n\n# MaxBy\n\nReturn the maximum value of a slice using the given comparator function.\n\nSignature:\n\nfunc MaxBy[T any](slice []T, comparator func(T, T) bool) T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tres1 := mathutil.MaxBy([]string{"a", "ab", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.Println(res1) //abc\n\n\tres2 := mathutil.MaxBy([]string{"abd", "abc", "ab"}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.Println(res2) //abd\n\n\tres3 := mathutil.MaxBy([]string{}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.Println(res3) //“”\n}\n\n\n\n# Min\n\nReturn min value of numbers.\n\nSignature:\n\nfunc Min[T lancetconstraints.Number](numbers ...T) T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Min(0, 0)) //0\n\tfmt.Println(mathutil.Min(1, 2, 3)) //1\n\tfmt.Println(mathutil.Min(1.2, 1.4, 1.1, 1.4)) //1.1\n}\n\n\n\n# MinBy\n\nReturn the minimum value of a slice using the given comparator function.\n\nSignature:\n\nfunc MinBy[T any](slice []T, comparator func(T, T) bool) T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tres1 := mathutil.MinBy([]string{"a", "ab", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.Println(res1) //a\n\n\tres2 := mathutil.MinBy([]string{"ab", "ac", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.Println(res2) //ab\n\n\tres3 := mathutil.MinBy([]string{}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.Println(res3) //“”\n}\n\n\n\n# Percent\n\ncalculate the percentage of val to total, retain n decimal places.\n\nSignature:\n\nfunc Percent(val, total float64, n int) float64\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Percent(1, 2, 2)) //1\n\tfmt.Println(mathutil.Percent(0.1, 0.3, 2)) //33.33\n}\n\n\n\n# RoundToFloat\n\nRound float up to n decimal places.\n\nSignature:\n\nfunc RoundToFloat(x float64, n int) float64\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.RoundToFloat(0, 0)) //0\n\tfmt.Println(mathutil.RoundToFloat(0, 1)) //0\n\tfmt.Println(mathutil.RoundToFloat(0.124, 2)) //0.12\n\tfmt.Println(mathutil.RoundToFloat(0.125, 2)) //0.13\n\tfmt.Println(mathutil.RoundToFloat(0.125, 3)) //0.125\n}\n\n\n\n# RoundToString\n\nRound float up to n decimal places. will return string.\n\nSignature:\n\nfunc RoundToString(x float64, n int) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.RoundToString(0, 0)) //"0"\n\tfmt.Println(mathutil.RoundToString(0, 1)) //"0.0:\n\tfmt.Println(mathutil.RoundToString(0.124, 2)) //"0.12"\n\tfmt.Println(mathutil.RoundToString(0.125, 2)) //"0.13"\n\tfmt.Println(mathutil.RoundToString(0.125, 3)) //"0.125"\n}\n\n\n\n# TruncRound\n\nRound float off n decimal places.\n\nSignature:\n\nfunc TruncRound(x float64, n int) float64\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.TruncRound(0, 0)) //0\n\tfmt.Println(mathutil.TruncRound(0, 1)) //0\n\tfmt.Println(mathutil.TruncRound(0.124, 2)) //0.12\n\tfmt.Println(mathutil.TruncRound(0.125, 2)) //0.12\n\tfmt.Println(mathutil.TruncRound(0.125, 3)) //0.125\n}\n',normalizedContent:'# mathutil\n\npackage mathutil implements some functions for math calculation.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/mathutil/mathutil.go\n\n\n\n\n# example:\n\nimport (\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\n\n\n\n\n# documentation\n\n\n# average\n\nreturn average value of numbers. maybe call roundtofloat to round result.\n\nsignature:\n\nfunc average[t lancetconstraints.number](numbers ...t) t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.average(0, 0)) //0\n\tfmt.println(mathutil.average(1, 1)) //1\n\tavg := mathutil.average(1.2, 1.4) //1.2999999998\n\troundavg := mmathutil.roundtofloat(avg, 1) // 1.3\n}\n\n\n\n# exponent\n\ncalculate x to the nth power.\n\nsignature:\n\nfunc exponent(x, n int64) int64\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.exponent(10, 0)) //1\n\tfmt.println(mathutil.exponent(10, 1)) //10\n\tfmt.println(mathutil.exponent(10, 2)) //100\n}\n\n\n\n# fibonacci\n\ncalculate the nth number of fibonacci sequence.\n\nsignature:\n\nfunc fibonacci(first, second, n int) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.fibonacci(1, 1, 1)) //1\n\tfmt.println(mathutil.fibonacci(1, 1, 2)) //1\n\tfmt.println(mathutil.fibonacci(1, 1, 3)) //2\n\tfmt.println(mathutil.fibonacci(1, 1, 4)) //3\n\tfmt.println(mathutil.fibonacci(1, 1, 5)) //5\n}\n\n\n\n# factorial\n\ncalculate the factorial of x.\n\nsignature:\n\nfunc factorial(x uint) uint\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.factorial(0)) //1\n\tfmt.println(mathutil.factorial(1)) //1\n\tfmt.println(mathutil.factorial(2)) //2\n\tfmt.println(mathutil.factorial(3)) //6\n}\n\n\n\n# max\n\nreturn max value of numbers.\n\nsignature:\n\nfunc max[t lancetconstraints.number](numbers ...t) t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.max(0, 0)) //0\n\tfmt.println(mathutil.max(1, 2, 3)) //3\n\tfmt.println(mathutil.max(1.2, 1.4, 1.1, 1.4)) //1.4\n}\n\n\n\n# maxby\n\nreturn the maximum value of a slice using the given comparator function.\n\nsignature:\n\nfunc maxby[t any](slice []t, comparator func(t, t) bool) t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tres1 := mathutil.maxby([]string{"a", "ab", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.println(res1) //abc\n\n\tres2 := mathutil.maxby([]string{"abd", "abc", "ab"}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.println(res2) //abd\n\n\tres3 := mathutil.maxby([]string{}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.println(res3) //“”\n}\n\n\n\n# min\n\nreturn min value of numbers.\n\nsignature:\n\nfunc min[t lancetconstraints.number](numbers ...t) t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.min(0, 0)) //0\n\tfmt.println(mathutil.min(1, 2, 3)) //1\n\tfmt.println(mathutil.min(1.2, 1.4, 1.1, 1.4)) //1.1\n}\n\n\n\n# minby\n\nreturn the minimum value of a slice using the given comparator function.\n\nsignature:\n\nfunc minby[t any](slice []t, comparator func(t, t) bool) t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tres1 := mathutil.minby([]string{"a", "ab", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.println(res1) //a\n\n\tres2 := mathutil.minby([]string{"ab", "ac", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.println(res2) //ab\n\n\tres3 := mathutil.minby([]string{}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.println(res3) //“”\n}\n\n\n\n# percent\n\ncalculate the percentage of val to total, retain n decimal places.\n\nsignature:\n\nfunc percent(val, total float64, n int) float64\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.percent(1, 2, 2)) //1\n\tfmt.println(mathutil.percent(0.1, 0.3, 2)) //33.33\n}\n\n\n\n# roundtofloat\n\nround float up to n decimal places.\n\nsignature:\n\nfunc roundtofloat(x float64, n int) float64\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.roundtofloat(0, 0)) //0\n\tfmt.println(mathutil.roundtofloat(0, 1)) //0\n\tfmt.println(mathutil.roundtofloat(0.124, 2)) //0.12\n\tfmt.println(mathutil.roundtofloat(0.125, 2)) //0.13\n\tfmt.println(mathutil.roundtofloat(0.125, 3)) //0.125\n}\n\n\n\n# roundtostring\n\nround float up to n decimal places. will return string.\n\nsignature:\n\nfunc roundtostring(x float64, n int) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.roundtostring(0, 0)) //"0"\n\tfmt.println(mathutil.roundtostring(0, 1)) //"0.0:\n\tfmt.println(mathutil.roundtostring(0.124, 2)) //"0.12"\n\tfmt.println(mathutil.roundtostring(0.125, 2)) //"0.13"\n\tfmt.println(mathutil.roundtostring(0.125, 3)) //"0.125"\n}\n\n\n\n# truncround\n\nround float off n decimal places.\n\nsignature:\n\nfunc truncround(x float64, n int) float64\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.truncround(0, 0)) //0\n\tfmt.println(mathutil.truncround(0, 1)) //0\n\tfmt.println(mathutil.truncround(0.124, 2)) //0.12\n\tfmt.println(mathutil.truncround(0.125, 2)) //0.12\n\tfmt.println(mathutil.truncround(0.125, 3)) //0.125\n}\n',charsets:{}},{title:"Formatter",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/formatter/",relativePath:"en/formatter/README.md",key:"v-6a4bd66a",path:"/en/formatter/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:74},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:160},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:232},{level:3,title:"Comma",slug:"comma",normalizedTitle:"comma",charIndex:250}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation Comma",content:'# Formatter\n\nformatter contains some functions for data formatting.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/formatter/formatter.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/formatter"\n)\n\n\n\n\n\n# Documentation\n\n\n# Comma\n\nAdd comma to number by every 3 numbers from right. ahead by symbol char. Param should be number or numberic string.\n\nSignature:\n\nfunc Comma(v any, symbol string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/formatter"\n)\n\nfunc main() {\n    fmt.Println(formatter.Comma("12345", ""))   // "12,345"\n    fmt.Println(formatter.Comma(12345.67, "¥")) // "¥12,345.67"\n}\n',normalizedContent:'# formatter\n\nformatter contains some functions for data formatting.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/formatter/formatter.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/formatter"\n)\n\n\n\n\n\n# documentation\n\n\n# comma\n\nadd comma to number by every 3 numbers from right. ahead by symbol char. param should be number or numberic string.\n\nsignature:\n\nfunc comma(v any, symbol string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/formatter"\n)\n\nfunc main() {\n    fmt.println(formatter.comma("12345", ""))   // "12,345"\n    fmt.println(formatter.comma(12345.67, "¥")) // "¥12,345.67"\n}\n',charsets:{}},{title:"Datetime",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/datetime/",relativePath:"en/datetime/README.md",key:"v-c4e05192",path:"/en/datetime/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:78},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:233},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:304},{level:2,title:"Note:",slug:"note",normalizedTitle:"note:",charIndex:322},{level:3,title:"AddDay",slug:"addday",normalizedTitle:"addday",charIndex:702},{level:3,title:"AddHour",slug:"addhour",normalizedTitle:"addhour",charIndex:1069},{level:3,title:"AddMinute",slug:"addminute",normalizedTitle:"addminute",charIndex:1445},{level:3,title:"BeginOfMinute",slug:"beginofminute",normalizedTitle:"beginofminute",charIndex:1838},{level:3,title:"BeginOfHour",slug:"beginofhour",normalizedTitle:"beginofhour",charIndex:2221},{level:3,title:"BeginOfDay",slug:"beginofday",normalizedTitle:"beginofday",charIndex:2586},{level:3,title:"BeginOfWeek",slug:"beginofweek",normalizedTitle:"beginofweek",charIndex:2949},{level:3,title:"BeginOfMonth",slug:"beginofmonth",normalizedTitle:"beginofmonth",charIndex:3371},{level:3,title:"BeginOfYear",slug:"beginofyear",normalizedTitle:"beginofyear",charIndex:3745},{level:3,title:"EndOfMinute",slug:"endofminute",normalizedTitle:"endofminute",charIndex:4116},{level:3,title:"EndOfHour",slug:"endofhour",normalizedTitle:"endofhour",charIndex:4497},{level:3,title:"EndOfDay",slug:"endofday",normalizedTitle:"endofday",charIndex:4870},{level:3,title:"EndOfWeek",slug:"endofweek",normalizedTitle:"endofweek",charIndex:5240},{level:3,title:"EndOfMonth",slug:"endofmonth",normalizedTitle:"endofmonth",charIndex:5658},{level:3,title:"EndOfYear",slug:"endofyear",normalizedTitle:"endofyear",charIndex:6030},{level:3,title:"GetNowDate",slug:"getnowdate",normalizedTitle:"getnowdate",charIndex:6405},{level:3,title:"GetNowTime",slug:"getnowtime",normalizedTitle:"getnowtime",charIndex:6733},{level:3,title:"GetNowDateTime",slug:"getnowdatetime",normalizedTitle:"getnowdatetime",charIndex:7057},{level:3,title:"GetZeroHourTimestamp",slug:"getzerohourtimestamp",normalizedTitle:"getzerohourtimestamp",charIndex:7412},{level:3,title:"GetNightTimestamp",slug:"getnighttimestamp",normalizedTitle:"getnighttimestamp",charIndex:7768},{level:3,title:"FormatTimeToStr",slug:"formattimetostr",normalizedTitle:"formattimetostr",charIndex:363},{level:3,title:"FormatStrToTime",slug:"formatstrtotime",normalizedTitle:"formatstrtotime",charIndex:383},{level:3,title:"NewUnixNow",slug:"newunixnow",normalizedTitle:"newunixnow",charIndex:8902},{level:3,title:"NewUnix",slug:"newunix",normalizedTitle:"newunix",charIndex:8902},{level:3,title:"NewFormat",slug:"newformat",normalizedTitle:"newformat",charIndex:9542},{level:3,title:"NewISO8601",slug:"newiso8601",normalizedTitle:"newiso8601",charIndex:9938},{level:3,title:"ToUnix",slug:"tounix",normalizedTitle:"tounix",charIndex:10321},{level:3,title:"ToFormat",slug:"toformat",normalizedTitle:"toformat",charIndex:10586},{level:3,title:"ToFormatForTpl",slug:"toformatfortpl",normalizedTitle:"toformatfortpl",charIndex:10911},{level:3,title:"ToIso8601",slug:"toiso8601",normalizedTitle:"toiso8601",charIndex:11310}],lastUpdated:"10/14/2022, 10:24:23 AM",lastUpdatedTimestamp:1665714263e3,headersStr:"Source: Usage: Documentation Note: AddDay AddHour AddMinute BeginOfMinute BeginOfHour BeginOfDay BeginOfWeek BeginOfMonth BeginOfYear EndOfMinute EndOfHour EndOfDay EndOfWeek EndOfMonth EndOfYear GetNowDate GetNowTime GetNowDateTime GetZeroHourTimestamp GetNightTimestamp FormatTimeToStr FormatStrToTime NewUnixNow NewUnix NewFormat NewISO8601 ToUnix ToFormat ToFormatForTpl ToIso8601",content:'# Datetime\n\nPackage datetime supports date and time format and compare.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/datetime/datetime.go\n * https://github.com/duke-git/lancet/blob/main/datetime/conversion.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\n\n\n\n\n# Documentation\n\n\n# Note:\n\n 1. \'format\' string param in func FormatTimeToStr and FormatStrToTime function should be one of flows:\n\n * yyyy-mm-dd hh:mm:ss\n * yyyy-mm-dd hh:mm\n * yyyy-mm-dd hh\n * yyyy-mm-dd\n * yyyy-mm\n * mm-dd\n * dd-mm-yy hh:mm:ss\n * yyyy/mm/dd hh:mm:ss\n * yyyy/mm/dd hh:mm\n * yyyy-mm-dd hh\n * yyyy/mm/dd\n * yyyy/mm\n * mm/dd\n * dd/mm/yy hh:mm:ss\n * yyyy\n * mm\n * hh:mm:ss\n * mm:ss\n\n\n# AddDay\n\nAdd or sub days to time.\n\nSignature:\n\nfunc AddDay(t time.Time, day int64) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    after2Days := datetime.AddDay(now, 2)\n    before2Days := datetime.AddDay(now, -2)\n\n    fmt.Println(after2Days, before2Days)\n}\n\n\n\n# AddHour\n\nAdd or sub hours to time.\n\nSignature:\n\nfunc AddHour(t time.Time, hour int64) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    after2Hours := datetime.AddHour(now, 2)\n    before2Hours := datetime.AddHour(now, -2)\n\n    fmt.Println(after2Hours, after2Hours)\n}\n\n\n\n# AddMinute\n\nAdd or sub minutes to time.\n\nSignature:\n\nfunc AddMinute(t time.Time, minute int64) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    after2Minute := datetime.AddMinute(now, 2)\n    before2Minute := datetime.AddMinute(now, -2)\n\n    fmt.Println(after2Minute, before2Minute)\n}\n\n\n\n# BeginOfMinute\n\nReturn beginning minute time of day.\n\nSignature:\n\nfunc BeginOfMinute(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfMinute(td)\n    fmt.Println(bm) //2022-02-15 15:48:00 +0800 CST\n}\n\n\n\n# BeginOfHour\n\nReturn zero time of day.\n\nSignature:\n\nfunc BeginOfHour(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfHour(td)\n    fmt.Println(bm) //2022-02-15 15:00:00 +0800 CST\n}\n\n\n\n# BeginOfDay\n\nReturn begin time of day.\n\nSignature:\n\nfunc BeginOfDay(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfDay(td)\n    fmt.Println(bm) //2022-02-15 00:00:00 +0800 CST\n}\n\n\n\n# BeginOfWeek\n\nReturn beginning time of week, week begin from Sunday.\n\nSignature:\n\nfunc BeginOfWeek(t time.Time, beginFrom ...time.Weekday) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfWeek(td)\n    fmt.Println(bm) //2022-02-13 00:00:00 +0800 CST\n}\n\n\n\n# BeginOfMonth\n\nReturn beginning time of month\n\nSignature:\n\nfunc BeginOfMonth(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfMonth(td)\n    fmt.Println(bm) //2022-02-01 00:00:00 +0800 CST\n}\n\n\n\n# BeginOfYear\n\nReturn beginning time of year.\n\nSignature:\n\nfunc BeginOfYear(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.BeginOfYear(td)\n    fmt.Println(bm) //2022-01-01 00:00:00 +0800 CST\n}\n\n\n\n# EndOfMinute\n\nReturn end time minute of day.\n\nSignature:\n\nfunc EndOfMinute(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfMinute(td)\n    fmt.Println(bm) //2022-02-15 15:48:59.999999999 +0800 CST\n}\n\n\n\n# EndOfHour\n\nReturn end time hour of day.\n\nSignature:\n\nfunc EndOfHour(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfHour(td)\n    fmt.Println(bm) //2022-02-15 15:59:59.999999999 +0800 CST\n}\n\n\n\n# EndOfDay\n\nReturn end time hour of day.\n\nSignature:\n\nfunc EndOfDay(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfDay(td)\n    fmt.Println(bm) //2022-02-15 23:59:59.999999999 +0800 CST\n}\n\n\n\n# EndOfWeek\n\nReturn end time of week, week end with Saturday.\n\nSignature:\n\nfunc EndOfWeek(t time.Time, endWith ...time.Weekday) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfWeek(td)\n    fmt.Println(bm) //2022-02-19 23:59:59.999999999 +0800 CST\n}\n\n\n\n# EndOfMonth\n\nReturn end time of month\n\nSignature:\n\nfunc EndOfMonth(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfMonth(td)\n    fmt.Println(bm) //2022-02-28 23:59:59.999999999 +0800 CST\n}\n\n\n\n# EndOfYear\n\nReturn beginning time of year.\n\nSignature:\n\nfunc EndOfYear(t time.Time) time.Time\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.Date(2022, 2, 15, 15, 48, 40, 112, time.Local)\n    bm := datetime.EndOfYear(td)\n    fmt.Println(bm) //2022-12-31 23:59:59.999999999 +0800 CST\n}\n\n\n\n# GetNowDate\n\nGet current date string, format is yyyy-mm-dd.\n\nSignature:\n\nfunc GetNowDate() string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    currentDate := datetime.GetNowDate()\n    fmt.Println(currentDate) // 2022-01-28\n}\n\n\n\n# GetNowTime\n\nGet current time string, format is hh:mm:ss.\n\nSignature:\n\nfunc GetNowTime() string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    currentTime := datetime.GetNowTime()\n    fmt.Println(currentDate) // 15:57:33\n}\n\n\n\n# GetNowDateTime\n\nGet current date time string, format is yyyy-mm-dd hh:mm:ss.\n\nSignature:\n\nfunc GetNowDateTime() string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    current := datetime.GetNowDateTime()\n    fmt.Println(current) // 2022-01-28 15:59:33\n}\n\n\n\n# GetZeroHourTimestamp\n\nReturn timestamp of zero hour (timestamp of 00:00).\n\nSignature:\n\nfunc GetZeroHourTimestamp() int64\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    zeroTime := datetime.GetZeroHourTimestamp()\n    fmt.Println(zeroTime) // 1643299200\n}\n\n\n\n# GetNightTimestamp\n\nReturn timestamp of zero hour (timestamp of 23:59).\n\nSignature:\n\nfunc GetNightTimestamp() int64\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    nightTime := datetime.GetNightTimestamp()\n    fmt.Println(nightTime) // 1643385599\n}\n\n\n\n# FormatTimeToStr\n\nFormat time to string, `format` param specification see note 1.\n\nSignature:\n\nfunc FormatTimeToStr(t time.Time, format string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.Now()\n    timeStr := datetime.FormatTimeToStr(now, "yyyy/mm/dd hh:mm:ss")\n    fmt.Println(timeStr) //2022/01/28 16:07:44\n}\n\n\n\n# FormatStrToTime\n\nFormat string to time, `format` param specification see note 1.\n\nSignature:\n\nfunc FormatStrToTime(str, format string) (time.Time, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    time := datetime.FormatStrToTime("2006-01-02 15:04:05", "yyyy/mm/dd hh:mm:ss")\n    fmt.Println(time)\n}\n\n\n\n# NewUnixNow\n\nReturn unix timestamp of current time\n\nSignature:\n\ntype theTime struct {\n\tunix int64\n}\nfunc NewUnixNow() *theTime\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.NewUnixNow()\n    fmt.Println(tm) //&{1647597438}\n}\n\n\n\n# NewUnix\n\nReturn unix timestamp of specified int64 value.\n\nSignature:\n\ntype theTime struct {\n    unix int64\n}\nfunc NewUnix(unix int64) *theTime\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.NewUnix(1647597438)\n    fmt.Println(tm) //&{1647597438}\n}\n\n\n\n# NewFormat\n\nReturn unix timestamp of specified time string, t should be "yyyy-mm-dd hh:mm:ss".\n\nSignature:\n\ntype theTime struct {\n    unix int64\n}\nfunc NewFormat(t string) (*theTime, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, err := datetime.NewFormat("2022-03-18 17:04:05")\n    fmt.Println(tm) //&{1647594245}\n}\n\n\n\n# NewISO8601\n\nReturn unix timestamp of specified iso8601 time string.\n\nSignature:\n\ntype theTime struct {\n    unix int64\n}\nfunc NewISO8601(iso8601 string) (*theTime, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, err := datetime.NewISO8601("2006-01-02T15:04:05.999Z")\n    fmt.Println(tm) //&{1136214245}\n}\n\n\n\n# ToUnix\n\nReturn unix timestamp.\n\nSignature:\n\nfunc (t *theTime) ToUnix() int64\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.NewUnixNow()\n    fmt.Println(tm.ToUnix()) //1647597438\n}\n\n\n\n# ToFormat\n\nReturn time string \'yyyy-mm-dd hh:mm:ss\'.\n\nSignature:\n\nfunc (t *theTime) ToFormat() string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.NewFormat("2022-03-18 17:04:05")\n    fmt.Println(tm.ToFormat()) //"2022-03-18 17:04:05"\n}\n\n\n\n# ToFormatForTpl\n\nReturn the time string which format is specified tpl.\n\nSignature:\n\nfunc (t *theTime) ToFormatForTpl(tpl string) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.NewFormat("2022-03-18 17:04:05")\n    ts := tm.ToFormatForTpl("2006/01/02 15:04:05")\n    fmt.Println(ts) //"2022/03/18 17:04:05"\n}\n\n\n\n# ToIso8601\n\nReturn iso8601 time string.\n\nSignature:\n\nfunc (t *theTime) ToIso8601() string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.NewISO8601("2006-01-02T15:04:05.999Z")\n    ts := tm.ToIso8601()\n    fmt.Println(ts) //"2006-01-02T23:04:05+08:00"\n}\n',normalizedContent:'# datetime\n\npackage datetime supports date and time format and compare.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/datetime/datetime.go\n * https://github.com/duke-git/lancet/blob/main/datetime/conversion.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\n\n\n\n\n# documentation\n\n\n# note:\n\n 1. \'format\' string param in func formattimetostr and formatstrtotime function should be one of flows:\n\n * yyyy-mm-dd hh:mm:ss\n * yyyy-mm-dd hh:mm\n * yyyy-mm-dd hh\n * yyyy-mm-dd\n * yyyy-mm\n * mm-dd\n * dd-mm-yy hh:mm:ss\n * yyyy/mm/dd hh:mm:ss\n * yyyy/mm/dd hh:mm\n * yyyy-mm-dd hh\n * yyyy/mm/dd\n * yyyy/mm\n * mm/dd\n * dd/mm/yy hh:mm:ss\n * yyyy\n * mm\n * hh:mm:ss\n * mm:ss\n\n\n# addday\n\nadd or sub days to time.\n\nsignature:\n\nfunc addday(t time.time, day int64) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    after2days := datetime.addday(now, 2)\n    before2days := datetime.addday(now, -2)\n\n    fmt.println(after2days, before2days)\n}\n\n\n\n# addhour\n\nadd or sub hours to time.\n\nsignature:\n\nfunc addhour(t time.time, hour int64) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    after2hours := datetime.addhour(now, 2)\n    before2hours := datetime.addhour(now, -2)\n\n    fmt.println(after2hours, after2hours)\n}\n\n\n\n# addminute\n\nadd or sub minutes to time.\n\nsignature:\n\nfunc addminute(t time.time, minute int64) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    after2minute := datetime.addminute(now, 2)\n    before2minute := datetime.addminute(now, -2)\n\n    fmt.println(after2minute, before2minute)\n}\n\n\n\n# beginofminute\n\nreturn beginning minute time of day.\n\nsignature:\n\nfunc beginofminute(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofminute(td)\n    fmt.println(bm) //2022-02-15 15:48:00 +0800 cst\n}\n\n\n\n# beginofhour\n\nreturn zero time of day.\n\nsignature:\n\nfunc beginofhour(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofhour(td)\n    fmt.println(bm) //2022-02-15 15:00:00 +0800 cst\n}\n\n\n\n# beginofday\n\nreturn begin time of day.\n\nsignature:\n\nfunc beginofday(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofday(td)\n    fmt.println(bm) //2022-02-15 00:00:00 +0800 cst\n}\n\n\n\n# beginofweek\n\nreturn beginning time of week, week begin from sunday.\n\nsignature:\n\nfunc beginofweek(t time.time, beginfrom ...time.weekday) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofweek(td)\n    fmt.println(bm) //2022-02-13 00:00:00 +0800 cst\n}\n\n\n\n# beginofmonth\n\nreturn beginning time of month\n\nsignature:\n\nfunc beginofmonth(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofmonth(td)\n    fmt.println(bm) //2022-02-01 00:00:00 +0800 cst\n}\n\n\n\n# beginofyear\n\nreturn beginning time of year.\n\nsignature:\n\nfunc beginofyear(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.beginofyear(td)\n    fmt.println(bm) //2022-01-01 00:00:00 +0800 cst\n}\n\n\n\n# endofminute\n\nreturn end time minute of day.\n\nsignature:\n\nfunc endofminute(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofminute(td)\n    fmt.println(bm) //2022-02-15 15:48:59.999999999 +0800 cst\n}\n\n\n\n# endofhour\n\nreturn end time hour of day.\n\nsignature:\n\nfunc endofhour(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofhour(td)\n    fmt.println(bm) //2022-02-15 15:59:59.999999999 +0800 cst\n}\n\n\n\n# endofday\n\nreturn end time hour of day.\n\nsignature:\n\nfunc endofday(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofday(td)\n    fmt.println(bm) //2022-02-15 23:59:59.999999999 +0800 cst\n}\n\n\n\n# endofweek\n\nreturn end time of week, week end with saturday.\n\nsignature:\n\nfunc endofweek(t time.time, endwith ...time.weekday) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofweek(td)\n    fmt.println(bm) //2022-02-19 23:59:59.999999999 +0800 cst\n}\n\n\n\n# endofmonth\n\nreturn end time of month\n\nsignature:\n\nfunc endofmonth(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofmonth(td)\n    fmt.println(bm) //2022-02-28 23:59:59.999999999 +0800 cst\n}\n\n\n\n# endofyear\n\nreturn beginning time of year.\n\nsignature:\n\nfunc endofyear(t time.time) time.time\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    td := time.date(2022, 2, 15, 15, 48, 40, 112, time.local)\n    bm := datetime.endofyear(td)\n    fmt.println(bm) //2022-12-31 23:59:59.999999999 +0800 cst\n}\n\n\n\n# getnowdate\n\nget current date string, format is yyyy-mm-dd.\n\nsignature:\n\nfunc getnowdate() string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    currentdate := datetime.getnowdate()\n    fmt.println(currentdate) // 2022-01-28\n}\n\n\n\n# getnowtime\n\nget current time string, format is hh:mm:ss.\n\nsignature:\n\nfunc getnowtime() string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    currenttime := datetime.getnowtime()\n    fmt.println(currentdate) // 15:57:33\n}\n\n\n\n# getnowdatetime\n\nget current date time string, format is yyyy-mm-dd hh:mm:ss.\n\nsignature:\n\nfunc getnowdatetime() string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    current := datetime.getnowdatetime()\n    fmt.println(current) // 2022-01-28 15:59:33\n}\n\n\n\n# getzerohourtimestamp\n\nreturn timestamp of zero hour (timestamp of 00:00).\n\nsignature:\n\nfunc getzerohourtimestamp() int64\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    zerotime := datetime.getzerohourtimestamp()\n    fmt.println(zerotime) // 1643299200\n}\n\n\n\n# getnighttimestamp\n\nreturn timestamp of zero hour (timestamp of 23:59).\n\nsignature:\n\nfunc getnighttimestamp() int64\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    nighttime := datetime.getnighttimestamp()\n    fmt.println(nighttime) // 1643385599\n}\n\n\n\n# formattimetostr\n\nformat time to string, `format` param specification see note 1.\n\nsignature:\n\nfunc formattimetostr(t time.time, format string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    now := time.now()\n    timestr := datetime.formattimetostr(now, "yyyy/mm/dd hh:mm:ss")\n    fmt.println(timestr) //2022/01/28 16:07:44\n}\n\n\n\n# formatstrtotime\n\nformat string to time, `format` param specification see note 1.\n\nsignature:\n\nfunc formatstrtotime(str, format string) (time.time, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    time := datetime.formatstrtotime("2006-01-02 15:04:05", "yyyy/mm/dd hh:mm:ss")\n    fmt.println(time)\n}\n\n\n\n# newunixnow\n\nreturn unix timestamp of current time\n\nsignature:\n\ntype thetime struct {\n\tunix int64\n}\nfunc newunixnow() *thetime\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.newunixnow()\n    fmt.println(tm) //&{1647597438}\n}\n\n\n\n# newunix\n\nreturn unix timestamp of specified int64 value.\n\nsignature:\n\ntype thetime struct {\n    unix int64\n}\nfunc newunix(unix int64) *thetime\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.newunix(1647597438)\n    fmt.println(tm) //&{1647597438}\n}\n\n\n\n# newformat\n\nreturn unix timestamp of specified time string, t should be "yyyy-mm-dd hh:mm:ss".\n\nsignature:\n\ntype thetime struct {\n    unix int64\n}\nfunc newformat(t string) (*thetime, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, err := datetime.newformat("2022-03-18 17:04:05")\n    fmt.println(tm) //&{1647594245}\n}\n\n\n\n# newiso8601\n\nreturn unix timestamp of specified iso8601 time string.\n\nsignature:\n\ntype thetime struct {\n    unix int64\n}\nfunc newiso8601(iso8601 string) (*thetime, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, err := datetime.newiso8601("2006-01-02t15:04:05.999z")\n    fmt.println(tm) //&{1136214245}\n}\n\n\n\n# tounix\n\nreturn unix timestamp.\n\nsignature:\n\nfunc (t *thetime) tounix() int64\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm := datetime.newunixnow()\n    fmt.println(tm.tounix()) //1647597438\n}\n\n\n\n# toformat\n\nreturn time string \'yyyy-mm-dd hh:mm:ss\'.\n\nsignature:\n\nfunc (t *thetime) toformat() string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.newformat("2022-03-18 17:04:05")\n    fmt.println(tm.toformat()) //"2022-03-18 17:04:05"\n}\n\n\n\n# toformatfortpl\n\nreturn the time string which format is specified tpl.\n\nsignature:\n\nfunc (t *thetime) toformatfortpl(tpl string) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.newformat("2022-03-18 17:04:05")\n    ts := tm.toformatfortpl("2006/01/02 15:04:05")\n    fmt.println(ts) //"2022/03/18 17:04:05"\n}\n\n\n\n# toiso8601\n\nreturn iso8601 time string.\n\nsignature:\n\nfunc (t *thetime) toiso8601() string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/datetime"\n)\n\nfunc main() {\n    tm, _ := datetime.newiso8601("2006-01-02t15:04:05.999z")\n    ts := tm.toiso8601()\n    fmt.println(ts) //"2006-01-02t23:04:05+08:00"\n}\n',charsets:{}},{title:"Retry",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/retry/",relativePath:"en/retry/README.md",key:"v-33c981ea",path:"/en/retry/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:120},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:198},{level:3,title:"Context",slug:"context",normalizedTitle:"context",charIndex:283},{level:3,title:"RetryFunc",slug:"retryfunc",normalizedTitle:"retryfunc",charIndex:872},{level:3,title:"RetryTimes",slug:"retrytimes",normalizedTitle:"retrytimes",charIndex:1377},{level:3,title:"RetryDuration",slug:"retryduration",normalizedTitle:"retryduration",charIndex:743},{level:3,title:"Retry",slug:"retry-2",normalizedTitle:"retry",charIndex:2}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Context RetryFunc RetryTimes RetryDuration Retry",content:'# Retry\n\nPackage retry is for executing a function repeatedly until it was successful or canceled by the context.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/retry/retry.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/retry"\n)\n\n\n\n## Documentation\n\n\n# Context\n\nSet retry context config, can cancel the retry with context.\n\nSignature:\n\nfunc Context(ctx context.Context)\n\n\nExample:\n\nimport (\n\t"context"\n\t"errors"\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/retry"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.TODO())\n\tvar number int\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number > 3 {\n\t\t\tcancel()\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber,\n\t\tretry.RetryDuration(time.Microsecond*50),\n\t\tretry.Context(ctx),\n\t)\n\n\tif err != nil {\n\t\tfmt.Println(err) //retry is cancelled\n\t}\n}\n\n\n\n# RetryFunc\n\nFunction that retry executes.\n\nSignature:\n\ntype RetryFunc func() error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber, retry.RetryDuration(time.Microsecond*50))\n    if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n    fmt.Println(number) //3\n}\n\n\n\n# RetryTimes\n\nSet times of retry. Default times is 5.\n\nSignature:\n\nfunc RetryTimes(n uint)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber, retry.RetryTimes(2))\n    if err != nil {\n\t\tlog.Fatal(err) //2022/02/01 18:42:25 function main.main.func1 run failed after 2 times retry exit status 1\n\t}\n}\n\n\n\n# RetryDuration\n\nSet duration of retries. Default duration is 3 second.\n\nSignature:\n\nfunc RetryDuration(d time.Duration)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber, retry.RetryDuration(time.Microsecond*50))\n    if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n    fmt.Println(number) //3\n}\n\n\n\n# Retry\n\nExecutes the retryFunc repeatedly until it was successful or canceled by the context.\n\nSignature:\n\nfunc Retry(retryFunc RetryFunc, opts ...Option) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber, retry.RetryDuration(time.Microsecond*50))\n    if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n    fmt.Println(number) //3\n}\n',normalizedContent:'# retry\n\npackage retry is for executing a function repeatedly until it was successful or canceled by the context.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/retry/retry.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/retry"\n)\n\n\n\n## documentation\n\n\n# context\n\nset retry context config, can cancel the retry with context.\n\nsignature:\n\nfunc context(ctx context.context)\n\n\nexample:\n\nimport (\n\t"context"\n\t"errors"\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/retry"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.withcancel(context.todo())\n\tvar number int\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number > 3 {\n\t\t\tcancel()\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber,\n\t\tretry.retryduration(time.microsecond*50),\n\t\tretry.context(ctx),\n\t)\n\n\tif err != nil {\n\t\tfmt.println(err) //retry is cancelled\n\t}\n}\n\n\n\n# retryfunc\n\nfunction that retry executes.\n\nsignature:\n\ntype retryfunc func() error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber, retry.retryduration(time.microsecond*50))\n    if err != nil {\n\t\tlog.fatal(err)\n\t}\n\n    fmt.println(number) //3\n}\n\n\n\n# retrytimes\n\nset times of retry. default times is 5.\n\nsignature:\n\nfunc retrytimes(n uint)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber, retry.retrytimes(2))\n    if err != nil {\n\t\tlog.fatal(err) //2022/02/01 18:42:25 function main.main.func1 run failed after 2 times retry exit status 1\n\t}\n}\n\n\n\n# retryduration\n\nset duration of retries. default duration is 3 second.\n\nsignature:\n\nfunc retryduration(d time.duration)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber, retry.retryduration(time.microsecond*50))\n    if err != nil {\n\t\tlog.fatal(err)\n\t}\n\n    fmt.println(number) //3\n}\n\n\n\n# retry\n\nexecutes the retryfunc repeatedly until it was successful or canceled by the context.\n\nsignature:\n\nfunc retry(retryfunc retryfunc, opts ...option) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber, retry.retryduration(time.microsecond*50))\n    if err != nil {\n\t\tlog.fatal(err)\n\t}\n\n    fmt.println(number) //3\n}\n',charsets:{}},{title:"Random",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/random/",relativePath:"en/random/README.md",key:"v-109492a7",path:"/en/random/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:98},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:178},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:247},{level:3,title:"RandBytes",slug:"randbytes",normalizedTitle:"randbytes",charIndex:265},{level:3,title:"RandInt",slug:"randint",normalizedTitle:"randint",charIndex:521},{level:3,title:"RandInt",slug:"randint-2",normalizedTitle:"randint",charIndex:521},{level:3,title:"UUIdV4",slug:"uuidv4",normalizedTitle:"uuidv4",charIndex:1064}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation RandBytes RandInt RandInt UUIdV4",content:'# Random\n\nPackage random implements some basic functions to generate random int and string.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/random/random.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/random"\n)\n\n\n\n\n\n# Documentation\n\n\n# RandBytes\n\nGenerate random byte slice.\n\nSignature:\n\nfunc RandBytes(length int) []byte\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trandBytes := random.RandBytes(4)\n\tfmt.Println(randBytes)\n}\n\n\n\n# RandInt\n\nGenerate random int between min and max, may contain min, not max.\n\nSignature:\n\nfunc RandInt(min, max int) int\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trInt := random.RandInt(1, 10)\n\tfmt.Println(rInt)\n}\n\n\n\n# RandInt\n\nGenerate random given length string.\n\nSignature:\n\nfunc RandString(length int) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trandStr := random.RandString(6)\n\tfmt.Println(randStr)\n}\n\n\n\n# UUIdV4\n\nGenerate a random UUID of version 4 according to RFC 4122.\n\nSignature:\n\nfunc UUIdV4() (string, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\tuuid, err := random.UUIdV4()\n    if err != nil {\n        return\n    }\n\tfmt.Println(uuid)\n}\n',normalizedContent:'# random\n\npackage random implements some basic functions to generate random int and string.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/random/random.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/random"\n)\n\n\n\n\n\n# documentation\n\n\n# randbytes\n\ngenerate random byte slice.\n\nsignature:\n\nfunc randbytes(length int) []byte\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trandbytes := random.randbytes(4)\n\tfmt.println(randbytes)\n}\n\n\n\n# randint\n\ngenerate random int between min and max, may contain min, not max.\n\nsignature:\n\nfunc randint(min, max int) int\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trint := random.randint(1, 10)\n\tfmt.println(rint)\n}\n\n\n\n# randint\n\ngenerate random given length string.\n\nsignature:\n\nfunc randstring(length int) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trandstr := random.randstring(6)\n\tfmt.println(randstr)\n}\n\n\n\n# uuidv4\n\ngenerate a random uuid of version 4 according to rfc 4122.\n\nsignature:\n\nfunc uuidv4() (string, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\tuuid, err := random.uuidv4()\n    if err != nil {\n        return\n    }\n\tfmt.println(uuid)\n}\n',charsets:{}},{title:"Strutil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/strutil/",relativePath:"en/strutil/README.md",key:"v-405589eb",path:"/en/strutil/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:79},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:160},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:230},{level:3,title:"After",slug:"after",normalizedTitle:"after",charIndex:248},{level:3,title:"AfterLast",slug:"afterlast",normalizedTitle:"afterlast",charIndex:698},{level:3,title:"Before",slug:"before",normalizedTitle:"before",charIndex:1172},{level:3,title:"BeforeLast",slug:"beforelast",normalizedTitle:"beforelast",charIndex:1631},{level:3,title:"CamelCase",slug:"camelcase",normalizedTitle:"camelcase",charIndex:2124},{level:3,title:"Capitalize",slug:"capitalize",normalizedTitle:"capitalize",charIndex:2559},{level:3,title:"IsString",slug:"isstring",normalizedTitle:"isstring",charIndex:2934},{level:3,title:"KebabCase",slug:"kebabcase",normalizedTitle:"kebabcase",charIndex:3345},{level:3,title:"LowerFirst",slug:"lowerfirst",normalizedTitle:"lowerfirst",charIndex:3786},{level:3,title:"UpperFirst",slug:"upperfirst",normalizedTitle:"upperfirst",charIndex:4219},{level:3,title:"PadEnd",slug:"padend",normalizedTitle:"padend",charIndex:4652},{level:3,title:"PadStart",slug:"padstart",normalizedTitle:"padstart",charIndex:5128},{level:3,title:"Reverse",slug:"reverse",normalizedTitle:"reverse",charIndex:5615},{level:3,title:"SnakeCase",slug:"snakecase",normalizedTitle:"snakecase",charIndex:5941},{level:3,title:"SplitEx",slug:"splitex",normalizedTitle:"splitex",charIndex:6464},{level:3,title:"Wrap",slug:"wrap",normalizedTitle:"wrap",charIndex:7185},{level:3,title:"Wrap",slug:"wrap-2",normalizedTitle:"wrap",charIndex:7185}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation After AfterLast Before BeforeLast CamelCase Capitalize IsString KebabCase LowerFirst UpperFirst PadEnd PadStart Reverse SnakeCase SplitEx Wrap Wrap",content:'# Strutil\n\nPackage strutil contains some functions to manipulate string.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/strutil/string.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/strutil"\n)\n\n\n\n\n\n# Documentation\n\n\n# After\n\nCreates substring in source string after position when char first appear.\n\nSignature:\n\nfunc After(s, char string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.After("lancet", "")\n\tfmt.Println(s1) //lancet\n\n\ts2 := strutil.After("github.com/test/lancet", "/")\n\tfmt.Println(s2) //test/lancet\n\n\ts3 := strutil.After("github.com/test/lancet", "test")\n\tfmt.Println(s3) // /lancet\n}\n\n\n\n# AfterLast\n\nCreates substring in source string after position when char last appear.\n\nSignature:\n\nfunc AfterLast(s, char string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.AfterLast("lancet", "")\n\tfmt.Println(s1) //lancet\n\n\ts2 := strutil.AfterLast("github.com/test/lancet", "/")\n\tfmt.Println(s2) //lancet\n\n\ts3 := strutil.AfterLast("github.com/test/test/lancet", "test")\n\tfmt.Println(s3) // /test/lancet\n}\n\n\n\n# Before\n\nCreates substring in source string before position when char first appear.\n\nSignature:\n\nfunc Before(s, char string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.Before("lancet", "")\n\tfmt.Println(s1) //lancet\n\n\ts2 := strutil.Before("github.com/test/lancet", "/")\n\tfmt.Println(s2) //github.com\n\n\ts3 := strutil.Before("github.com/test/lancet", "test")\n\tfmt.Println(s3) // github.com/\n}\n\n\n\n# BeforeLast\n\nCreates substring in source string before position when char first appear.\n\nSignature:\n\nfunc BeforeLast(s, char string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.BeforeLast("lancet", "")\n\tfmt.Println(s1) //lancet\n\n\ts2 := strutil.BeforeLast("github.com/test/lancet", "/")\n\tfmt.Println(s2) //github.com/test\n\n\ts3 := strutil.BeforeLast("github.com/test/test/lancet", "test")\n\tfmt.Println(s3) //github.com/test/\n}\n\n\n\n# CamelCase\n\nCovert string to camelCase string.\n\nSignature:\n\nfunc CamelCase(s string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.CamelCase("foo_bar")\n\tfmt.Println(s1) //fooBar\n\n\ts2 := strutil.CamelCase("Foo-Bar")\n\tfmt.Println(s2) //fooBar\n\n\ts3 := strutil.CamelCase("Foo&bar")\n\tfmt.Println(s3) //fooBar\n\n\ts4 := strutil.CamelCase("foo bar")\n\tfmt.Println(s4) //fooBar\n}\n\n\n\n# Capitalize\n\nConvert the first character of a string to upper case.\n\nSignature:\n\nfunc Capitalize(s string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.Capitalize("foo")\n\tfmt.Println(s1) //foo\n\n\ts2 := strutil.Capitalize("Foo")\n\tfmt.Println(s2) //foo\n\n\ts3 := strutil.Capitalize("FOo"\n\tfmt.Println(s3) //fOo\n}\n\n\n\n# IsString\n\nCheck if the value\'s data type is string.\n\nSignature:\n\nfunc IsString(v any) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\tfmt.Println(strutil.IsString("lancet")) //true\n\tfmt.Println(strutil.IsString("")) //true\n\n\tfmt.Println(strutil.IsString(1)) //false\n\tfmt.Println(strutil.IsString("")) //false\n\tfmt.Println(strutil.IsString([]string{})) //false\n}\n\n\n\n# KebabCase\n\nCovert string to kebab-case.\n\nSignature:\n\nfunc KebabCase(s string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.KebabCase("Foo Bar-")\n\tfmt.Println(s1) //foo-bar\n\n\ts2 := strutil.KebabCase("foo_Bar")\n\tfmt.Println(s2) //foo-bar\n\n\ts3 := strutil.KebabCase("fooBar")\n\tfmt.Println(s3) //foo-bar\n\n\ts4 := strutil.KebabCase("__FOO_BAR__")\n\tfmt.Println(s4) //f-o-o-b-a-r\n}\n\n\n\n# LowerFirst\n\nConvert the first character of string to lower case.\n\nSignature:\n\nfunc LowerFirst(s string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.LowerFirst("foo")\n\tfmt.Println(s1) //foo\n\n\ts2 := strutil.LowerFirst("BAR")\n\tfmt.Println(s2) //bAR\n\n\ts3 := strutil.LowerFirst("FOo")\n\tfmt.Println(s3) //fOo\n\n\ts4 := strutil.LowerFirst("fOo大")\n\tfmt.Println(s4) //fOo大\n}\n\n\n\n# UpperFirst\n\nConvert the first character of string to upper case.\n\nSignature:\n\nfunc UpperFirst(s string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.UpperFirst("foo")\n\tfmt.Println(s1) //Foo\n\n\ts2 := strutil.UpperFirst("bAR")\n\tfmt.Println(s2) //BAR\n\n\ts3 := strutil.UpperFirst("FOo")\n\tfmt.Println(s3) //FOo\n\n\ts4 := strutil.UpperFirst("fOo大")\n\tfmt.Println(s4) //FOo大\n}\n\n\n\n# PadEnd\n\nPads string on the right side if it\'s shorter than size.\n\nSignature:\n\nfunc PadEnd(source string, size int, padStr string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.PadEnd("a", 1, "b")\n\tfmt.Println(s1) //a\n\n\ts2 := strutil.PadEnd("a", 2, "b")\n\tfmt.Println(s2) //ab\n\n\ts3 := strutil.PadEnd("abcd", 6, "mno")\n\tfmt.Println(s3) //abcdmn\n\n\ts4 := strutil.PadEnd("abc", 6, "ab")\n\tfmt.Println(s4) //abcaba\n}\n\n\n\n# PadStart\n\nPads string on the left side if it\'s shorter than size.\n\nSignature:\n\nfunc PadStart(source string, size int, padStr string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.PadStart("a", 1, "b")\n\tfmt.Println(s1) //a\n\n\ts2 := strutil.PadStart("a", 2, "b")\n\tfmt.Println(s2) //ba\n\n\ts3 := strutil.PadStart("abcd", 6, "mno")\n\tfmt.Println(s3) //mnabcd\n\n\ts4 := strutil.PadStart("abc", 6, "ab")\n\tfmt.Println(s4) //abaabc\n}\n\n\n\n# Reverse\n\nReturn string whose char order is reversed to the given string.\n\nSignature:\n\nfunc Reverse(s string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.ReverseStr("abc")\n\tfmt.Println(s1) //cba\n\n\ts2 := strutil.ReverseStr("12345")\n\tfmt.Println(s2) //54321\n}\n\n\n\n# SnakeCase\n\nCovert string to snake_case.\n\nSignature:\n\nfunc SnakeCase(s string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.SnakeCase("Foo Bar-")\n\tfmt.Println(s1) //foo_bar\n\n\ts2 := strutil.SnakeCase("foo_Bar")\n\tfmt.Println(s2) //foo_bar\n\n\ts3 := strutil.SnakeCase("fooBar")\n\tfmt.Println(s3) //foo_bar\n\n\ts4 := strutil.SnakeCase("__FOO_BAR__")\n\tfmt.Println(s4) //f_o_o_b_a_r\n\n\ts5 := strutil.SnakeCase("aBbc-s$@a&%_B.B^C")\n\tfmt.Println(s5) //a_bbc_s_a_b_b_c\n}\n\n\n\n# SplitEx\n\nSplit a given string whether the result contains empty string.\n\nSignature:\n\nfunc SplitEx(s, sep string, removeEmptyString bool) []string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\tarr1 := strutil.SplitEx(" a b c ", "", true)\n\tfmt.Println(arr1) //[]string{}\n\n\tarr2 := strutil.SplitEx(" a b c ", " ", false)\n\tfmt.Println(arr2) //[]string{"", "a", "b", "c", ""}\n\n\tarr3 := strutil.SplitEx(" a b c ", " ", true)\n\tfmt.Println(arr3) //[]string{"a", "b", "c"}\n\n\tarr4 := strutil.SplitEx(" a = b = c = ", " = ", false)\n\tfmt.Println(arr4) //[]string{" a", "b", "c", ""}\n\n\tarr5 := strutil.SplitEx(" a = b = c = ", " = ", true)\n\tfmt.Println(arr5) //[]string{" a", "b", "c"}\n}\n\n\n\n# Wrap\n\nWrap a string with another string.\n\nSignature:\n\nfunc Wrap(str string, wrapWith string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.Wrap("ab", "")\n\tfmt.Println(s1) //ab\n\n\ts2 := strutil.Wrap("", "*")\n\tfmt.Println(s2) //""\n\n\ts3 := strutil.Wrap("ab", "*")\n\tfmt.Println(s3) //*ab*\n\n\ts4 := strutil.Wrap("ab", "\\"")\n\tfmt.Println(s4) //\\"ab\\"\n\n\ts5 := strutil.Wrap("ab", "\'")\n\tfmt.Println(s5) //\'ab\'\n}\n\n\n\n# Wrap\n\nUnwrap a given string from anther string. will change str value.\n\nSignature:\n\nfunc Unwrap(str string, wrapToken string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.Unwrap("ab", "")\n\tfmt.Println(s1) //ab\n\n\ts2 := strutil.Unwrap("ab", "*")\n\tfmt.Println(s2) //ab\n\n\ts3 := strutil.Unwrap("**ab**", "*")\n\tfmt.Println(s3) //*ab*\n\n\ts4 := strutil.Unwrap("*ab", "*")\n\tfmt.Println(s4) //*ab\n\n\ts5 := strutil.Unwrap("***", "**")\n\tfmt.Println(s5) //***\n}\n',normalizedContent:'# strutil\n\npackage strutil contains some functions to manipulate string.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/strutil/string.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/strutil"\n)\n\n\n\n\n\n# documentation\n\n\n# after\n\ncreates substring in source string after position when char first appear.\n\nsignature:\n\nfunc after(s, char string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.after("lancet", "")\n\tfmt.println(s1) //lancet\n\n\ts2 := strutil.after("github.com/test/lancet", "/")\n\tfmt.println(s2) //test/lancet\n\n\ts3 := strutil.after("github.com/test/lancet", "test")\n\tfmt.println(s3) // /lancet\n}\n\n\n\n# afterlast\n\ncreates substring in source string after position when char last appear.\n\nsignature:\n\nfunc afterlast(s, char string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.afterlast("lancet", "")\n\tfmt.println(s1) //lancet\n\n\ts2 := strutil.afterlast("github.com/test/lancet", "/")\n\tfmt.println(s2) //lancet\n\n\ts3 := strutil.afterlast("github.com/test/test/lancet", "test")\n\tfmt.println(s3) // /test/lancet\n}\n\n\n\n# before\n\ncreates substring in source string before position when char first appear.\n\nsignature:\n\nfunc before(s, char string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.before("lancet", "")\n\tfmt.println(s1) //lancet\n\n\ts2 := strutil.before("github.com/test/lancet", "/")\n\tfmt.println(s2) //github.com\n\n\ts3 := strutil.before("github.com/test/lancet", "test")\n\tfmt.println(s3) // github.com/\n}\n\n\n\n# beforelast\n\ncreates substring in source string before position when char first appear.\n\nsignature:\n\nfunc beforelast(s, char string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.beforelast("lancet", "")\n\tfmt.println(s1) //lancet\n\n\ts2 := strutil.beforelast("github.com/test/lancet", "/")\n\tfmt.println(s2) //github.com/test\n\n\ts3 := strutil.beforelast("github.com/test/test/lancet", "test")\n\tfmt.println(s3) //github.com/test/\n}\n\n\n\n# camelcase\n\ncovert string to camelcase string.\n\nsignature:\n\nfunc camelcase(s string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.camelcase("foo_bar")\n\tfmt.println(s1) //foobar\n\n\ts2 := strutil.camelcase("foo-bar")\n\tfmt.println(s2) //foobar\n\n\ts3 := strutil.camelcase("foo&bar")\n\tfmt.println(s3) //foobar\n\n\ts4 := strutil.camelcase("foo bar")\n\tfmt.println(s4) //foobar\n}\n\n\n\n# capitalize\n\nconvert the first character of a string to upper case.\n\nsignature:\n\nfunc capitalize(s string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.capitalize("foo")\n\tfmt.println(s1) //foo\n\n\ts2 := strutil.capitalize("foo")\n\tfmt.println(s2) //foo\n\n\ts3 := strutil.capitalize("foo"\n\tfmt.println(s3) //foo\n}\n\n\n\n# isstring\n\ncheck if the value\'s data type is string.\n\nsignature:\n\nfunc isstring(v any) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\tfmt.println(strutil.isstring("lancet")) //true\n\tfmt.println(strutil.isstring("")) //true\n\n\tfmt.println(strutil.isstring(1)) //false\n\tfmt.println(strutil.isstring("")) //false\n\tfmt.println(strutil.isstring([]string{})) //false\n}\n\n\n\n# kebabcase\n\ncovert string to kebab-case.\n\nsignature:\n\nfunc kebabcase(s string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.kebabcase("foo bar-")\n\tfmt.println(s1) //foo-bar\n\n\ts2 := strutil.kebabcase("foo_bar")\n\tfmt.println(s2) //foo-bar\n\n\ts3 := strutil.kebabcase("foobar")\n\tfmt.println(s3) //foo-bar\n\n\ts4 := strutil.kebabcase("__foo_bar__")\n\tfmt.println(s4) //f-o-o-b-a-r\n}\n\n\n\n# lowerfirst\n\nconvert the first character of string to lower case.\n\nsignature:\n\nfunc lowerfirst(s string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.lowerfirst("foo")\n\tfmt.println(s1) //foo\n\n\ts2 := strutil.lowerfirst("bar")\n\tfmt.println(s2) //bar\n\n\ts3 := strutil.lowerfirst("foo")\n\tfmt.println(s3) //foo\n\n\ts4 := strutil.lowerfirst("foo大")\n\tfmt.println(s4) //foo大\n}\n\n\n\n# upperfirst\n\nconvert the first character of string to upper case.\n\nsignature:\n\nfunc upperfirst(s string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.upperfirst("foo")\n\tfmt.println(s1) //foo\n\n\ts2 := strutil.upperfirst("bar")\n\tfmt.println(s2) //bar\n\n\ts3 := strutil.upperfirst("foo")\n\tfmt.println(s3) //foo\n\n\ts4 := strutil.upperfirst("foo大")\n\tfmt.println(s4) //foo大\n}\n\n\n\n# padend\n\npads string on the right side if it\'s shorter than size.\n\nsignature:\n\nfunc padend(source string, size int, padstr string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.padend("a", 1, "b")\n\tfmt.println(s1) //a\n\n\ts2 := strutil.padend("a", 2, "b")\n\tfmt.println(s2) //ab\n\n\ts3 := strutil.padend("abcd", 6, "mno")\n\tfmt.println(s3) //abcdmn\n\n\ts4 := strutil.padend("abc", 6, "ab")\n\tfmt.println(s4) //abcaba\n}\n\n\n\n# padstart\n\npads string on the left side if it\'s shorter than size.\n\nsignature:\n\nfunc padstart(source string, size int, padstr string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.padstart("a", 1, "b")\n\tfmt.println(s1) //a\n\n\ts2 := strutil.padstart("a", 2, "b")\n\tfmt.println(s2) //ba\n\n\ts3 := strutil.padstart("abcd", 6, "mno")\n\tfmt.println(s3) //mnabcd\n\n\ts4 := strutil.padstart("abc", 6, "ab")\n\tfmt.println(s4) //abaabc\n}\n\n\n\n# reverse\n\nreturn string whose char order is reversed to the given string.\n\nsignature:\n\nfunc reverse(s string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.reversestr("abc")\n\tfmt.println(s1) //cba\n\n\ts2 := strutil.reversestr("12345")\n\tfmt.println(s2) //54321\n}\n\n\n\n# snakecase\n\ncovert string to snake_case.\n\nsignature:\n\nfunc snakecase(s string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.snakecase("foo bar-")\n\tfmt.println(s1) //foo_bar\n\n\ts2 := strutil.snakecase("foo_bar")\n\tfmt.println(s2) //foo_bar\n\n\ts3 := strutil.snakecase("foobar")\n\tfmt.println(s3) //foo_bar\n\n\ts4 := strutil.snakecase("__foo_bar__")\n\tfmt.println(s4) //f_o_o_b_a_r\n\n\ts5 := strutil.snakecase("abbc-s$@a&%_b.b^c")\n\tfmt.println(s5) //a_bbc_s_a_b_b_c\n}\n\n\n\n# splitex\n\nsplit a given string whether the result contains empty string.\n\nsignature:\n\nfunc splitex(s, sep string, removeemptystring bool) []string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\tarr1 := strutil.splitex(" a b c ", "", true)\n\tfmt.println(arr1) //[]string{}\n\n\tarr2 := strutil.splitex(" a b c ", " ", false)\n\tfmt.println(arr2) //[]string{"", "a", "b", "c", ""}\n\n\tarr3 := strutil.splitex(" a b c ", " ", true)\n\tfmt.println(arr3) //[]string{"a", "b", "c"}\n\n\tarr4 := strutil.splitex(" a = b = c = ", " = ", false)\n\tfmt.println(arr4) //[]string{" a", "b", "c", ""}\n\n\tarr5 := strutil.splitex(" a = b = c = ", " = ", true)\n\tfmt.println(arr5) //[]string{" a", "b", "c"}\n}\n\n\n\n# wrap\n\nwrap a string with another string.\n\nsignature:\n\nfunc wrap(str string, wrapwith string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.wrap("ab", "")\n\tfmt.println(s1) //ab\n\n\ts2 := strutil.wrap("", "*")\n\tfmt.println(s2) //""\n\n\ts3 := strutil.wrap("ab", "*")\n\tfmt.println(s3) //*ab*\n\n\ts4 := strutil.wrap("ab", "\\"")\n\tfmt.println(s4) //\\"ab\\"\n\n\ts5 := strutil.wrap("ab", "\'")\n\tfmt.println(s5) //\'ab\'\n}\n\n\n\n# wrap\n\nunwrap a given string from anther string. will change str value.\n\nsignature:\n\nfunc unwrap(str string, wraptoken string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.unwrap("ab", "")\n\tfmt.println(s1) //ab\n\n\ts2 := strutil.unwrap("ab", "*")\n\tfmt.println(s2) //ab\n\n\ts3 := strutil.unwrap("**ab**", "*")\n\tfmt.println(s3) //*ab*\n\n\ts4 := strutil.unwrap("*ab", "*")\n\tfmt.println(s4) //*ab\n\n\ts5 := strutil.unwrap("***", "**")\n\tfmt.println(s5) //***\n}\n',charsets:{cjk:!0}},{title:"Netutil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/netutil/",relativePath:"en/netutil/README.md",key:"v-aaa1c32a",path:"/en/netutil/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:98},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:313},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:383},{level:3,title:"ConvertMapToQueryString",slug:"convertmaptoquerystring",normalizedTitle:"convertmaptoquerystring",charIndex:401},{level:3,title:"EncodeUrl",slug:"encodeurl",normalizedTitle:"encodeurl",charIndex:775},{level:3,title:"GetInternalIp",slug:"getinternalip",normalizedTitle:"getinternalip",charIndex:1185},{level:3,title:"GetIps",slug:"getips",normalizedTitle:"getips",charIndex:1492},{level:3,title:"GetMacAddrs",slug:"getmacaddrs",normalizedTitle:"getmacaddrs",charIndex:1734},{level:3,title:"GetPublicIpInfo",slug:"getpublicipinfo",normalizedTitle:"getpublicipinfo",charIndex:1990},{level:3,title:"GetRequestPublicIp",slug:"getrequestpublicip",normalizedTitle:"getrequestpublicip",charIndex:2785},{level:3,title:"IsPublicIP",slug:"ispublicip",normalizedTitle:"ispublicip",charIndex:3415},{level:3,title:"IsInternalIP",slug:"isinternalip",normalizedTitle:"isinternalip",charIndex:3789},{level:3,title:"HttpRequest",slug:"httprequest",normalizedTitle:"httprequest",charIndex:4171},{level:3,title:"HttpClient",slug:"httpclient",normalizedTitle:"httpclient",charIndex:4865},{level:3,title:"SendRequest",slug:"sendrequest",normalizedTitle:"sendrequest",charIndex:5706},{level:3,title:"DecodeResponse",slug:"decoderesponse",normalizedTitle:"decoderesponse",charIndex:6425},{level:3,title:"StructToUrlValues",slug:"structtourlvalues",normalizedTitle:"structtourlvalues",charIndex:7271},{level:3,title:"HttpGet (Deprecated: use SendRequest for replacement)",slug:"httpget-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httpget (deprecated: use sendrequest for replacement)",charIndex:7830},{level:3,title:"HttpPost (Deprecated: use SendRequest for replacement)",slug:"httppost-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httppost (deprecated: use sendrequest for replacement)",charIndex:8660},{level:3,title:"HttpPut (Deprecated: use SendRequest for replacement)",slug:"httpput-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httpput (deprecated: use sendrequest for replacement)",charIndex:9681},{level:3,title:"HttpDelete (Deprecated: use SendRequest for replacement)",slug:"httpdelete-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httpdelete (deprecated: use sendrequest for replacement)",charIndex:10731},{level:3,title:"HttpPatch (Deprecated: use SendRequest for replacement)",slug:"httppatch-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httppatch (deprecated: use sendrequest for replacement)",charIndex:11510},{level:3,title:"ParseHttpResponse",slug:"parsehttpresponse",normalizedTitle:"parsehttpresponse",charIndex:12570}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation ConvertMapToQueryString EncodeUrl GetInternalIp GetIps GetMacAddrs GetPublicIpInfo GetRequestPublicIp IsPublicIP IsInternalIP HttpRequest HttpClient SendRequest DecodeResponse StructToUrlValues HttpGet (Deprecated: use SendRequest for replacement) HttpPost (Deprecated: use SendRequest for replacement) HttpPut (Deprecated: use SendRequest for replacement) HttpDelete (Deprecated: use SendRequest for replacement) HttpPatch (Deprecated: use SendRequest for replacement) ParseHttpResponse",content:'# Netutil\n\nPackage netutil contains functions to get net information and send http request.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/netutil/net.go\n\n * https://github.com/duke-git/lancet/blob/main/netutil/http_client.go\n\n * https://github.com/duke-git/lancet/blob/main/netutil/http.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\n\n\n\n\n# Documentation\n\n\n# ConvertMapToQueryString\n\nConvert map to url query string.\n\nSignature:\n\nfunc ConvertMapToQueryString(param map[string]any) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tvar m = map[string]any{\n\t\t"c": 3,\n\t\t"a": 1,\n\t\t"b": 2,\n\t}\n\tqs := netutil.ConvertMapToQueryString(m)\n\n\tfmt.Println(qs) //a=1&b=2&c=3\n}\n\n\n\n# EncodeUrl\n\nEncode url query string values.\n\nSignature:\n\nfunc EncodeUrl(urlStr string) (string, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turlAddr := "http://www.lancet.com?a=1&b=[2]"\n\tencodedUrl, err := netutil.EncodeUrl(urlAddr)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(encodedUrl) //http://www.lancet.com?a=1&b=%5B2%5D\n}\n\n\n\n# GetInternalIp\n\nGet internal ip information.\n\nSignature:\n\nfunc GetInternalIp() string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tinternalIp := netutil.GetInternalIp()\n\tip := net.ParseIP(internalIp)\n\n\tfmt.Println(ip) //192.168.1.9\n}\n\n\n\n# GetIps\n\nGet all ipv4 list.\n\nSignature:\n\nfunc GetIps() []string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tips := netutil.GetIps()\n\tfmt.Println(ips) //[192.168.1.9]\n}\n\n\n\n# GetMacAddrs\n\nGet all mac addresses list.\n\nSignature:\n\nfunc GetMacAddrs() []string {\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\taddrs := netutil.GetMacAddrs()\n\tfmt.Println(addrs)\n}\n\n\n\n# GetPublicIpInfo\n\nGet public ip information.\n\nSignature:\n\nfunc GetPublicIpInfo() (*PublicIpInfo, error)\ntype PublicIpInfo struct {\n\tStatus      string  `json:"status"`\n\tCountry     string  `json:"country"`\n\tCountryCode string  `json:"countryCode"`\n\tRegion      string  `json:"region"`\n\tRegionName  string  `json:"regionName"`\n\tCity        string  `json:"city"`\n\tLat         float64 `json:"lat"`\n\tLon         float64 `json:"lon"`\n\tIsp         string  `json:"isp"`\n\tOrg         string  `json:"org"`\n\tAs          string  `json:"as"`\n\tIp          string  `json:"query"`\n}\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tpublicIpInfo, err := netutil.GetPublicIpInfo()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(publicIpInfo)\n}\n\n\n\n# GetRequestPublicIp\n\nGet http request public ip.\n\nSignature:\n\nfunc GetRequestPublicIp(req *http.Request) string\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip := "36.112.24.10"\n\n\trequest1 := http.Request{\n\t\tMethod: "GET",\n\t\tHeader: http.Header{\n\t\t\t"X-Forwarded-For": {ip},\n\t\t},\n\t}\n\tpublicIp1 := netutil.GetRequestPublicIp(&request1)\n\tfmt.Println(publicIp1) //36.112.24.10\n\n\trequest2 := http.Request{\n\t\tMethod: "GET",\n\t\tHeader: http.Header{\n\t\t\t"X-Real-Ip": {ip},\n\t\t},\n\t}\n\tpublicIp2 := netutil.GetRequestPublicIp(&request2)\n\tfmt.Println(publicIp2) //36.112.24.10\n}\n\n\n\n# IsPublicIP\n\nChecks if an ip is public or not.\n\nSignature:\n\nfunc IsPublicIP(IP net.IP) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip1 := net.ParseIP("192.168.0.1")\n\tip2 := net.ParseIP("36.112.24.10")\n\n\tfmt.Println(netutil.IsPublicIP(ip1)) //false\n\tfmt.Println(netutil.IsPublicIP(ip2)) //true\n}\n\n\n\n# IsInternalIP\n\nChecks if an ip is intranet or not.\n\nSignature:\n\nfunc IsInternalIP(IP net.IP) bool\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip1 := net.ParseIP("127.0.0.1")\n\tip2 := net.ParseIP("36.112.24.10")\n\n\tfmt.Println(netutil.IsInternalIP(ip1)) //true\n\tfmt.Println(netutil.IsInternalIP(ip2)) //false\n}\n\n\n\n# HttpRequest\n\nHttpRequest is a struct used to abstract HTTP request entity.\n\nSignature:\n\ntype HttpRequest struct {\n\tRawURL      string\n\tMethod      string\n\tHeaders     http.Header\n\tQueryParams url.Values\n\tFormData    url.Values\n\tBody        []byte\n}\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\theader := http.Header{}\n\theader.Add("Content-Type", "multipart/form-data")\n\n\tpostData := url.Values{}\n\tpostData.Add("userId", "1")\n\tpostData.Add("title", "testItem")\n\n\trequest := &netutil.HttpRequest{\n\t\tRawURL:   "https://jsonplaceholder.typicode.com/todos",\n\t\tMethod:   "POST",\n\t\tHeaders:  header,\n\t\tFormData: postData,\n\t}\n}\n\n\n\n# HttpClient\n\nHttpClient is a struct used to send HTTP request. It can be instanced with some configurations or none config.\n\nSignature:\n\ntype HttpClient struct {\n\t*http.Client\n\tTLS     *tls.Config\n\tRequest *http.Request\n\tConfig  HttpClientConfig\n}\n\ntype HttpClientConfig struct {\n\tSSLEnabled       bool\n\tTLSConfig        *tls.Config\n\tCompressed       bool\n\tHandshakeTimeout time.Duration\n\tResponseTimeout  time.Duration\n\tVerbose          bool\n}\n\nfunc NewHttpClient() *HttpClient\n\nfunc NewHttpClientWithConfig(config *HttpClientConfig) *HttpClient\n\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\thttpClientCfg := netutil.HttpClientConfig{\n\t\tSSLEnabled: true,\n\t\tHandshakeTimeout:10 * time.Second\n\t}\n\thttpClient := netutil.NewHttpClientWithConfig(&httpClientCfg)\n}\n\n\n\n# SendRequest\n\nUse HttpClient to send HTTP request.\n\nSignature:\n\nfunc (client *HttpClient) SendRequest(request *HttpRequest) (*http.Response, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\trequest := &netutil.HttpRequest{\n\t\tRawURL: "https://jsonplaceholder.typicode.com/todos/1",\n\t\tMethod: "GET",\n\t}\n\n\thttpClient := netutil.NewHttpClient()\n\tresp, err := httpClient.SendRequest(request)\n\tif err != nil || resp.StatusCode != 200 {\n\t\tlog.Fatal(err)\n\t}\n\n\ttype Todo struct {\n\t\tUserId    int    `json:"userId"`\n\t\tId        int    `json:"id"`\n\t\tTitle     string `json:"title"`\n\t\tCompleted bool   `json:"completed"`\n\t}\n\n\tvar todo Todo\n\thttpClient.DecodeResponse(resp, &todo)\n\n\tfmt.Println(todo.Id) //1\n}\n\n\n\n# DecodeResponse\n\nDecode http response into target object.\n\nSignature:\n\nfunc (client *HttpClient) DecodeResponse(resp *http.Response, target any) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\trequest := &netutil.HttpRequest{\n\t\tRawURL: "https://jsonplaceholder.typicode.com/todos/1",\n\t\tMethod: "GET",\n\t}\n\n\thttpClient := netutil.NewHttpClient()\n\tresp, err := httpClient.SendRequest(request)\n\tif err != nil || resp.StatusCode != 200 {\n\t\tlog.Fatal(err)\n\t}\n\n\ttype Todo struct {\n\t\tUserId    int    `json:"userId"`\n\t\tId        int    `json:"id"`\n\t\tTitle     string `json:"title"`\n\t\tCompleted bool   `json:"completed"`\n\t}\n\n\tvar todo Todo\n\thttpClient.DecodeResponse(resp, &todo)\n\n\tfmt.Println(todo.Id) //1\n}\n\n\n\n# StructToUrlValues\n\nConvert struct to url values, only convert the field which is exported and has `json` tag.\n\nSignature:\n\nfunc StructToUrlValues(targetStruct any) url.Values\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\ttype TodoQuery struct {\n\t\tId     int `json:"id"`\n\t\tUserId int `json:"userId"`\n\t}\n\ttodoQuery := TodoQuery{\n\t\tId:     1,\n\t\tUserId: 2,\n\t}\n\ttodoValues := netutil.StructToUrlValues(todoQuery)\n\n\tfmt.Println(todoValues.Get("id")) //1\n\tfmt.Println(todoValues.Get("userId")) //2\n}\n\n\n\n# HttpGet (Deprecated: use SendRequest for replacement)\n\nSend http get request.\n\nSignature:\n\n// params[0] is header which type should be http.Header or map[string]string,\n// params[1] is query param which type should be url.Values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.Client.\nfunc HttpGet(url string, params ...any) (*http.Response, error)\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\n\tresp, err := netutil.HttpGet(url, header)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# HttpPost (Deprecated: use SendRequest for replacement)\n\nSend http post request.\n\nSignature:\n\n// params[0] is header which type should be http.Header or map[string]string,\n// params[1] is query param which type should be url.Values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.Client.\nfunc HttpPost(url string, params ...any) (*http.Response, error)\n\n\nExample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\ttype Todo struct {\n\t\tUserId int    `json:"userId"`\n\t\tTitle  string `json:"title"`\n\t}\n\ttodo := Todo{1, "TestAddToDo"}\n\tbodyParams, _ := json.Marshal(todo)\n\n\tresp, err := netutil.HttpPost(url, header, nil, bodyParams)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# HttpPut (Deprecated: use SendRequest for replacement)\n\nSend http put request.\n\nSignature:\n\n// params[0] is header which type should be http.Header or map[string]string,\n// params[1] is query param which type should be url.Values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.Client.\nfunc HttpPut(url string, params ...any) (*http.Response, error)\n\n\nExample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\ttype Todo struct {\n\t\tId     int    `json:"id"`\n\t\tUserId int    `json:"userId"`\n\t\tTitle  string `json:"title"`\n\t}\n\ttodo := Todo{1, 1, "TestPutToDo"}\n\tbodyParams, _ := json.Marshal(todo)\n\n\tresp, err := netutil.HttpPut(url, header, nil, bodyParams)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# HttpDelete (Deprecated: use SendRequest for replacement)\n\nSend http delete request.\n\nSignature:\n\n// params[0] is header which type should be http.Header or map[string]string,\n// params[1] is query param which type should be url.Values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.Client.\nfunc HttpDelete(url string, params ...any) (*http.Response, error)\n\n\nExample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\tresp, err := netutil.HttpDelete(url)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# HttpPatch (Deprecated: use SendRequest for replacement)\n\nSend http patch request.\n\nSignature:\n\n// params[0] is header which type should be http.Header or map[string]string,\n// params[1] is query param which type should be url.Values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.Client.\nfunc HttpPatch(url string, params ...any) (*http.Response, error)\n\n\nExample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\ttype Todo struct {\n\t\tId     int    `json:"id"`\n\t\tUserId int    `json:"userId"`\n\t\tTitle  string `json:"title"`\n\t}\n\ttodo := Todo{1, 1, "TestPatchToDo"}\n\tbodyParams, _ := json.Marshal(todo)\n\n\tresp, err := netutil.HttpPatch(url, header, nil, bodyParams)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# ParseHttpResponse\n\nDecode http response to specified interface.\n\nSignature:\n\nfunc ParseHttpResponse(resp *http.Response, obj any) error\n\n\nExample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\n\tresp, err := netutil.HttpGet(url, header)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\ttype Todo struct {\n\t\tId        int    `json:"id"`\n\t\tUserId    int    `json:"userId"`\n\t\tTitle     string `json:"title"`\n\t\tCompleted bool   `json:"completed"`\n\t}\n\n\ttoDoResp := &Todo{}\n\terr = netutil.ParseHttpResponse(resp, toDoResp)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(toDoResp)\n}\n',normalizedContent:'# netutil\n\npackage netutil contains functions to get net information and send http request.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/netutil/net.go\n\n * https://github.com/duke-git/lancet/blob/main/netutil/http_client.go\n\n * https://github.com/duke-git/lancet/blob/main/netutil/http.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\n\n\n\n\n# documentation\n\n\n# convertmaptoquerystring\n\nconvert map to url query string.\n\nsignature:\n\nfunc convertmaptoquerystring(param map[string]any) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tvar m = map[string]any{\n\t\t"c": 3,\n\t\t"a": 1,\n\t\t"b": 2,\n\t}\n\tqs := netutil.convertmaptoquerystring(m)\n\n\tfmt.println(qs) //a=1&b=2&c=3\n}\n\n\n\n# encodeurl\n\nencode url query string values.\n\nsignature:\n\nfunc encodeurl(urlstr string) (string, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turladdr := "http://www.lancet.com?a=1&b=[2]"\n\tencodedurl, err := netutil.encodeurl(urladdr)\n\tif err != nil {\n\t\tfmt.println(err)\n\t}\n\tfmt.println(encodedurl) //http://www.lancet.com?a=1&b=%5b2%5d\n}\n\n\n\n# getinternalip\n\nget internal ip information.\n\nsignature:\n\nfunc getinternalip() string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tinternalip := netutil.getinternalip()\n\tip := net.parseip(internalip)\n\n\tfmt.println(ip) //192.168.1.9\n}\n\n\n\n# getips\n\nget all ipv4 list.\n\nsignature:\n\nfunc getips() []string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tips := netutil.getips()\n\tfmt.println(ips) //[192.168.1.9]\n}\n\n\n\n# getmacaddrs\n\nget all mac addresses list.\n\nsignature:\n\nfunc getmacaddrs() []string {\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\taddrs := netutil.getmacaddrs()\n\tfmt.println(addrs)\n}\n\n\n\n# getpublicipinfo\n\nget public ip information.\n\nsignature:\n\nfunc getpublicipinfo() (*publicipinfo, error)\ntype publicipinfo struct {\n\tstatus      string  `json:"status"`\n\tcountry     string  `json:"country"`\n\tcountrycode string  `json:"countrycode"`\n\tregion      string  `json:"region"`\n\tregionname  string  `json:"regionname"`\n\tcity        string  `json:"city"`\n\tlat         float64 `json:"lat"`\n\tlon         float64 `json:"lon"`\n\tisp         string  `json:"isp"`\n\torg         string  `json:"org"`\n\tas          string  `json:"as"`\n\tip          string  `json:"query"`\n}\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tpublicipinfo, err := netutil.getpublicipinfo()\n\tif err != nil {\n\t\tfmt.println(err)\n\t}\n\n\tfmt.println(publicipinfo)\n}\n\n\n\n# getrequestpublicip\n\nget http request public ip.\n\nsignature:\n\nfunc getrequestpublicip(req *http.request) string\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip := "36.112.24.10"\n\n\trequest1 := http.request{\n\t\tmethod: "get",\n\t\theader: http.header{\n\t\t\t"x-forwarded-for": {ip},\n\t\t},\n\t}\n\tpublicip1 := netutil.getrequestpublicip(&request1)\n\tfmt.println(publicip1) //36.112.24.10\n\n\trequest2 := http.request{\n\t\tmethod: "get",\n\t\theader: http.header{\n\t\t\t"x-real-ip": {ip},\n\t\t},\n\t}\n\tpublicip2 := netutil.getrequestpublicip(&request2)\n\tfmt.println(publicip2) //36.112.24.10\n}\n\n\n\n# ispublicip\n\nchecks if an ip is public or not.\n\nsignature:\n\nfunc ispublicip(ip net.ip) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip1 := net.parseip("192.168.0.1")\n\tip2 := net.parseip("36.112.24.10")\n\n\tfmt.println(netutil.ispublicip(ip1)) //false\n\tfmt.println(netutil.ispublicip(ip2)) //true\n}\n\n\n\n# isinternalip\n\nchecks if an ip is intranet or not.\n\nsignature:\n\nfunc isinternalip(ip net.ip) bool\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip1 := net.parseip("127.0.0.1")\n\tip2 := net.parseip("36.112.24.10")\n\n\tfmt.println(netutil.isinternalip(ip1)) //true\n\tfmt.println(netutil.isinternalip(ip2)) //false\n}\n\n\n\n# httprequest\n\nhttprequest is a struct used to abstract http request entity.\n\nsignature:\n\ntype httprequest struct {\n\trawurl      string\n\tmethod      string\n\theaders     http.header\n\tqueryparams url.values\n\tformdata    url.values\n\tbody        []byte\n}\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\theader := http.header{}\n\theader.add("content-type", "multipart/form-data")\n\n\tpostdata := url.values{}\n\tpostdata.add("userid", "1")\n\tpostdata.add("title", "testitem")\n\n\trequest := &netutil.httprequest{\n\t\trawurl:   "https://jsonplaceholder.typicode.com/todos",\n\t\tmethod:   "post",\n\t\theaders:  header,\n\t\tformdata: postdata,\n\t}\n}\n\n\n\n# httpclient\n\nhttpclient is a struct used to send http request. it can be instanced with some configurations or none config.\n\nsignature:\n\ntype httpclient struct {\n\t*http.client\n\ttls     *tls.config\n\trequest *http.request\n\tconfig  httpclientconfig\n}\n\ntype httpclientconfig struct {\n\tsslenabled       bool\n\ttlsconfig        *tls.config\n\tcompressed       bool\n\thandshaketimeout time.duration\n\tresponsetimeout  time.duration\n\tverbose          bool\n}\n\nfunc newhttpclient() *httpclient\n\nfunc newhttpclientwithconfig(config *httpclientconfig) *httpclient\n\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\thttpclientcfg := netutil.httpclientconfig{\n\t\tsslenabled: true,\n\t\thandshaketimeout:10 * time.second\n\t}\n\thttpclient := netutil.newhttpclientwithconfig(&httpclientcfg)\n}\n\n\n\n# sendrequest\n\nuse httpclient to send http request.\n\nsignature:\n\nfunc (client *httpclient) sendrequest(request *httprequest) (*http.response, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\trequest := &netutil.httprequest{\n\t\trawurl: "https://jsonplaceholder.typicode.com/todos/1",\n\t\tmethod: "get",\n\t}\n\n\thttpclient := netutil.newhttpclient()\n\tresp, err := httpclient.sendrequest(request)\n\tif err != nil || resp.statuscode != 200 {\n\t\tlog.fatal(err)\n\t}\n\n\ttype todo struct {\n\t\tuserid    int    `json:"userid"`\n\t\tid        int    `json:"id"`\n\t\ttitle     string `json:"title"`\n\t\tcompleted bool   `json:"completed"`\n\t}\n\n\tvar todo todo\n\thttpclient.decoderesponse(resp, &todo)\n\n\tfmt.println(todo.id) //1\n}\n\n\n\n# decoderesponse\n\ndecode http response into target object.\n\nsignature:\n\nfunc (client *httpclient) decoderesponse(resp *http.response, target any) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\trequest := &netutil.httprequest{\n\t\trawurl: "https://jsonplaceholder.typicode.com/todos/1",\n\t\tmethod: "get",\n\t}\n\n\thttpclient := netutil.newhttpclient()\n\tresp, err := httpclient.sendrequest(request)\n\tif err != nil || resp.statuscode != 200 {\n\t\tlog.fatal(err)\n\t}\n\n\ttype todo struct {\n\t\tuserid    int    `json:"userid"`\n\t\tid        int    `json:"id"`\n\t\ttitle     string `json:"title"`\n\t\tcompleted bool   `json:"completed"`\n\t}\n\n\tvar todo todo\n\thttpclient.decoderesponse(resp, &todo)\n\n\tfmt.println(todo.id) //1\n}\n\n\n\n# structtourlvalues\n\nconvert struct to url values, only convert the field which is exported and has `json` tag.\n\nsignature:\n\nfunc structtourlvalues(targetstruct any) url.values\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\ttype todoquery struct {\n\t\tid     int `json:"id"`\n\t\tuserid int `json:"userid"`\n\t}\n\ttodoquery := todoquery{\n\t\tid:     1,\n\t\tuserid: 2,\n\t}\n\ttodovalues := netutil.structtourlvalues(todoquery)\n\n\tfmt.println(todovalues.get("id")) //1\n\tfmt.println(todovalues.get("userid")) //2\n}\n\n\n\n# httpget (deprecated: use sendrequest for replacement)\n\nsend http get request.\n\nsignature:\n\n// params[0] is header which type should be http.header or map[string]string,\n// params[1] is query param which type should be url.values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.client.\nfunc httpget(url string, params ...any) (*http.response, error)\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\n\tresp, err := netutil.httpget(url, header)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# httppost (deprecated: use sendrequest for replacement)\n\nsend http post request.\n\nsignature:\n\n// params[0] is header which type should be http.header or map[string]string,\n// params[1] is query param which type should be url.values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.client.\nfunc httppost(url string, params ...any) (*http.response, error)\n\n\nexample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\ttype todo struct {\n\t\tuserid int    `json:"userid"`\n\t\ttitle  string `json:"title"`\n\t}\n\ttodo := todo{1, "testaddtodo"}\n\tbodyparams, _ := json.marshal(todo)\n\n\tresp, err := netutil.httppost(url, header, nil, bodyparams)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# httpput (deprecated: use sendrequest for replacement)\n\nsend http put request.\n\nsignature:\n\n// params[0] is header which type should be http.header or map[string]string,\n// params[1] is query param which type should be url.values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.client.\nfunc httpput(url string, params ...any) (*http.response, error)\n\n\nexample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\ttype todo struct {\n\t\tid     int    `json:"id"`\n\t\tuserid int    `json:"userid"`\n\t\ttitle  string `json:"title"`\n\t}\n\ttodo := todo{1, 1, "testputtodo"}\n\tbodyparams, _ := json.marshal(todo)\n\n\tresp, err := netutil.httpput(url, header, nil, bodyparams)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# httpdelete (deprecated: use sendrequest for replacement)\n\nsend http delete request.\n\nsignature:\n\n// params[0] is header which type should be http.header or map[string]string,\n// params[1] is query param which type should be url.values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.client.\nfunc httpdelete(url string, params ...any) (*http.response, error)\n\n\nexample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\tresp, err := netutil.httpdelete(url)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# httppatch (deprecated: use sendrequest for replacement)\n\nsend http patch request.\n\nsignature:\n\n// params[0] is header which type should be http.header or map[string]string,\n// params[1] is query param which type should be url.values or map[string]string,\n// params[2] is post body which type should be []byte.\n// params[3] is http client which type should be http.client.\nfunc httppatch(url string, params ...any) (*http.response, error)\n\n\nexample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\ttype todo struct {\n\t\tid     int    `json:"id"`\n\t\tuserid int    `json:"userid"`\n\t\ttitle  string `json:"title"`\n\t}\n\ttodo := todo{1, 1, "testpatchtodo"}\n\tbodyparams, _ := json.marshal(todo)\n\n\tresp, err := netutil.httppatch(url, header, nil, bodyparams)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# parsehttpresponse\n\ndecode http response to specified interface.\n\nsignature:\n\nfunc parsehttpresponse(resp *http.response, obj any) error\n\n\nexample:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\n\tresp, err := netutil.httpget(url, header)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\ttype todo struct {\n\t\tid        int    `json:"id"`\n\t\tuserid    int    `json:"userid"`\n\t\ttitle     string `json:"title"`\n\t\tcompleted bool   `json:"completed"`\n\t}\n\n\ttodoresp := &todo{}\n\terr = netutil.parsehttpresponse(resp, todoresp)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tfmt.println(todoresp)\n}\n',charsets:{cjk:!0}},{title:"Fileutil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/fileutil/",relativePath:"fileutil/README.md",key:"v-328c7eea",path:"/fileutil/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:38},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:114},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:182},{level:3,title:"ClearFile",slug:"clearfile",normalizedTitle:"clearfile",charIndex:189},{level:3,title:"CreateFile",slug:"createfile",normalizedTitle:"createfile",charIndex:453},{level:3,title:"CreateDir",slug:"createdir",normalizedTitle:"createdir",charIndex:735},{level:3,title:"CopyFile",slug:"copyfile",normalizedTitle:"copyfile",charIndex:989},{level:3,title:"FileMode",slug:"filemode",normalizedTitle:"filemode",charIndex:1305},{level:3,title:"MiMeType",slug:"mimetype",normalizedTitle:"mimetype",charIndex:1613},{level:3,title:"IsExist",slug:"isexist",normalizedTitle:"isexist",charIndex:2038},{level:3,title:"IsLink",slug:"islink",normalizedTitle:"islink",charIndex:2331},{level:3,title:"IsDir",slug:"isdir",normalizedTitle:"isdir",charIndex:2582},{level:3,title:"ListFileNames",slug:"listfilenames",normalizedTitle:"listfilenames",charIndex:2881},{level:3,title:"RemoveFile",slug:"removefile",normalizedTitle:"removefile",charIndex:3150},{level:3,title:"ReadFileToString",slug:"readfiletostring",normalizedTitle:"readfiletostring",charIndex:3415},{level:3,title:"ReadFileByLine",slug:"readfilebyline",normalizedTitle:"readfilebyline",charIndex:3862},{level:3,title:"Zip",slug:"zip",normalizedTitle:"zip",charIndex:4351},{level:3,title:"UnZip",slug:"unzip",normalizedTitle:"unzip",charIndex:4647}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 ClearFile CreateFile CreateDir CopyFile FileMode MiMeType IsExist IsLink IsDir ListFileNames RemoveFile ReadFileToString ReadFileByLine Zip UnZip",content:'# Fileutil\n\nfileutil 包支持文件基本操作。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/fileutil/file.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\n\n\n\n\n# 文档\n\n\n# ClearFile\n\n清空文件内容\n\n函数签名:\n\nfunc ClearFile(path string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.ClearFile("./test.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# CreateFile\n\n创建文件，创建成功返回true, 否则返回false\n\n函数签名:\n\nfunc CreateFile(path string) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    isCreatedSucceed := fileutil.CreateFile("./test.txt")\n    fmt.Println(isCreatedSucceed)\n}\n\n\n\n# CreateDir\n\n使用绝对路径创建嵌套目录，例如/a/, /a/b/\n\n函数签名:\n\nfunc CreateDir(absPath string) error\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.CreateDir("/a/")\n    fmt.Println(err)\n}\n\n\n\n# CopyFile\n\n拷贝文件，会覆盖原有的拷贝文件\n\n函数签名:\n\nfunc CopyFile(srcFilePath string, dstFilePath string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.CopyFile("./test.txt", "./test_copy.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# FileMode\n\n获取文件mode信息\n\n函数签名:\n\nfunc FileMode(path string) (fs.FileMode, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    mode, err := fileutil.FileMode("./test.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n    fmt.Println(mode)\n}\n\n\n\n# MiMeType\n\n获取文件mime类型, \'file\'参数的类型必须是string或者*os.File\n\n函数签名:\n\nfunc MiMeType(file any) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    type1 := fileutil.MiMeType("./test.txt")\n    fmt.Println(type1) //text/plain; charset=utf-8\n\n    f, _ := os.Open("./file.go")\n    type2 := fileutil.MiMeType(f)\n    fmt.Println(type2) //text/plain; charset=utf-8\n}\n\n\n\n# IsExist\n\n判断文件或目录是否存在\n\n函数签名:\n\nfunc IsExist(path string) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    fileutil.CreateFile("./test.txt")\n    isFileExist := fileutil.IsExist("./test.txt")\n    fmt.Println(isFileExist) //true\n}\n\n\n\n# IsLink\n\n判断文件是否是符号链接\n\n函数签名:\n\nfunc IsLink(path string) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    isLinkFile := fileutil.IsLink("./test.txt")\n    fmt.Println(isLinkFile) //false\n}\n\n\n\n# IsDir\n\n判断目录是否存在\n\n函数签名:\n\nfunc IsDir(path string) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    isDir := fileutil.IsDir("./")\n    fmt.Println(isDir) //true\n\n    isDir = fileutil.IsDir("./test.txt")\n    fmt.Println(isDir) //false\n}\n\n\n\n# ListFileNames\n\n返回目录下所有文件名\n\n函数签名:\n\nfunc ListFileNames(path string) ([]string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    fileNames, _ := fileutil.ListFileNames("./")\n    fmt.Println(fileNames)\n}\n\n\n\n# RemoveFile\n\n删除文件\n\n函数签名:\n\nfunc RemoveFile(path string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.RemoveFile("./test.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# ReadFileToString\n\n读取文件内容并返回字符串\n\n函数签名:\n\nfunc ReadFileToString(path string) (string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    path := "./test.txt"\n    fileutil.CreateFile(path)\n\n    f, _ := os.OpenFile(path, os.O_WRONLY|os.O_TRUNC, 0777)\n    f.WriteString("hello world")\n\n    content, _ := fileutil.ReadFileToString(path)\n    fmt.Println(content) //hello world\n}\n\n\n\n# ReadFileByLine\n\n按行读取文件内容，返回字符串切片包含每一行\n\n函数签名:\n\nfunc ReadFileByLine(path string)([]string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    path := "./text.txt"\n    fileutil.CreateFile(path)\n\n    f, _ := os.OpenFile(path, os.O_WRONLY|os.O_TRUNC, 0777)\n    defer f.Close()\n    f.WriteString("hello\\nworld")\n\n    contents, _ := fileutil.ReadFileByLine(path)\n    fmt.Println(contents) //[]string{"hello", "world"}\n}\n\n\n\n# Zip\n\nzip压缩文件, fpath参数可以是文件或目录\n\n函数签名:\n\nfunc Zip(fpath string, destPath string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.Zip("./test.txt", "./test.zip")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n\n\n# UnZip\n\nzip解压缩文件并保存在目录中\n\nSignature:\n\nfunc UnZip(zipFile string, destPath string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.Zip("./test.zip", "./unzip/test.txt")\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n',normalizedContent:'# fileutil\n\nfileutil 包支持文件基本操作。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/fileutil/file.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\n\n\n\n\n# 文档\n\n\n# clearfile\n\n清空文件内容\n\n函数签名:\n\nfunc clearfile(path string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.clearfile("./test.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# createfile\n\n创建文件，创建成功返回true, 否则返回false\n\n函数签名:\n\nfunc createfile(path string) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    iscreatedsucceed := fileutil.createfile("./test.txt")\n    fmt.println(iscreatedsucceed)\n}\n\n\n\n# createdir\n\n使用绝对路径创建嵌套目录，例如/a/, /a/b/\n\n函数签名:\n\nfunc createdir(abspath string) error\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.createdir("/a/")\n    fmt.println(err)\n}\n\n\n\n# copyfile\n\n拷贝文件，会覆盖原有的拷贝文件\n\n函数签名:\n\nfunc copyfile(srcfilepath string, dstfilepath string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.copyfile("./test.txt", "./test_copy.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# filemode\n\n获取文件mode信息\n\n函数签名:\n\nfunc filemode(path string) (fs.filemode, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    mode, err := fileutil.filemode("./test.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n    fmt.println(mode)\n}\n\n\n\n# mimetype\n\n获取文件mime类型, \'file\'参数的类型必须是string或者*os.file\n\n函数签名:\n\nfunc mimetype(file any) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    type1 := fileutil.mimetype("./test.txt")\n    fmt.println(type1) //text/plain; charset=utf-8\n\n    f, _ := os.open("./file.go")\n    type2 := fileutil.mimetype(f)\n    fmt.println(type2) //text/plain; charset=utf-8\n}\n\n\n\n# isexist\n\n判断文件或目录是否存在\n\n函数签名:\n\nfunc isexist(path string) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    fileutil.createfile("./test.txt")\n    isfileexist := fileutil.isexist("./test.txt")\n    fmt.println(isfileexist) //true\n}\n\n\n\n# islink\n\n判断文件是否是符号链接\n\n函数签名:\n\nfunc islink(path string) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    islinkfile := fileutil.islink("./test.txt")\n    fmt.println(islinkfile) //false\n}\n\n\n\n# isdir\n\n判断目录是否存在\n\n函数签名:\n\nfunc isdir(path string) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    isdir := fileutil.isdir("./")\n    fmt.println(isdir) //true\n\n    isdir = fileutil.isdir("./test.txt")\n    fmt.println(isdir) //false\n}\n\n\n\n# listfilenames\n\n返回目录下所有文件名\n\n函数签名:\n\nfunc listfilenames(path string) ([]string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    filenames, _ := fileutil.listfilenames("./")\n    fmt.println(filenames)\n}\n\n\n\n# removefile\n\n删除文件\n\n函数签名:\n\nfunc removefile(path string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.removefile("./test.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# readfiletostring\n\n读取文件内容并返回字符串\n\n函数签名:\n\nfunc readfiletostring(path string) (string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    path := "./test.txt"\n    fileutil.createfile(path)\n\n    f, _ := os.openfile(path, os.o_wronly|os.o_trunc, 0777)\n    f.writestring("hello world")\n\n    content, _ := fileutil.readfiletostring(path)\n    fmt.println(content) //hello world\n}\n\n\n\n# readfilebyline\n\n按行读取文件内容，返回字符串切片包含每一行\n\n函数签名:\n\nfunc readfilebyline(path string)([]string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    path := "./text.txt"\n    fileutil.createfile(path)\n\n    f, _ := os.openfile(path, os.o_wronly|os.o_trunc, 0777)\n    defer f.close()\n    f.writestring("hello\\nworld")\n\n    contents, _ := fileutil.readfilebyline(path)\n    fmt.println(contents) //[]string{"hello", "world"}\n}\n\n\n\n# zip\n\nzip压缩文件, fpath参数可以是文件或目录\n\n函数签名:\n\nfunc zip(fpath string, destpath string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.zip("./test.txt", "./test.zip")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n\n\n\n# unzip\n\nzip解压缩文件并保存在目录中\n\nsignature:\n\nfunc unzip(zipfile string, destpath string) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/fileutil"\n)\n\nfunc main() {\n    err := fileutil.zip("./test.zip", "./unzip/test.txt")\n    if err != nil {\n        fmt.println(err)\n    }\n}\n',charsets:{cjk:!0}},{title:"Xerror",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/xerror/",relativePath:"en/xerror/README.md",key:"v-2dcb6ecd",path:"/en/xerror/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:62},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:142},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:211},{level:3,title:"Unwrap",slug:"unwrap",normalizedTitle:"unwrap",charIndex:229}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation Unwrap",content:'# Xerror\n\nPackage xerror implements helpers for errors.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/xerror/xerror.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/xerror"\n)\n\n\n\n\n\n# Documentation\n\n\n# Unwrap\n\nUnwrap if err is nil then it returns a valid value. If err is not nil, Unwrap panics with err.\n\nSignature:\n\nfunc Unwrap[T any](val T, err error) T\n\n\nExample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/xerror"\n)\n\nfunc main() {\n\t_, err := strconv.Atoi("4o2")\n\tdefer func() {\n\t\tv := recover()\n\t\tfmt.Println(err.Error()) // err.Error() == v.(*strconv.NumError).Error()\n\t}()\n\n\txerror.Unwrap(strconv.Atoi("4o2"))\n}\n',normalizedContent:'# xerror\n\npackage xerror implements helpers for errors.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/xerror/xerror.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/xerror"\n)\n\n\n\n\n\n# documentation\n\n\n# unwrap\n\nunwrap if err is nil then it returns a valid value. if err is not nil, unwrap panics with err.\n\nsignature:\n\nfunc unwrap[t any](val t, err error) t\n\n\nexample:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/xerror"\n)\n\nfunc main() {\n\t_, err := strconv.atoi("4o2")\n\tdefer func() {\n\t\tv := recover()\n\t\tfmt.println(err.error()) // err.error() == v.(*strconv.numerror).error()\n\t}()\n\n\txerror.unwrap(strconv.atoi("4o2"))\n}\n',charsets:{}},{title:"Function",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/function/",relativePath:"function/README.md",key:"v-2a30ca6a",path:"/function/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:50},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:198},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:266},{level:3,title:"After",slug:"after",normalizedTitle:"after",charIndex:273},{level:3,title:"Before",slug:"before",normalizedTitle:"before",charIndex:916},{level:3,title:"Curry",slug:"curry",normalizedTitle:"curry",charIndex:1542},{level:3,title:"Compose",slug:"compose",normalizedTitle:"compose",charIndex:1966},{level:3,title:"Debounced",slug:"debounced",normalizedTitle:"debounced",charIndex:2375},{level:3,title:"Delay",slug:"delay",normalizedTitle:"delay",charIndex:2972},{level:3,title:"Schedule",slug:"schedule",normalizedTitle:"schedule",charIndex:3283},{level:3,title:"Watcher",slug:"watcher",normalizedTitle:"watcher",charIndex:3713}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 After Before Curry Compose Debounced Delay Schedule Watcher",content:'# Function\n\nfunction 函数包控制函数执行流程，包含部分函数式编程。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/function/function.go\n * https://github.com/duke-git/lancet/blob/main/function/watcher.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/function"\n)\n\n\n\n\n\n# 文档\n\n\n# After\n\n创建一个函数，当他被调用n或更多次之后将马上触发fn\n\n函数签名:\n\nfunc After(n int, fn any) func(args ...any) []reflect.Value\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tarr := []string{"a", "b"}\n\tf := function.After(len(arr), func(i int) int {\n\t\tfmt.Println("last print")\n\t\treturn i\n\t})\n\n\ttype cb func(args ...any) []reflect.Value\n\tprint := func(i int, s string, fn cb) {\n\t\tfmt.Printf("arr[%d] is %s \\n", i, s)\n\t\tfn(i)\n\t}\n\n\tfmt.Println("arr is", arr)\n\tfor i := 0; i < len(arr); i++ {\n\t\tprint(i, arr[i], f)\n\t}\n\n    //output:\n    // arr is [a b]\n    // arr[0] is a\n    // arr[1] is b\n    // last print\n}\n\n\n\n# Before\n\n创建一个函数，调用次数不超过n次，之后再调用这个函数，将返回一次最后调用fn的结果\n\n函数签名:\n\nfunc Before(n int, fn any) func(args ...any) []reflect.Value\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n    "github.com/duke-git/lancet/v2/internal"\n)\n\nfunc main() {\n\tarr := []string{"a", "b", "c", "d", "e"}\n\tf := function.Before(3, func(i int) int {\n\t\treturn i\n\t})\n\n\tvar res []int64\n\ttype cb func(args ...any) []reflect.Value\n\tappendStr := func(i int, s string, fn cb) {\n\t\tv := fn(i)\n\t\tres = append(res, v[0].Int())\n\t}\n\n\tfor i := 0; i < len(arr); i++ {\n\t\tappendStr(i, arr[i], f)\n\t}\n\n\tfmt.Println(res) // 0, 1, 2, 2, 2\n}\n\n\n\n# Curry\n\n创建一个柯里化的函数\n\n函数签名:\n\ntype Fn func(...any) any\nfunc (f Fn) Curry(i any) func(...any) any\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tadd := func(a, b int) int {\n\t\treturn a + b\n\t}\n\tvar addCurry function.Fn = func(values ...any) any {\n\t\treturn add(values[0].(int), values[1].(int))\n\t}\n\tadd1 := addCurry.Curry(1)\n\tresult := add1(2)\n\tfmt.Println(result) //3\n}\n\n\n\n# Compose\n\n从右至左组合函数列表fnList， 返回组合后的函数\n\n函数签名:\n\nfunc Compose(fnList ...func(...any) any) func(...any) any\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tadd1 := func(v ...any) any {\n\t\treturn v[0].(int) + 1\n\t}\n\tadd2 := func(v ...any) any {\n\t\treturn v[0].(int) + 2\n\t}\n\n\tadd3 := function.Compose(add1, add2)\n\tresult := add3(1)\n\n\tfmt.Println(result) //4\n}\n\n\n\n# Debounced\n\n创建一个 debounced 函数，该函数延迟调用 fn 直到自上次调用 debounced 函数后等待持续时间过去。\n\n函数签名:\n\nfunc Debounced(fn func(), duration time.Duration) func()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tcount := 0\n\tadd := func() {\n\t\tcount++\n\t}\n\n\tdebouncedAdd := function.Debounced(add, 50*time.Microsecond)\n\tfunction.debouncedAdd()\n\tfunction.debouncedAdd()\n\tfunction.debouncedAdd()\n\tfunction.debouncedAdd()\n\n\ttime.Sleep(100 * time.Millisecond)\n\tfmt.Println(count) //1\n\n\tfunction.debouncedAdd()\n\ttime.Sleep(100 * time.Millisecond)\n\tfmt.Println(count) //2\n}\n\n\n\n# Delay\n\n延迟delay时间后调用函数\n\n函数签名:\n\nfunc Delay(delay time.Duration, fn any, args ...any)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tvar print = func(s string) {\n\t\tfmt.Println(count) //test delay\n\t}\n\tfunction.Delay(2*time.Second, print, "test delay")\n}\n\n\n\n# Schedule\n\n每次持续时间调用函数，直到关闭返回的 bool chan\n\n函数签名:\n\nfunc Schedule(d time.Duration, fn any, args ...any) chan bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    var res []string\n\tappendStr := func(s string) {\n\t\tres = append(res, s)\n\t}\n\n\tstop := function.Schedule(1*time.Second, appendStr, "*")\n\ttime.Sleep(5 * time.Second)\n\tclose(stop)\n\n\tfmt.Println(res) //[* * * * *]\n}\n\n\n\n# Watcher\n\nWatcher 用于记录代码执行时间。可以启动/停止/重置手表定时器。获取函数执行的时间。\n\n函数签名:\n\ntype Watcher struct {\n\tstartTime int64\n\tstopTime  int64\n\texcuting  bool\n}\nfunc (w *Watcher) Start() //start the watcher\nfunc (w *Watcher) Stop() //stop the watcher\nfunc (w *Watcher) Reset() //reset the watcher\nfunc (w *Watcher) GetElapsedTime() time.Duration //get the elapsed time of function execution\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    w := &function.Watcher{}\n\tw.Start()\n\n\tlongRunningTask()\n\n\tfmt.Println(w.excuting) //true\n\n\tw.Stop()\n\n\teapsedTime := w.GetElapsedTime().Milliseconds()\n\tfmt.Println(eapsedTime)\n\n\tw.Reset()\n\n\tfmt.Println(w.excuting) //false\n\n\tfmt.Println(w.startTime) //0\n\tfmt.Println(w.stopTime) //0\n}\n\nfunc longRunningTask() {\n\tvar slice []int64\n\tfor i := 0; i < 10000000; i++ {\n\t\tslice = append(slice, int64(i))\n\t}\n}\n\n',normalizedContent:'# function\n\nfunction 函数包控制函数执行流程，包含部分函数式编程。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/function/function.go\n * https://github.com/duke-git/lancet/blob/main/function/watcher.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/function"\n)\n\n\n\n\n\n# 文档\n\n\n# after\n\n创建一个函数，当他被调用n或更多次之后将马上触发fn\n\n函数签名:\n\nfunc after(n int, fn any) func(args ...any) []reflect.value\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tarr := []string{"a", "b"}\n\tf := function.after(len(arr), func(i int) int {\n\t\tfmt.println("last print")\n\t\treturn i\n\t})\n\n\ttype cb func(args ...any) []reflect.value\n\tprint := func(i int, s string, fn cb) {\n\t\tfmt.printf("arr[%d] is %s \\n", i, s)\n\t\tfn(i)\n\t}\n\n\tfmt.println("arr is", arr)\n\tfor i := 0; i < len(arr); i++ {\n\t\tprint(i, arr[i], f)\n\t}\n\n    //output:\n    // arr is [a b]\n    // arr[0] is a\n    // arr[1] is b\n    // last print\n}\n\n\n\n# before\n\n创建一个函数，调用次数不超过n次，之后再调用这个函数，将返回一次最后调用fn的结果\n\n函数签名:\n\nfunc before(n int, fn any) func(args ...any) []reflect.value\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n    "github.com/duke-git/lancet/v2/internal"\n)\n\nfunc main() {\n\tarr := []string{"a", "b", "c", "d", "e"}\n\tf := function.before(3, func(i int) int {\n\t\treturn i\n\t})\n\n\tvar res []int64\n\ttype cb func(args ...any) []reflect.value\n\tappendstr := func(i int, s string, fn cb) {\n\t\tv := fn(i)\n\t\tres = append(res, v[0].int())\n\t}\n\n\tfor i := 0; i < len(arr); i++ {\n\t\tappendstr(i, arr[i], f)\n\t}\n\n\tfmt.println(res) // 0, 1, 2, 2, 2\n}\n\n\n\n# curry\n\n创建一个柯里化的函数\n\n函数签名:\n\ntype fn func(...any) any\nfunc (f fn) curry(i any) func(...any) any\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tadd := func(a, b int) int {\n\t\treturn a + b\n\t}\n\tvar addcurry function.fn = func(values ...any) any {\n\t\treturn add(values[0].(int), values[1].(int))\n\t}\n\tadd1 := addcurry.curry(1)\n\tresult := add1(2)\n\tfmt.println(result) //3\n}\n\n\n\n# compose\n\n从右至左组合函数列表fnlist， 返回组合后的函数\n\n函数签名:\n\nfunc compose(fnlist ...func(...any) any) func(...any) any\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tadd1 := func(v ...any) any {\n\t\treturn v[0].(int) + 1\n\t}\n\tadd2 := func(v ...any) any {\n\t\treturn v[0].(int) + 2\n\t}\n\n\tadd3 := function.compose(add1, add2)\n\tresult := add3(1)\n\n\tfmt.println(result) //4\n}\n\n\n\n# debounced\n\n创建一个 debounced 函数，该函数延迟调用 fn 直到自上次调用 debounced 函数后等待持续时间过去。\n\n函数签名:\n\nfunc debounced(fn func(), duration time.duration) func()\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tcount := 0\n\tadd := func() {\n\t\tcount++\n\t}\n\n\tdebouncedadd := function.debounced(add, 50*time.microsecond)\n\tfunction.debouncedadd()\n\tfunction.debouncedadd()\n\tfunction.debouncedadd()\n\tfunction.debouncedadd()\n\n\ttime.sleep(100 * time.millisecond)\n\tfmt.println(count) //1\n\n\tfunction.debouncedadd()\n\ttime.sleep(100 * time.millisecond)\n\tfmt.println(count) //2\n}\n\n\n\n# delay\n\n延迟delay时间后调用函数\n\n函数签名:\n\nfunc delay(delay time.duration, fn any, args ...any)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n\tvar print = func(s string) {\n\t\tfmt.println(count) //test delay\n\t}\n\tfunction.delay(2*time.second, print, "test delay")\n}\n\n\n\n# schedule\n\n每次持续时间调用函数，直到关闭返回的 bool chan\n\n函数签名:\n\nfunc schedule(d time.duration, fn any, args ...any) chan bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    var res []string\n\tappendstr := func(s string) {\n\t\tres = append(res, s)\n\t}\n\n\tstop := function.schedule(1*time.second, appendstr, "*")\n\ttime.sleep(5 * time.second)\n\tclose(stop)\n\n\tfmt.println(res) //[* * * * *]\n}\n\n\n\n# watcher\n\nwatcher 用于记录代码执行时间。可以启动/停止/重置手表定时器。获取函数执行的时间。\n\n函数签名:\n\ntype watcher struct {\n\tstarttime int64\n\tstoptime  int64\n\texcuting  bool\n}\nfunc (w *watcher) start() //start the watcher\nfunc (w *watcher) stop() //stop the watcher\nfunc (w *watcher) reset() //reset the watcher\nfunc (w *watcher) getelapsedtime() time.duration //get the elapsed time of function execution\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/function"\n)\n\nfunc main() {\n    w := &function.watcher{}\n\tw.start()\n\n\tlongrunningtask()\n\n\tfmt.println(w.excuting) //true\n\n\tw.stop()\n\n\teapsedtime := w.getelapsedtime().milliseconds()\n\tfmt.println(eapsedtime)\n\n\tw.reset()\n\n\tfmt.println(w.excuting) //false\n\n\tfmt.println(w.starttime) //0\n\tfmt.println(w.stoptime) //0\n}\n\nfunc longrunningtask() {\n\tvar slice []int64\n\tfor i := 0; i < 10000000; i++ {\n\t\tslice = append(slice, int64(i))\n\t}\n}\n\n',charsets:{cjk:!0}},{title:"System",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/system/",relativePath:"en/system/README.md",key:"v-438800cf",path:"/en/system/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:89},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:165},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:234},{level:3,title:"IsWindows",slug:"iswindows",normalizedTitle:"iswindows",charIndex:252},{level:3,title:"IsLinux",slug:"islinux",normalizedTitle:"islinux",charIndex:483},{level:3,title:"IsMac",slug:"ismac",normalizedTitle:"ismac",charIndex:702},{level:3,title:"GetOsEnv",slug:"getosenv",normalizedTitle:"getosenv",charIndex:909},{level:3,title:"SetOsEnv",slug:"setosenv",normalizedTitle:"setosenv",charIndex:1173},{level:3,title:"RemoveOsEnv",slug:"removeosenv",normalizedTitle:"removeosenv",charIndex:1450},{level:3,title:"CompareOsEnv",slug:"compareosenv",normalizedTitle:"compareosenv",charIndex:1714},{level:3,title:"CompareOsEnv",slug:"compareosenv-2",normalizedTitle:"compareosenv",charIndex:1714},{level:3,title:"GetOsBits",slug:"getosbits",normalizedTitle:"getosbits",charIndex:2406}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation IsWindows IsLinux IsMac GetOsEnv SetOsEnv RemoveOsEnv CompareOsEnv CompareOsEnv GetOsBits",content:'# System\n\nPackage system contains some functions about os, runtime, shell command.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/system/os.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/system"\n)\n\n\n\n\n\n# Documentation\n\n\n# IsWindows\n\nCheck if current os is windows.\n\nSignature:\n\nfunc IsWindows() bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisOsWindows := system.IsWindows()\n\tfmt.Println(isOsWindows)\n}\n\n\n\n# IsLinux\n\nCheck if current os is linux.\n\nSignature:\n\nfunc IsLinux() bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisOsLinux := system.IsLinux()\n\tfmt.Println(isOsLinux)\n}\n\n\n\n# IsMac\n\nCheck if current os is macos.\n\nSignature:\n\nfunc IsMac() bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisOsMac := system.IsMac\n\tfmt.Println(isOsMac)\n}\n\n\n\n# GetOsEnv\n\nGets the value of the environment variable named by the key.\n\nSignature:\n\nfunc GetOsEnv(key string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tfooEnv := system.GetOsEnv("foo")\n\tfmt.Println(fooEnv)\n}\n\n\n\n# SetOsEnv\n\nSets the value of the environment variable named by the key.\n\nSignature:\n\nfunc SetOsEnv(key, value string) error\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\terr := system.SetOsEnv("foo", "foo_value")\n\tfmt.Println(err)\n}\n\n\n\n# RemoveOsEnv\n\nRemove a single environment variable.\n\nSignature:\n\nfunc RemoveOsEnv(key string) error\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\terr := system.RemoveOsEnv("foo")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n\n\n\n# CompareOsEnv\n\nGet env named by the key and compare it with comparedEnv.\n\nSignature:\n\nfunc CompareOsEnv(key, comparedEnv string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tsystem.SetOsEnv("foo", "foo_value")\n\tres := system.CompareOsEnv("foo", "foo_value")\n\tfmt.Println(res) //true\n}\n\n\n\n# CompareOsEnv\n\nUse shell /bin/bash -c(linux) or cmd (windows) to execute command.\n\nSignature:\n\nfunc ExecCommand(command string) (stdout, stderr string, err error)\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tout, errout, err := system.ExecCommand("ls")\n\tfmt.Println(out)\n\tfmt.Println(errout)\n\tfmt.Println(err)\n}\n\n\n\n# GetOsBits\n\nGet current os bits, 32bit or 64bit. return 32 or 64\n\nSignature:\n\nfunc GetOsBits() int\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tosBit := system.GetOsBits()\n\tfmt.Println(osBit)\n}\n',normalizedContent:'# system\n\npackage system contains some functions about os, runtime, shell command.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/system/os.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/system"\n)\n\n\n\n\n\n# documentation\n\n\n# iswindows\n\ncheck if current os is windows.\n\nsignature:\n\nfunc iswindows() bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisoswindows := system.iswindows()\n\tfmt.println(isoswindows)\n}\n\n\n\n# islinux\n\ncheck if current os is linux.\n\nsignature:\n\nfunc islinux() bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisoslinux := system.islinux()\n\tfmt.println(isoslinux)\n}\n\n\n\n# ismac\n\ncheck if current os is macos.\n\nsignature:\n\nfunc ismac() bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisosmac := system.ismac\n\tfmt.println(isosmac)\n}\n\n\n\n# getosenv\n\ngets the value of the environment variable named by the key.\n\nsignature:\n\nfunc getosenv(key string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tfooenv := system.getosenv("foo")\n\tfmt.println(fooenv)\n}\n\n\n\n# setosenv\n\nsets the value of the environment variable named by the key.\n\nsignature:\n\nfunc setosenv(key, value string) error\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\terr := system.setosenv("foo", "foo_value")\n\tfmt.println(err)\n}\n\n\n\n# removeosenv\n\nremove a single environment variable.\n\nsignature:\n\nfunc removeosenv(key string) error\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\terr := system.removeosenv("foo")\n\tif err != nil {\n\t\tfmt.println(err)\n\t}\n}\n\n\n\n# compareosenv\n\nget env named by the key and compare it with comparedenv.\n\nsignature:\n\nfunc compareosenv(key, comparedenv string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tsystem.setosenv("foo", "foo_value")\n\tres := system.compareosenv("foo", "foo_value")\n\tfmt.println(res) //true\n}\n\n\n\n# compareosenv\n\nuse shell /bin/bash -c(linux) or cmd (windows) to execute command.\n\nsignature:\n\nfunc execcommand(command string) (stdout, stderr string, err error)\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tout, errout, err := system.execcommand("ls")\n\tfmt.println(out)\n\tfmt.println(errout)\n\tfmt.println(err)\n}\n\n\n\n# getosbits\n\nget current os bits, 32bit or 64bit. return 32 or 64\n\nsignature:\n\nfunc getosbits() int\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tosbit := system.getosbits()\n\tfmt.println(osbit)\n}\n',charsets:{}},{title:"Validator",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/validator/",relativePath:"en/validator/README.md",key:"v-4e804dcb",path:"/en/validator/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:82},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:168},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:240},{level:3,title:"ContainChinese",slug:"containchinese",normalizedTitle:"containchinese",charIndex:258},{level:3,title:"ContainLetter",slug:"containletter",normalizedTitle:"containletter",charIndex:672},{level:3,title:"ContainLower",slug:"containlower",normalizedTitle:"containlower",charIndex:1087},{level:3,title:"ContainUpper",slug:"containupper",normalizedTitle:"containupper",charIndex:1507},{level:3,title:"IsAlpha",slug:"isalpha",normalizedTitle:"isalpha",charIndex:1927},{level:3,title:"IsAllUpper",slug:"isallupper",normalizedTitle:"isallupper",charIndex:2305},{level:3,title:"IsAllLower",slug:"isalllower",normalizedTitle:"isalllower",charIndex:2633},{level:3,title:"IsBase64",slug:"isbase64",normalizedTitle:"isbase64",charIndex:2961},{level:3,title:"IsChineseMobile",slug:"ischinesemobile",normalizedTitle:"ischinesemobile",charIndex:3283},{level:3,title:"IsChineseIdNum",slug:"ischineseidnum",normalizedTitle:"ischineseidnum",charIndex:3656},{level:3,title:"IsChinesePhone",slug:"ischinesephone",normalizedTitle:"ischinesephone",charIndex:4012},{level:3,title:"IsCreditCard",slug:"iscreditcard",normalizedTitle:"iscreditcard",charIndex:4371},{level:3,title:"IsDns",slug:"isdns",normalizedTitle:"isdns",charIndex:4719},{level:3,title:"IsEmail",slug:"isemail",normalizedTitle:"isemail",charIndex:5093},{level:3,title:"IsEmptyString",slug:"isemptystring",normalizedTitle:"isemptystring",charIndex:5415},{level:3,title:"IsFloatStr",slug:"isfloatstr",normalizedTitle:"isfloatstr",charIndex:5740},{level:3,title:"IsNumberStr",slug:"isnumberstr",normalizedTitle:"isnumberstr",charIndex:6226},{level:3,title:"IsJSON",slug:"isjson",normalizedTitle:"isjson",charIndex:6723},{level:3,title:"IsRegexMatch",slug:"isregexmatch",normalizedTitle:"isregexmatch",charIndex:7187},{level:3,title:"IsIntStr",slug:"isintstr",normalizedTitle:"isintstr",charIndex:7584},{level:3,title:"IsIp",slug:"isip",normalizedTitle:"isip",charIndex:7964},{level:3,title:"IsIpV4",slug:"isipv4",normalizedTitle:"isipv4",charIndex:8340},{level:3,title:"IsIpV6",slug:"isipv6",normalizedTitle:"isipv6",charIndex:8731},{level:3,title:"IsStrongPassword",slug:"isstrongpassword",normalizedTitle:"isstrongpassword",charIndex:9122},{level:3,title:"IsUrl",slug:"isurl",normalizedTitle:"isurl",charIndex:9725},{level:3,title:"IsWeakPassword",slug:"isweakpassword",normalizedTitle:"isweakpassword",charIndex:10092},{level:3,title:"IsZeroValue",slug:"iszerovalue",normalizedTitle:"iszerovalue",charIndex:10579}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation ContainChinese ContainLetter ContainLower ContainUpper IsAlpha IsAllUpper IsAllLower IsBase64 IsChineseMobile IsChineseIdNum IsChinesePhone IsCreditCard IsDns IsEmail IsEmptyString IsFloatStr IsNumberStr IsJSON IsRegexMatch IsIntStr IsIp IsIpV4 IsIpV6 IsStrongPassword IsUrl IsWeakPassword IsZeroValue",content:'# Validator\n\nPackage validator contains some functions for data validation.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/validator/validator.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/validator"\n)\n\n\n\n\n\n# Documentation\n\n\n# ContainChinese\n\nCheck if the string contain mandarin chinese.\n\nSignature:\n\nfunc ContainChinese(s string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ContainChinese("你好")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.ContainChinese("你好hello")\n\tfmt.Println(res2) //true\n\n\tres3 := validator.ContainChinese("hello")\n\tfmt.Println(res3) //false\n}\n\n\n\n# ContainLetter\n\nCheck if the string contain at least one letter.\n\nSignature:\n\nfunc ContainLetter(str string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ContainLetter("1bc")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.ContainLetter("123")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.ContainLetter("&@#$%^&*")\n\tfmt.Println(res3) //false\n}\n\n\n\n# ContainLower\n\nCheck if the string contain at least one lower case letter a-z.\n\nSignature:\n\nfunc ContainLower(str string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ContainLower("1bc")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.ContainLower("123")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.ContainLower("1BC")\n\tfmt.Println(res3) //false\n}\n\n\n\n# ContainUpper\n\nCheck if the string contain at least one upper case letter A-Z.\n\nSignature:\n\nfunc ContainUpper(str string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ContainUpper("1bc")\n\tfmt.Println(res1) //false\n\n\tres2 := validator.ContainUpper("123")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.ContainUpper("1BC")\n\tfmt.Println(res3) //true\n}\n\n\n\n# IsAlpha\n\nCheck if the string contains only letters (a-zA-Z).\n\nSignature:\n\nfunc IsAlpha(s string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsAlpha("abc")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsAlpha("1bc")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.IsAlpha("")\n\tfmt.Println(res3) //false\n}\n\n\n\n# IsAllUpper\n\nCheck if string is all upper case letters A-Z.\n\nSignature:\n\nfunc IsAllUpper(str string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsAllUpper("ABC")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsAllUpper("aBC")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsAllLower\n\nCheck if string is all lower case letters a-z.\n\nSignature:\n\nfunc IsAllLower(str string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsAllLower("abc")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsAllLower("abC")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsBase64\n\nCheck if the string is base64 string.\n\nSignature:\n\nfunc IsBase64(base64 string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsBase64("aGVsbG8=")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsBase64("123456")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsChineseMobile\n\nCheck if the string is valid chinese mobile number.\n\nSignature:\n\nfunc IsChineseMobile(mobileNum string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsChineseMobile("13263527980")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsChineseMobile("434324324")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsChineseIdNum\n\nCheck if the string is chinese id number.\n\nSignature:\n\nfunc IsChineseIdNum(id string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsChineseIdNum("210911192105130715")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsChineseIdNum("123456")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsChinesePhone\n\nCheck if the string is chinese phone number.\n\nSignature:\n\nfunc IsChinesePhone(phone string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsChinesePhone("010-32116675")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsChinesePhone("123-87562")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsCreditCard\n\nCheck if the string is credit card.\n\nSignature:\n\nfunc IsCreditCard(creditCart string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsCreditCard("4111111111111111")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsCreditCard("123456")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsDns\n\nCheck if the string is valid dns.\n\nSignature:\n\nfunc IsDns(dns string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsDns("abc.com")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsDns("a.b.com")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.IsDns("http://abc.com")\n\tfmt.Println(res3) //false\n}\n\n\n\n# IsEmail\n\nCheck if the string is email address.\n\nSignature:\n\nfunc IsEmail(email string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsEmail("abc@xyz.com")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsEmail("a.b@@com")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsEmptyString\n\nCheck if the string is empty or not.\n\nSignature:\n\nfunc IsEmptyString(s string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsEmptyString("")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsEmptyString("abc")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsFloatStr\n\nCheck if the string can convert to a float.\n\nSignature:\n\nfunc IsFloatStr(s string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsFloatStr("")) //false\n\tfmt.Println(validator.IsFloatStr("12a")) //false\n\tfmt.Println(validator.IsFloatStr("3.")) //true\n\tfmt.Println(validator.IsFloatStr("+3.")) //true\n\tfmt.Println(validator.IsFloatStr("-3.")) //true\n\tfmt.Println(validator.IsFloatStr("12")) //true\n}\n\n\n\n# IsNumberStr\n\nCheck if the string can convert to a number.\n\nSignature:\n\nfunc IsNumberStr(s string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsNumberStr("")) //false\n\tfmt.Println(validator.IsNumberStr("12a")) //false\n\tfmt.Println(validator.IsNumberStr("3.")) //true\n\tfmt.Println(validator.IsNumberStr("+3.")) //true\n\tfmt.Println(validator.IsNumberStr("-3.")) //true\n\tfmt.Println(validator.IsNumberStr("+3e2")) //true\n}\n\n\n\n# IsJSON\n\nCheck if the string is valid JSON.\n\nSignature:\n\nfunc IsJSON(str string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsJSON("")) //false\n\tfmt.Println(validator.IsJSON("abc")) //false\n\tfmt.Println(validator.IsJSON("{}")) //true\n\tfmt.Println(validator.IsJSON("[]")) //true\n\tfmt.Println(validator.IsJSON("123")) //true\n\tfmt.Println(validator.IsJSON("{\\"name\\": \\"test\\"}")) //true\n}\n\n\n\n# IsRegexMatch\n\nCheck if the string match the regexp.\n\nSignature:\n\nfunc IsRegexMatch(s, regex string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsRegexMatch("abc", `^[a-zA-Z]+$`)) //true\n\tfmt.Println(validator.IsRegexMatch("1ab", `^[a-zA-Z]+$`)) //false\n\tfmt.Println(validator.IsRegexMatch("", `^[a-zA-Z]+$`)) //false\n}\n\n\n\n# IsIntStr\n\nCheck if the string can convert to a integer.\n\nSignature:\n\nfunc IsIntStr(s string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsIntStr("+3")) //true\n\tfmt.Println(validator.IsIntStr("-3")) //true\n\tfmt.Println(validator.IsIntStr("3.")) //false\n\tfmt.Println(validator.IsIntStr("abc")) //false\n}\n\n\n\n# IsIp\n\nCheck if the string is a ip address.\n\nSignature:\n\nfunc IsIp(ipstr string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsIp("127.0.0.1")) //true\n\tfmt.Println(validator.IsIp("::0:0:0:0:0:0:1")) //true\n\tfmt.Println(validator.IsIp("127.0.0")) //false\n\tfmt.Println(validator.IsIp("127")) //false\n}\n\n\n\n# IsIpV4\n\nCheck if the string is a ipv4 address.\n\nSignature:\n\nfunc IsIpV4(ipstr string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsIpV4("127.0.0.1")) //true\n\tfmt.Println(validator.IsIpV4("::0:0:0:0:0:0:1")) //false\n\tfmt.Println(validator.IsIpV4("127.0.0")) //false\n\tfmt.Println(validator.IsIpV4("127")) //false\n}\n\n\n\n# IsIpV6\n\nCheck if the string is a ipv6 address.\n\nSignature:\n\nfunc IsIpV6(ipstr string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsIpV6("127.0.0.1")) //false\n\tfmt.Println(validator.IsIpV6("::0:0:0:0:0:0:1")) //true\n\tfmt.Println(validator.IsIpV6("127.0.0")) //false\n\tfmt.Println(validator.IsIpV6("127")) //false\n}\n\n\n\n# IsStrongPassword\n\nCheck if the string is strong password (alpha(lower+upper) + number + special chars(!@#$%^&*()?><)).\n\nSignature:\n\nfunc IsStrongPassword(password string, length int) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsStrongPassword("abc", 3)) //false\n\tfmt.Println(validator.IsStrongPassword("abc123", 6)) //false\n\tfmt.Println(validator.IsStrongPassword("abcABC", 6)) //false\n\tfmt.Println(validator.IsStrongPassword("abcABC123@#$", 16)) //false\n\tfmt.Println(validator.IsStrongPassword("abcABC123@#$", 12)) //true\n}\n\n\n\n# IsUrl\n\nCheck if the string is url.\n\nSignature:\n\nfunc IsUrl(str string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsUrl("http://abc.com")) //true\n\tfmt.Println(validator.IsUrl("abc.com")) //true\n\tfmt.Println(validator.IsUrl("a.b.com")) //true\n\tfmt.Println(validator.IsUrl("abc")) //false\n}\n\n\n\n# IsWeakPassword\n\nChecks if the string is weak password（only letter or only number or letter + number） .\n\nSignature:\n\nfunc IsWeakPassword(password string, length int) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsWeakPassword("abc")) //true\n\tfmt.Println(validator.IsWeakPassword("123")) //true\n\tfmt.Println(validator.IsWeakPassword("abc123")) //true\n\tfmt.Println(validator.IsWeakPassword("abc123@#$")) //false\n}\n\n\n\n# IsZeroValue\n\nChecks if passed value is a zero value.\n\nSignature:\n\nfunc IsZeroValue(value any) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsZeroValue(nil)) //true\n\tfmt.Println(validator.IsZeroValue(0)) //true\n\tfmt.Println(validator.IsZeroValue("")) //true\n\tfmt.Println(validator.IsZeroValue([]int)) //true\n\tfmt.Println(validator.IsZeroValue(interface{})) //true\n\n\tfmt.Println(validator.IsZeroValue("0")) //false\n\tfmt.Println(validator.IsZeroValue("nil")) //false\n}\n',normalizedContent:'# validator\n\npackage validator contains some functions for data validation.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/validator/validator.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/validator"\n)\n\n\n\n\n\n# documentation\n\n\n# containchinese\n\ncheck if the string contain mandarin chinese.\n\nsignature:\n\nfunc containchinese(s string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.containchinese("你好")\n\tfmt.println(res1) //true\n\n\tres2 := validator.containchinese("你好hello")\n\tfmt.println(res2) //true\n\n\tres3 := validator.containchinese("hello")\n\tfmt.println(res3) //false\n}\n\n\n\n# containletter\n\ncheck if the string contain at least one letter.\n\nsignature:\n\nfunc containletter(str string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.containletter("1bc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.containletter("123")\n\tfmt.println(res2) //false\n\n\tres3 := validator.containletter("&@#$%^&*")\n\tfmt.println(res3) //false\n}\n\n\n\n# containlower\n\ncheck if the string contain at least one lower case letter a-z.\n\nsignature:\n\nfunc containlower(str string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.containlower("1bc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.containlower("123")\n\tfmt.println(res2) //false\n\n\tres3 := validator.containlower("1bc")\n\tfmt.println(res3) //false\n}\n\n\n\n# containupper\n\ncheck if the string contain at least one upper case letter a-z.\n\nsignature:\n\nfunc containupper(str string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.containupper("1bc")\n\tfmt.println(res1) //false\n\n\tres2 := validator.containupper("123")\n\tfmt.println(res2) //false\n\n\tres3 := validator.containupper("1bc")\n\tfmt.println(res3) //true\n}\n\n\n\n# isalpha\n\ncheck if the string contains only letters (a-za-z).\n\nsignature:\n\nfunc isalpha(s string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isalpha("abc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isalpha("1bc")\n\tfmt.println(res2) //false\n\n\tres3 := validator.isalpha("")\n\tfmt.println(res3) //false\n}\n\n\n\n# isallupper\n\ncheck if string is all upper case letters a-z.\n\nsignature:\n\nfunc isallupper(str string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isallupper("abc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isallupper("abc")\n\tfmt.println(res2) //false\n}\n\n\n\n# isalllower\n\ncheck if string is all lower case letters a-z.\n\nsignature:\n\nfunc isalllower(str string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isalllower("abc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isalllower("abc")\n\tfmt.println(res2) //false\n}\n\n\n\n# isbase64\n\ncheck if the string is base64 string.\n\nsignature:\n\nfunc isbase64(base64 string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isbase64("agvsbg8=")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isbase64("123456")\n\tfmt.println(res2) //false\n}\n\n\n\n# ischinesemobile\n\ncheck if the string is valid chinese mobile number.\n\nsignature:\n\nfunc ischinesemobile(mobilenum string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ischinesemobile("13263527980")\n\tfmt.println(res1) //true\n\n\tres2 := validator.ischinesemobile("434324324")\n\tfmt.println(res2) //false\n}\n\n\n\n# ischineseidnum\n\ncheck if the string is chinese id number.\n\nsignature:\n\nfunc ischineseidnum(id string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ischineseidnum("210911192105130715")\n\tfmt.println(res1) //true\n\n\tres2 := validator.ischineseidnum("123456")\n\tfmt.println(res2) //false\n}\n\n\n\n# ischinesephone\n\ncheck if the string is chinese phone number.\n\nsignature:\n\nfunc ischinesephone(phone string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ischinesephone("010-32116675")\n\tfmt.println(res1) //true\n\n\tres2 := validator.ischinesephone("123-87562")\n\tfmt.println(res2) //false\n}\n\n\n\n# iscreditcard\n\ncheck if the string is credit card.\n\nsignature:\n\nfunc iscreditcard(creditcart string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.iscreditcard("4111111111111111")\n\tfmt.println(res1) //true\n\n\tres2 := validator.iscreditcard("123456")\n\tfmt.println(res2) //false\n}\n\n\n\n# isdns\n\ncheck if the string is valid dns.\n\nsignature:\n\nfunc isdns(dns string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isdns("abc.com")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isdns("a.b.com")\n\tfmt.println(res2) //false\n\n\tres3 := validator.isdns("http://abc.com")\n\tfmt.println(res3) //false\n}\n\n\n\n# isemail\n\ncheck if the string is email address.\n\nsignature:\n\nfunc isemail(email string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isemail("abc@xyz.com")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isemail("a.b@@com")\n\tfmt.println(res2) //false\n}\n\n\n\n# isemptystring\n\ncheck if the string is empty or not.\n\nsignature:\n\nfunc isemptystring(s string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isemptystring("")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isemptystring("abc")\n\tfmt.println(res2) //false\n}\n\n\n\n# isfloatstr\n\ncheck if the string can convert to a float.\n\nsignature:\n\nfunc isfloatstr(s string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isfloatstr("")) //false\n\tfmt.println(validator.isfloatstr("12a")) //false\n\tfmt.println(validator.isfloatstr("3.")) //true\n\tfmt.println(validator.isfloatstr("+3.")) //true\n\tfmt.println(validator.isfloatstr("-3.")) //true\n\tfmt.println(validator.isfloatstr("12")) //true\n}\n\n\n\n# isnumberstr\n\ncheck if the string can convert to a number.\n\nsignature:\n\nfunc isnumberstr(s string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isnumberstr("")) //false\n\tfmt.println(validator.isnumberstr("12a")) //false\n\tfmt.println(validator.isnumberstr("3.")) //true\n\tfmt.println(validator.isnumberstr("+3.")) //true\n\tfmt.println(validator.isnumberstr("-3.")) //true\n\tfmt.println(validator.isnumberstr("+3e2")) //true\n}\n\n\n\n# isjson\n\ncheck if the string is valid json.\n\nsignature:\n\nfunc isjson(str string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isjson("")) //false\n\tfmt.println(validator.isjson("abc")) //false\n\tfmt.println(validator.isjson("{}")) //true\n\tfmt.println(validator.isjson("[]")) //true\n\tfmt.println(validator.isjson("123")) //true\n\tfmt.println(validator.isjson("{\\"name\\": \\"test\\"}")) //true\n}\n\n\n\n# isregexmatch\n\ncheck if the string match the regexp.\n\nsignature:\n\nfunc isregexmatch(s, regex string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isregexmatch("abc", `^[a-za-z]+$`)) //true\n\tfmt.println(validator.isregexmatch("1ab", `^[a-za-z]+$`)) //false\n\tfmt.println(validator.isregexmatch("", `^[a-za-z]+$`)) //false\n}\n\n\n\n# isintstr\n\ncheck if the string can convert to a integer.\n\nsignature:\n\nfunc isintstr(s string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isintstr("+3")) //true\n\tfmt.println(validator.isintstr("-3")) //true\n\tfmt.println(validator.isintstr("3.")) //false\n\tfmt.println(validator.isintstr("abc")) //false\n}\n\n\n\n# isip\n\ncheck if the string is a ip address.\n\nsignature:\n\nfunc isip(ipstr string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isip("127.0.0.1")) //true\n\tfmt.println(validator.isip("::0:0:0:0:0:0:1")) //true\n\tfmt.println(validator.isip("127.0.0")) //false\n\tfmt.println(validator.isip("127")) //false\n}\n\n\n\n# isipv4\n\ncheck if the string is a ipv4 address.\n\nsignature:\n\nfunc isipv4(ipstr string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isipv4("127.0.0.1")) //true\n\tfmt.println(validator.isipv4("::0:0:0:0:0:0:1")) //false\n\tfmt.println(validator.isipv4("127.0.0")) //false\n\tfmt.println(validator.isipv4("127")) //false\n}\n\n\n\n# isipv6\n\ncheck if the string is a ipv6 address.\n\nsignature:\n\nfunc isipv6(ipstr string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isipv6("127.0.0.1")) //false\n\tfmt.println(validator.isipv6("::0:0:0:0:0:0:1")) //true\n\tfmt.println(validator.isipv6("127.0.0")) //false\n\tfmt.println(validator.isipv6("127")) //false\n}\n\n\n\n# isstrongpassword\n\ncheck if the string is strong password (alpha(lower+upper) + number + special chars(!@#$%^&*()?><)).\n\nsignature:\n\nfunc isstrongpassword(password string, length int) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isstrongpassword("abc", 3)) //false\n\tfmt.println(validator.isstrongpassword("abc123", 6)) //false\n\tfmt.println(validator.isstrongpassword("abcabc", 6)) //false\n\tfmt.println(validator.isstrongpassword("abcabc123@#$", 16)) //false\n\tfmt.println(validator.isstrongpassword("abcabc123@#$", 12)) //true\n}\n\n\n\n# isurl\n\ncheck if the string is url.\n\nsignature:\n\nfunc isurl(str string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isurl("http://abc.com")) //true\n\tfmt.println(validator.isurl("abc.com")) //true\n\tfmt.println(validator.isurl("a.b.com")) //true\n\tfmt.println(validator.isurl("abc")) //false\n}\n\n\n\n# isweakpassword\n\nchecks if the string is weak password（only letter or only number or letter + number） .\n\nsignature:\n\nfunc isweakpassword(password string, length int) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isweakpassword("abc")) //true\n\tfmt.println(validator.isweakpassword("123")) //true\n\tfmt.println(validator.isweakpassword("abc123")) //true\n\tfmt.println(validator.isweakpassword("abc123@#$")) //false\n}\n\n\n\n# iszerovalue\n\nchecks if passed value is a zero value.\n\nsignature:\n\nfunc iszerovalue(value any) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.iszerovalue(nil)) //true\n\tfmt.println(validator.iszerovalue(0)) //true\n\tfmt.println(validator.iszerovalue("")) //true\n\tfmt.println(validator.iszerovalue([]int)) //true\n\tfmt.println(validator.iszerovalue(interface{})) //true\n\n\tfmt.println(validator.iszerovalue("0")) //false\n\tfmt.println(validator.iszerovalue("nil")) //false\n}\n',charsets:{cjk:!0}},{title:"Mathutil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/mathutil/",relativePath:"mathutil/README.md",key:"v-6f2c17ea",path:"/mathutil/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:42},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:122},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:190},{level:3,title:"Average",slug:"average",normalizedTitle:"average",charIndex:208},{level:3,title:"Exponent",slug:"exponent",normalizedTitle:"exponent",charIndex:609},{level:3,title:"Fibonacci",slug:"fibonacci",normalizedTitle:"fibonacci",charIndex:912},{level:3,title:"Factorial",slug:"factorial",normalizedTitle:"factorial",charIndex:1325},{level:3,title:"Max",slug:"max",normalizedTitle:"max",charIndex:1646},{level:3,title:"MaxBy",slug:"maxby",normalizedTitle:"maxby",charIndex:1961},{level:3,title:"Min",slug:"min",normalizedTitle:"min",charIndex:2555},{level:3,title:"MinBy",slug:"minby",normalizedTitle:"minby",charIndex:2870},{level:3,title:"Percent",slug:"percent",normalizedTitle:"percent",charIndex:3460},{level:3,title:"RoundToFloat",slug:"roundtofloat",normalizedTitle:"roundtofloat",charIndex:233},{level:3,title:"RoundToString",slug:"roundtostring",normalizedTitle:"roundtostring",charIndex:4182},{level:3,title:"TruncRound",slug:"truncround",normalizedTitle:"truncround",charIndex:4645}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: Documentation Average Exponent Fibonacci Factorial Max MaxBy Min MinBy Percent RoundToFloat RoundToString TruncRound",content:'# Mathutil\n\nmathutil 包实现了一些数学计算的函数.\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/mathutil/mathutil.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\n\n\n\n\n# Documentation\n\n\n# Average\n\n计算平均数. 可能需要对结果调用RoundToFloat方法四舍五入\n\n函数签名:\n\nfunc Average[T lancetconstraints.Number](numbers ...T) T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Average(0, 0)) //0\n\tfmt.Println(mathutil.Average(1, 1)) //1\n\tavg := mathutil.Average(1.2, 1.4) //1.2999999998\n\troundAvg := mmathutil.RoundToFloat(avg, 1) // 1.3\n}\n\n\n\n# Exponent\n\n指数计算（x的n次方）\n\n函数签名:\n\nfunc Exponent(x, n int64) int64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Exponent(10, 0)) //1\n\tfmt.Println(mathutil.Exponent(10, 1)) //10\n\tfmt.Println(mathutil.Exponent(10, 2)) //100\n}\n\n\n\n# Fibonacci\n\n计算斐波那契数列的第n个数\n\n函数签名:\n\nfunc Fibonacci(first, second, n int) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Fibonacci(1, 1, 1)) //1\n\tfmt.Println(mathutil.Fibonacci(1, 1, 2)) //1\n\tfmt.Println(mathutil.Fibonacci(1, 1, 3)) //2\n\tfmt.Println(mathutil.Fibonacci(1, 1, 4)) //3\n\tfmt.Println(mathutil.Fibonacci(1, 1, 5)) //5\n}\n\n\n\n# Factorial\n\n计算阶乘\n\n函数签名:\n\nfunc Factorial(x uint) uint\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Factorial(0)) //1\n\tfmt.Println(mathutil.Factorial(1)) //1\n\tfmt.Println(mathutil.Factorial(2)) //2\n\tfmt.Println(mathutil.Factorial(3)) //6\n}\n\n\n\n# Max\n\n返回参数中的最大数\n\n函数签名:\n\nfunc Max[T lancetconstraints.Number](numbers ...T) T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Max(0, 0)) //0\n\tfmt.Println(mathutil.Max(1, 2, 3)) //3\n\tfmt.Println(mathutil.Max(1.2, 1.4, 1.1, 1.4)) //1.4\n}\n\n\n\n# MaxBy\n\n使用给定的比较器函数返回切片的最大值\n\n函数签名:\n\nfunc MaxBy[T any](slice []T, comparator func(T, T) bool) T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tres1 := mathutil.MaxBy([]string{"a", "ab", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.Println(res1) //abc\n\n\tres2 := mathutil.MaxBy([]string{"abd", "abc", "ab"}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.Println(res2) //abd\n\n\tres3 := mathutil.MaxBy([]string{}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.Println(res3) //“”\n}\n\n\n\n# Min\n\n返回参数中的最小数\n\n函数签名:\n\nfunc Min[T lancetconstraints.Number](numbers ...T) T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Min(0, 0)) //0\n\tfmt.Println(mathutil.Min(1, 2, 3)) //1\n\tfmt.Println(mathutil.Min(1.2, 1.4, 1.1, 1.4)) //1.1\n}\n\n\n\n# MinBy\n\n使用给定的比较器函数返回切片的最小值\n\n函数签名:\n\nfunc MinBy[T any](slice []T, comparator func(T, T) bool) T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tres1 := mathutil.MinBy([]string{"a", "ab", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.Println(res1) //a\n\n\tres2 := mathutil.MinBy([]string{"ab", "ac", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.Println(res2) //ab\n\n\tres3 := mathutil.MinBy([]string{}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.Println(res3) //“”\n}\n\n\n\n# Percent\n\n计算百分比，保留n位小数\n\n函数签名:\n\nfunc Percent(val, total float64, n int) float64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.Percent(1, 2, 2)) //1\n\tfmt.Println(mathutil.Percent(0.1, 0.3, 2)) //33.33\n}\n\n\n\n# RoundToFloat\n\n四舍五入，保留n位小数\n\n函数签名:\n\nfunc RoundToFloat(x float64, n int) float64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.RoundToFloat(0, 0)) //0\n\tfmt.Println(mathutil.RoundToFloat(0, 1)) //0\n\tfmt.Println(mathutil.RoundToFloat(0.124, 2)) //0.12\n\tfmt.Println(mathutil.RoundToFloat(0.125, 2)) //0.13\n\tfmt.Println(mathutil.RoundToFloat(0.125, 3)) //0.125\n}\n\n\n\n# RoundToString\n\n四舍五入，保留n位小数，返回字符串\n\n函数签名:\n\nfunc RoundToString(x float64, n int) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.RoundToString(0, 0)) //"0"\n\tfmt.Println(mathutil.RoundToString(0, 1)) //"0.0:\n\tfmt.Println(mathutil.RoundToString(0.124, 2)) //"0.12"\n\tfmt.Println(mathutil.RoundToString(0.125, 2)) //"0.13"\n\tfmt.Println(mathutil.RoundToString(0.125, 3)) //"0.125"\n}\n\n\n\n# TruncRound\n\n截短n位小数（不进行四舍五入）\n\n函数签名:\n\nfunc TruncRound(x float64, n int) float64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.Println(mathutil.TruncRound(0, 0)) //0\n\tfmt.Println(mathutil.TruncRound(0, 1)) //0\n\tfmt.Println(mathutil.TruncRound(0.124, 2)) //0.12\n\tfmt.Println(mathutil.TruncRound(0.125, 2)) //0.12\n\tfmt.Println(mathutil.TruncRound(0.125, 3)) //0.125\n}\n',normalizedContent:'# mathutil\n\nmathutil 包实现了一些数学计算的函数.\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/mathutil/mathutil.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\n\n\n\n\n# documentation\n\n\n# average\n\n计算平均数. 可能需要对结果调用roundtofloat方法四舍五入\n\n函数签名:\n\nfunc average[t lancetconstraints.number](numbers ...t) t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.average(0, 0)) //0\n\tfmt.println(mathutil.average(1, 1)) //1\n\tavg := mathutil.average(1.2, 1.4) //1.2999999998\n\troundavg := mmathutil.roundtofloat(avg, 1) // 1.3\n}\n\n\n\n# exponent\n\n指数计算（x的n次方）\n\n函数签名:\n\nfunc exponent(x, n int64) int64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.exponent(10, 0)) //1\n\tfmt.println(mathutil.exponent(10, 1)) //10\n\tfmt.println(mathutil.exponent(10, 2)) //100\n}\n\n\n\n# fibonacci\n\n计算斐波那契数列的第n个数\n\n函数签名:\n\nfunc fibonacci(first, second, n int) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.fibonacci(1, 1, 1)) //1\n\tfmt.println(mathutil.fibonacci(1, 1, 2)) //1\n\tfmt.println(mathutil.fibonacci(1, 1, 3)) //2\n\tfmt.println(mathutil.fibonacci(1, 1, 4)) //3\n\tfmt.println(mathutil.fibonacci(1, 1, 5)) //5\n}\n\n\n\n# factorial\n\n计算阶乘\n\n函数签名:\n\nfunc factorial(x uint) uint\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.factorial(0)) //1\n\tfmt.println(mathutil.factorial(1)) //1\n\tfmt.println(mathutil.factorial(2)) //2\n\tfmt.println(mathutil.factorial(3)) //6\n}\n\n\n\n# max\n\n返回参数中的最大数\n\n函数签名:\n\nfunc max[t lancetconstraints.number](numbers ...t) t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.max(0, 0)) //0\n\tfmt.println(mathutil.max(1, 2, 3)) //3\n\tfmt.println(mathutil.max(1.2, 1.4, 1.1, 1.4)) //1.4\n}\n\n\n\n# maxby\n\n使用给定的比较器函数返回切片的最大值\n\n函数签名:\n\nfunc maxby[t any](slice []t, comparator func(t, t) bool) t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tres1 := mathutil.maxby([]string{"a", "ab", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.println(res1) //abc\n\n\tres2 := mathutil.maxby([]string{"abd", "abc", "ab"}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.println(res2) //abd\n\n\tres3 := mathutil.maxby([]string{}, func(v1, v2 string) bool {\n\t\treturn len(v1) > len(v2)\n\t})\n\tfmt.println(res3) //“”\n}\n\n\n\n# min\n\n返回参数中的最小数\n\n函数签名:\n\nfunc min[t lancetconstraints.number](numbers ...t) t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.min(0, 0)) //0\n\tfmt.println(mathutil.min(1, 2, 3)) //1\n\tfmt.println(mathutil.min(1.2, 1.4, 1.1, 1.4)) //1.1\n}\n\n\n\n# minby\n\n使用给定的比较器函数返回切片的最小值\n\n函数签名:\n\nfunc minby[t any](slice []t, comparator func(t, t) bool) t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tres1 := mathutil.minby([]string{"a", "ab", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.println(res1) //a\n\n\tres2 := mathutil.minby([]string{"ab", "ac", "abc"}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.println(res2) //ab\n\n\tres3 := mathutil.minby([]string{}, func(v1, v2 string) bool {\n\t\treturn len(v1) < len(v2)\n\t})\n\tfmt.println(res3) //“”\n}\n\n\n\n# percent\n\n计算百分比，保留n位小数\n\n函数签名:\n\nfunc percent(val, total float64, n int) float64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.percent(1, 2, 2)) //1\n\tfmt.println(mathutil.percent(0.1, 0.3, 2)) //33.33\n}\n\n\n\n# roundtofloat\n\n四舍五入，保留n位小数\n\n函数签名:\n\nfunc roundtofloat(x float64, n int) float64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.roundtofloat(0, 0)) //0\n\tfmt.println(mathutil.roundtofloat(0, 1)) //0\n\tfmt.println(mathutil.roundtofloat(0.124, 2)) //0.12\n\tfmt.println(mathutil.roundtofloat(0.125, 2)) //0.13\n\tfmt.println(mathutil.roundtofloat(0.125, 3)) //0.125\n}\n\n\n\n# roundtostring\n\n四舍五入，保留n位小数，返回字符串\n\n函数签名:\n\nfunc roundtostring(x float64, n int) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.roundtostring(0, 0)) //"0"\n\tfmt.println(mathutil.roundtostring(0, 1)) //"0.0:\n\tfmt.println(mathutil.roundtostring(0.124, 2)) //"0.12"\n\tfmt.println(mathutil.roundtostring(0.125, 2)) //"0.13"\n\tfmt.println(mathutil.roundtostring(0.125, 3)) //"0.125"\n}\n\n\n\n# truncround\n\n截短n位小数（不进行四舍五入）\n\n函数签名:\n\nfunc truncround(x float64, n int) float64\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/mathutil"\n)\n\nfunc main() {\n\tfmt.println(mathutil.truncround(0, 0)) //0\n\tfmt.println(mathutil.truncround(0, 1)) //0\n\tfmt.println(mathutil.truncround(0.124, 2)) //0.12\n\tfmt.println(mathutil.truncround(0.125, 2)) //0.12\n\tfmt.println(mathutil.truncround(0.125, 3)) //0.125\n}\n',charsets:{cjk:!0}},{title:"Formatter",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/formatter/",relativePath:"formatter/README.md",key:"v-66f145a5",path:"/formatter/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:48},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:130},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:199},{level:3,title:"Comma",slug:"comma",normalizedTitle:"comma",charIndex:206}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 Comma",content:'# Formatter\n\nformatter 格式化器包含一些数据格式化处理方法。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/formatter/formatter.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/formatter"\n)\n\n\n\n\n\n# 文档\n\n\n# Comma\n\n用逗号每隔3位分割数字/字符串，签名添加符号。参数必须是数字或者可以转为数字的字符串\n\n函数签名:\n\nfunc Comma(v any, symbol string) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/formatter"\n)\n\nfunc main() {\n    fmt.Println(formatter.Comma("12345", ""))   // "12,345"\n    fmt.Println(formatter.Comma(12345.67, "¥")) // "¥12,345.67"\n}\n',normalizedContent:'# formatter\n\nformatter 格式化器包含一些数据格式化处理方法。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/formatter/formatter.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/formatter"\n)\n\n\n\n\n\n# 文档\n\n\n# comma\n\n用逗号每隔3位分割数字/字符串，签名添加符号。参数必须是数字或者可以转为数字的字符串\n\n函数签名:\n\nfunc comma(v any, symbol string) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/formatter"\n)\n\nfunc main() {\n    fmt.println(formatter.comma("12345", ""))   // "12,345"\n    fmt.println(formatter.comma(12345.67, "¥")) // "¥12,345.67"\n}\n',charsets:{cjk:!0}},{title:"Retry",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/retry/",relativePath:"retry/README.md",key:"v-4e265ee9",path:"/retry/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:54},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:128},{level:2,title:"Document 文档",slug:"document-文档",normalizedTitle:"document 文档",charIndex:193},{level:3,title:"Context",slug:"context",normalizedTitle:"context",charIndex:209},{level:3,title:"RetryFunc",slug:"retryfunc",normalizedTitle:"retryfunc",charIndex:723},{level:3,title:"RetryTimes",slug:"retrytimes",normalizedTitle:"retrytimes",charIndex:1196},{level:3,title:"RetryDuration",slug:"retryduration",normalizedTitle:"retryduration",charIndex:594},{level:3,title:"Retry",slug:"retry-2",normalizedTitle:"retry",charIndex:2}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: Document 文档 Context RetryFunc RetryTimes RetryDuration Retry",content:'# Retry\n\nretry 重试执行函数直到函数运行成功或被 context cancel。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/retry/retry.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/retry"\n)\n\n\n\n\n\n# Document 文档\n\n\n# Context\n\n设置重试context参数\n\n函数签名:\n\nfunc Context(ctx context.Context)\n\n\n例子:\n\nimport (\n\t"context"\n\t"errors"\n\t"fmt"\n\t"lancet-demo/retry"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.TODO())\n\tvar number int\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number > 3 {\n\t\t\tcancel()\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber,\n\t\tretry.RetryDuration(time.Microsecond*50),\n\t\tretry.Context(ctx),\n\t)\n\n\tif err != nil {\n\t\tfmt.Println(err) //retry is cancelled\n\t}\n}\n\n\n\n# RetryFunc\n\n被重试执行的函数\n\n函数签名:\n\ntype RetryFunc func() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber, retry.RetryDuration(time.Microsecond*50))\n    if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n    fmt.Println(number) //3\n}\n\n\n\n# RetryTimes\n\n设置重试次数，默认5\n\n函数签名:\n\nfunc RetryTimes(n uint)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber, retry.RetryTimes(2))\n    if err != nil {\n\t\tlog.Fatal(err) //2022/02/01 18:42:25 function main.main.func1 run failed after 2 times retry exit status 1\n\t}\n}\n\n\n\n# RetryDuration\n\n设置重试间隔时间，默认3秒\n\n函数签名:\n\nfunc RetryDuration(d time.Duration)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber, retry.RetryDuration(time.Microsecond*50))\n    if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n    fmt.Println(number) //3\n}\n\n\n\n# Retry\n\n重试执行函数retryFunc，直到函数运行成功，或被context停止\n\n函数签名:\n\nfunc Retry(retryFunc RetryFunc, opts ...Option) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreaseNumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New("error occurs")\n\t}\n\n\terr := retry.Retry(increaseNumber, retry.RetryDuration(time.Microsecond*50))\n    if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n    fmt.Println(number) //3\n}\n',normalizedContent:'# retry\n\nretry 重试执行函数直到函数运行成功或被 context cancel。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/retry/retry.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/retry"\n)\n\n\n\n\n\n# document 文档\n\n\n# context\n\n设置重试context参数\n\n函数签名:\n\nfunc context(ctx context.context)\n\n\n例子:\n\nimport (\n\t"context"\n\t"errors"\n\t"fmt"\n\t"lancet-demo/retry"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.withcancel(context.todo())\n\tvar number int\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number > 3 {\n\t\t\tcancel()\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber,\n\t\tretry.retryduration(time.microsecond*50),\n\t\tretry.context(ctx),\n\t)\n\n\tif err != nil {\n\t\tfmt.println(err) //retry is cancelled\n\t}\n}\n\n\n\n# retryfunc\n\n被重试执行的函数\n\n函数签名:\n\ntype retryfunc func() error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber, retry.retryduration(time.microsecond*50))\n    if err != nil {\n\t\tlog.fatal(err)\n\t}\n\n    fmt.println(number) //3\n}\n\n\n\n# retrytimes\n\n设置重试次数，默认5\n\n函数签名:\n\nfunc retrytimes(n uint)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber, retry.retrytimes(2))\n    if err != nil {\n\t\tlog.fatal(err) //2022/02/01 18:42:25 function main.main.func1 run failed after 2 times retry exit status 1\n\t}\n}\n\n\n\n# retryduration\n\n设置重试间隔时间，默认3秒\n\n函数签名:\n\nfunc retryduration(d time.duration)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber, retry.retryduration(time.microsecond*50))\n    if err != nil {\n\t\tlog.fatal(err)\n\t}\n\n    fmt.println(number) //3\n}\n\n\n\n# retry\n\n重试执行函数retryfunc，直到函数运行成功，或被context停止\n\n函数签名:\n\nfunc retry(retryfunc retryfunc, opts ...option) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "errors"\n    "log"\n    "github.com/duke-git/lancet/v2/retry"\n)\n\nfunc main() {\n    var number int\n\tincreasenumber := func() error {\n\t\tnumber++\n\t\tif number == 3 {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.new("error occurs")\n\t}\n\n\terr := retry.retry(increasenumber, retry.retryduration(time.microsecond*50))\n    if err != nil {\n\t\tlog.fatal(err)\n\t}\n\n    fmt.println(number) //3\n}\n',charsets:{cjk:!0}},{title:"Slice",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/en/slice/",relativePath:"en/slice/README.md",key:"v-427e034b",path:"/en/slice/",headers:[{level:2,title:"Source:",slug:"source",normalizedTitle:"source:",charIndex:76},{level:2,title:"Usage:",slug:"usage",normalizedTitle:"usage:",charIndex:154},{level:2,title:"Documentation",slug:"documentation",normalizedTitle:"documentation",charIndex:222},{level:3,title:"AppendIfAbsent",slug:"appendifabsent",normalizedTitle:"appendifabsent",charIndex:240},{level:3,title:"Contain",slug:"contain",normalizedTitle:"contain",charIndex:654},{level:3,title:"ContainSubSlice",slug:"containsubslice",normalizedTitle:"containsubslice",charIndex:939},{level:3,title:"Chunk",slug:"chunk",normalizedTitle:"chunk",charIndex:1265},{level:3,title:"Compact",slug:"compact",normalizedTitle:"compact",charIndex:1633},{level:3,title:"Concat",slug:"concat",normalizedTitle:"concat",charIndex:1951},{level:3,title:"Count",slug:"count",normalizedTitle:"count",charIndex:2374},{level:3,title:"Difference",slug:"difference",normalizedTitle:"difference",charIndex:2791},{level:3,title:"DifferenceBy",slug:"differenceby",normalizedTitle:"differenceby",charIndex:3159},{level:3,title:"DifferenceWith",slug:"differencewith",normalizedTitle:"differencewith",charIndex:3701},{level:3,title:"DeleteAt",slug:"deleteat",normalizedTitle:"deleteat",charIndex:4289},{level:3,title:"Drop",slug:"drop",normalizedTitle:"drop",charIndex:4745},{level:3,title:"Equal",slug:"equal",normalizedTitle:"equal",charIndex:5251},{level:3,title:"EqualWith",slug:"equalwith",normalizedTitle:"equalwith",charIndex:5711},{level:3,title:"Every",slug:"every",normalizedTitle:"every",charIndex:6146},{level:3,title:"Filter",slug:"filter",normalizedTitle:"filter",charIndex:6552},{level:3,title:"Find",slug:"find",normalizedTitle:"find",charIndex:6937},{level:3,title:"FindLast",slug:"findlast",normalizedTitle:"findlast",charIndex:7388},{level:3,title:"Flatten",slug:"flatten",normalizedTitle:"flatten",charIndex:7868},{level:3,title:"FlattenDeep",slug:"flattendeep",normalizedTitle:"flattendeep",charIndex:8160},{level:3,title:"ForEach",slug:"foreach",normalizedTitle:"foreach",charIndex:8456},{level:3,title:"GroupBy",slug:"groupby",normalizedTitle:"groupby",charIndex:8920},{level:3,title:"GroupWith",slug:"groupwith",normalizedTitle:"groupwith",charIndex:9422},{level:3,title:"IntSlice",slug:"intslice",normalizedTitle:"intslice",charIndex:9925},{level:3,title:"InterfaceSlice",slug:"interfaceslice",normalizedTitle:"interfaceslice",charIndex:1545},{level:3,title:"Intersection",slug:"intersection",normalizedTitle:"intersection",charIndex:10489},{level:3,title:"InsertAt",slug:"insertat",normalizedTitle:"insertat",charIndex:10842},{level:3,title:"IndexOf",slug:"indexof",normalizedTitle:"indexof",charIndex:11292},{level:3,title:"LastIndexOf",slug:"lastindexof",normalizedTitle:"lastindexof",charIndex:11729},{level:3,title:"Map",slug:"map",normalizedTitle:"map",charIndex:12181},{level:3,title:"Reverse",slug:"reverse",normalizedTitle:"reverse",charIndex:12600},{level:3,title:"Reduce",slug:"reduce",normalizedTitle:"reduce",charIndex:12867},{level:3,title:"Shuffle",slug:"shuffle",normalizedTitle:"shuffle",charIndex:13233},{level:3,title:"SortByField",slug:"sortbyfield",normalizedTitle:"sortbyfield",charIndex:13506},{level:3,title:"Some",slug:"some",normalizedTitle:"some",charIndex:14205},{level:3,title:"StringSlice",slug:"stringslice",normalizedTitle:"stringslice",charIndex:14606},{level:3,title:"SymmetricDifference",slug:"symmetricdifference",normalizedTitle:"symmetricdifference",charIndex:14904},{level:3,title:"ToSlice",slug:"toslice",normalizedTitle:"toslice",charIndex:15422},{level:3,title:"ToSlicePointer",slug:"toslicepointer",normalizedTitle:"toslicepointer",charIndex:15690},{level:3,title:"Unique",slug:"unique",normalizedTitle:"unique",charIndex:16044},{level:3,title:"UniqueBy",slug:"uniqueby",normalizedTitle:"uniqueby",charIndex:16308},{level:3,title:"Union",slug:"union",normalizedTitle:"union",charIndex:16683},{level:3,title:"UpdateAt",slug:"updateat",normalizedTitle:"updateat",charIndex:17063},{level:3,title:"Without",slug:"without",normalizedTitle:"without",charIndex:17444}],lastUpdated:"9/29/2022, 1:53:14 PM",lastUpdatedTimestamp:1664430794e3,headersStr:"Source: Usage: Documentation AppendIfAbsent Contain ContainSubSlice Chunk Compact Concat Count Difference DifferenceBy DifferenceWith DeleteAt Drop Equal EqualWith Every Filter Find FindLast Flatten FlattenDeep ForEach GroupBy GroupWith IntSlice InterfaceSlice Intersection InsertAt IndexOf LastIndexOf Map Reverse Reduce Shuffle SortByField Some StringSlice SymmetricDifference ToSlice ToSlicePointer Unique UniqueBy Union UpdateAt Without",content:'# Slice\n\nPackage slice implements some functions to manipulate slice.\n\n\n\n\n# Source:\n\n * https://github.com/duke-git/lancet/blob/main/slice/slice.go\n\n\n\n\n# Usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/slice"\n)\n\n\n\n\n\n# Documentation\n\n\n# AppendIfAbsent\n\nIf slice doesn\'t contain the value, append it to the slice.\n\nSignature:\n\nfunc AppendIfAbsent[T comparable](slice []T, value T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tstrs := []string{"a", "b"}\n\tres1 := slice.AppendIfAbsent(strs, "a")\n\tfmt.Println(res1) //[]string{"a", "b"}\n\n\tres2 := slice.AppendIfAbsent(strs, "cannot")\n\tfmt.Println(res2"}\n}\n\n\n\n# Contain\n\nCheck if the value is in the slice or not.\n\nSignature:\n\nfunc Contain[T comparable](slice []T, value T) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.Contain([]string{"a", "b", "c"}, "a")\n\tfmt.Println(res) //true\n}\n\n\n\n# ContainSubSlice\n\nCheck if the slice contain subslice or not.\n\nSignature:\n\nfunc ContainSubSlice[T comparable](slice, subslice []T) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.ContainSubSlice([]string{"a", "b", "c"}, []string{"a", "b"})\n\tfmt.Println(res) //true\n}\n\n\n\n# Chunk\n\nCreates an slice of elements split into groups the length of `size`.\n\nSignature:\n\nfunc Chunk[T any](slice []T, size int) [][]T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "b", "c", "d", "e"}\n\tres := slice.Chunk(InterfaceSlice(arr), 3)\n\tfmt.Println(res) //[][]any{{"a", "b", "c"}, {"d", "e"}}\n}\n\n\n\n# Compact\n\nCreates an slice with all falsey values removed. The values false, nil, 0, and "" are falsey.\n\nSignature:\n\nfunc Compact[T any](slice []T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.Compact([]int{0, 1, 2, 3})\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# Concat\n\nCreates a new slice concatenating slice with any additional slices and/or values.\n\nSignature:\n\nfunc Concat[T any](slice []T, values ...[]T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.Concat([]int{1, 2, 3}, 4, 5)\n\tfmt.Println(res1) //[]int{1, 2, 3, 4, 5}\n\n\tres2 := slice.Concat([]int{1, 2, 3}, []int{4, 5})\n\tfmt.Println(res2) //[]int{1, 2, 3, 4, 5}\n}\n\n\n\n# Count\n\nCount iterates over elements of slice, returns a count of all matched elements.\n\nSignature:\n\nfunc Count[T any](slice []T, predicate func(index int, t T) bool) int\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tevenFunc := func(i, num int) bool {\n\t\treturn (num % 2) == 0\n\t}\n\n\tres := slice.Count(nums, evenFunc)\n\tfmt.Println(res) //3\n}\n\n\n\n# Difference\n\nCreates an slice of whose element not included in the other given slice.\n\nSignature:\n\nfunc Difference[T comparable](slice, comparedSlice []T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6}\n\n\tres := slice.Difference(s1, s2)\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# DifferenceBy\n\nDifferenceBy accepts iteratee func which is invoked for each element of slice and values to generate the criterion by which they\'re compared.\n\nSignature:\n\nfunc DifferenceBy[T comparable](slice []T, comparedSlice []T, iteratee func(index int, item T) T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6}\n\taddOne := func(i int, v int) int {\n\t\treturn v + 1\n\t}\n\n\tres := slice.DifferenceBy(s1, s2, addOne)\n\tfmt.Println(res) //[]int{1, 2}\n}\n\n\n\n# DifferenceWith\n\nDifferenceWith accepts comparator which is invoked to compare elements of slice to values. The order and references of result values are determined by the first slice.\n\nSignature:\n\nfunc DifferenceWith[T any](slice []T, comparedSlice []T, comparator func(value, otherValue T) bool) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6, 7, 8}\n\tisDouble := func(v1, v2 int) bool {\n\t\treturn v2 == 2*v1\n\t}\n\n\tres := slice.DifferenceWith(s1, s2, isDouble)\n\tfmt.Println(res) //[]int{1, 5}\n}\n\n\n\n# DeleteAt\n\nDelete the element of slice from start index to end index - 1.\n\nSignature:\n\nfunc DeleteAt[T any](slice []T, start int, end ...int)\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.DeleteAt([]string{"a", "b", "c", "d", "e"}, 3)\n\tfmt.Println(res1) //[]string{"a", "b", "c", "e"}\n\n\tres2 := slice.DeleteAt([]string{"a", "b", "c", "d", "e"}, 0, 2)\n\tfmt.Println(res2) //[]string{"c", "d", "e"}\n\n}\n\n\n\n# Drop\n\nCreates a slice with `n` elements dropped from the beginning when n > 0, or `n` elements dropped from the ending when n < 0.\n\nSignature:\n\nfunc Drop[T any](slice []T, n int) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.Drop([]int{}, 0)\n\tfmt.Println(res1) //[]int{}\n\n\tres2 := slice.Drop([]int{1, 2, 3, 4, 5}, 1)\n\tfmt.Println(res2) //[]int{2, 3, 4, 5}\n\n\tres3 := slice.Drop([]int{1, 2, 3, 4, 5}, -1)\n\tfmt.Println(res3) //[]int{1, 2, 3, 4}\n}\n\n\n\n# Equal\n\nCheck if two slices are equal: the same length and all elements\' order and value are equal.\n\nSignature:\n\nfunc Equal[T comparable](slice1, slice2 []T) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tslice1 := []int{1, 2, 3}\n\tslice2 := []int{1, 2, 3}\n\tslice3 := []int{3, 2, 1}\n\n\tres1 := slice.Equal(slice1, slice2)\n\tres2 := slice.Equal(slice1, slice3)\n\n\tfmt.Println(res1) //true\n\tfmt.Println(res2) //false\n}\n\n\n\n# EqualWith\n\nCheck if two slices are equal with comparator func.\n\nSignature:\n\nfunc EqualWith[T, U any](slice1 []T, slice2 []U, comparator func(T, U) bool) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tslice1 := []int{1, 2, 3}\n\tslice2 := []int{2, 4, 6}\n\n\tisDouble := func(a, b int) bool {\n\t\treturn b == a*2\n\t}\n\n\tres := slice.EqualWith(slice1, slice2, isDouble)\n\n\tfmt.Println(res) //true\n}\n\n\n\n# Every\n\nReturn true if all of the values in the slice pass the predicate function.\n\nSignature:\n\nfunc Every[T any](slice []T, predicate func(index int, item T) bool) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.Every(nums, isEven)\n\tfmt.Println(res) //false\n}\n\n\n\n# Filter\n\nReturn all elements which match the function.\n\nSignature:\n\nfunc Filter[T any](slice []T, predicate func(index int, item T) bool) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.Filter(nums, isEven)\n\tfmt.Println(res) //[]int{2, 4}\n}\n\n\n\n# Find\n\nIterates over elements of slice, returning the first one that passes a truth test on function.\n\nSignature:\n\nfunc Find[T any](slice []T, predicate func(index int, item T) bool) (*T, bool)\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres, ok := slice.Find(nums, even)\n\tfmt.Println(res) //2\n\tfmt.Println(ok) //true\n}\n\n\n\n# FindLast\n\niterates over elements of slice from end to begin, returning the last one that passes a truth test on function.\n\nSignature:\n\nfunc FindLast[T any](slice []T, predicate func(index int, item T) bool) (*T, bool)\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres, ok := slice.FindLast(nums, even)\n\tfmt.Println(res) //4\n\tfmt.Println(ok) //true\n}\n\n\n\n# Flatten\n\nFlatten slice with one level.\n\nSignature:\n\nfunc Flatten(slice any) any\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := [][][]string{{{"a", "b"}}, {{"c", "d"}}}\n\tres := slice.Flatten(arr)\n\tfmt.Println(res) //{{"a", "b"}, {"c", "d"}}\n}\n\n\n\n# FlattenDeep\n\nflattens slice recursive.\n\nSignature:\n\nfunc FlattenDeep(slice any) any\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := [][][]string{{{"a", "b"}}, {{"c", "d"}}}\n\tres := slice.FlattenDeep(arr)\n\tfmt.Println(res) //{"a", "b", "c", "d"}\n}\n\n\n\n# ForEach\n\nIterates over elements of slice and invokes function for each element.\n\nSignature:\n\nfunc ForEach[T any](slice []T, iteratee func(index int, item T))\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tvar numbersAddTwo []int\n\tslice.ForEach(numbers, func(index int, value int) {\n\t\tnumbersAddTwo = append(numbersAddTwo, value+2)\n\t})\n\tfmt.Println(numbersAddTwo) //[]int{3, 4, 5, 6, 7}\n}\n\n\n\n# GroupBy\n\nIterates over elements of the slice, each element will be group by criteria, returns two slices.\n\nSignature:\n\nfunc GroupBy[T any](slice []T, groupFn func(index int, item T) bool) ([]T, []T)\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tevenFunc := func(i, num int) bool {\n\t\treturn (num % 2) == 0\n\t}\n\teven, odd := slice.GroupBy(nums, evenFunc)\n\n\tfmt.Println(even) //[]int{2, 4, 6}\n\tfmt.Println(odd) //]int{1, 3, 5}\n}\n\n\n\n# GroupWith\n\nReturn a map composed of keys generated from the results of running each element of slice thru iteratee.\n\nSignature:\n\nfunc GroupWith[T any, U comparable](slice []T, iteratee func(T) U) map[U][]T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []float64{6.1, 4.2, 6.3}\n\tfloor := func(num float64) float64 {\n\t\treturn math.Floor(num)\n\t}\n\tres := slice.GroupWith(nums, floor)\n\tfmt.Println(res) //map[float64][]float64{ 4: {4.2}, 6: {6.1, 6.3},}\n}\n\n\n\n# IntSlice\n\nConvert interface slice to int slice.\n\nSignature:\n\nfunc IntSlice(slice any) []int\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar nums = []any{1, 2, 3}\n\tres := slice.IntSlice(nums)\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# InterfaceSlice\n\nConvert value to interface slice.\n\nSignature:\n\nfunc InterfaceSlice(slice any) []any\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar nums = []int{}{1, 2, 3}\n\tres := slice.InterfaceSlice(nums)\n\tfmt.Println(res) //[]any{1, 2, 3}\n}\n\n\n\n# Intersection\n\nCreates a slice of unique values that included by all slices.\n\nSignature:\n\nfunc Intersection[T comparable](slices ...[]T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 2, 3}\n\ts2 := []int{1, 2, 3, 4}\n\tres := slice.Intersection(s1, s2),\n\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# InsertAt\n\ninsert the element into slice at index.\n\nSignature:\n\nfunc InsertAt[T any](slice []T, index int, value any) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts := []string{"a", "b", "c"}\n\n\tres1, _ := slice.InsertAt(s, 0, "1")\n\tfmt.Println(res1) //[]string{"1", "a", "b", "c"}\n\n\tres2, _ := slice.InsertAt(s, 3, []string{"1", "2", "3"})\n\tfmt.Println(res2) //[]string{"a", "b", "c", "1", "2", "3"}\n}\n\n\n\n# IndexOf\n\nReturns the index at which the first occurrence of a value is found in a slice or return -1 if the value cannot be found.\n\nSignature:\n\nfunc IndexOf[T comparable](slice []T, value T) int\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "a", "b", "c"}\n\tres1 := slice.IndexOf(arr, "a")\n\tfmt.Println(res1) //0\n\n\tres2 := slice.IndexOf(arr, "d")\n\tfmt.Println(res2) //-1\n}\n\n\n\n# LastIndexOf\n\nReturns the index at which the last occurrence of a value is found in a slice or return -1 if the value cannot be found.\n\nSignature:\n\nfunc LastIndexOf[T comparable](slice []T, value T) int\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "a", "b", "c"}\n\tres1 := slice.LastIndexOf(arr, "a")\n\tfmt.Println(res1) //1\n\n\tres2 := slice.LastIndexOf(arr, "d")\n\tfmt.Println(res2) //-1\n}\n\n\n\n# Map\n\nCreates an slice of values by running each element in slice thru function.\n\nSignature:\n\nfunc Map[T any, U any](slice []T, iteratee func(index int, item T) U) []U\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tmultiplyTwo := func(i, num int) int {\n\t\treturn num * 2\n\t}\n\tres := slice.Map(nums, multiplyTwo)\n\tfmt.Println(res) //[]int{2, 4, 6, 8}\n}\n\n\n\n# Reverse\n\nReverse the elements order in slice.\n\nSignature:\n\nfunc Reverse[T any](slice []T)\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tslice.Reverse(nums)\n\tfmt.Println(res) //[]int{4, 3, 2, 1}\n}\n\n\n\n# Reduce\n\nReduce slice.\n\nSignature:\n\nfunc Reduce[T any](slice []T, iteratee func(index int, item1, item2 T) T, initial T) T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\treduceFunc := func(i, v1, v2 int) int {\n\t\treturn v1 + v2\n\t}\n\tres := slice.Reduce(nums, reduceFunc, 0)\n\tfmt.Println(res) //10\n}\n\n\n\n# Shuffle\n\nCreates an slice of shuffled values.\n\nSignature:\n\nfunc Shuffle[T any](slice []T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5}\n\tres := slice.Shuffle(nums)\n\tfmt.Println(res) //3,1,5,4,2\n}\n\n\n\n# SortByField\n\nSort struct slice by field. Slice element should be struct, field type should be int, uint, string, or bool. Default sort type is ascending (asc), if descending order, set sortType to desc\n\nSignature:\n\nfunc SortByField(slice any, field string, sortType ...string) error\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ttype student struct {\n\t\tname string\n\t\tage  int\n\t}\n\tstudents := []student{\n\t\t{"a", 10},\n\t\t{"b", 15},\n\t\t{"c", 5},\n\t\t{"d", 6},\n\t}\n\terr := slice.SortByField(students, "age", "desc")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(students)\n\t// []students{\n\t// \t{"b", 15},\n\t// \t{"a", 10},\n\t// \t{"d", 6},\n\t// \t{"c", 5},\n\t// }\n}\n\n\n\n# Some\n\nReturn true if any of the values in the list pass the predicate function.\n\nSignature:\n\nfunc Some[T any](slice []T, predicate func(index int, item T) bool) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.Some(nums, isEven)\n\tfmt.Println(res) //true\n}\n\n\n\n# StringSlice\n\nConvert interface slice to string slice.\n\nSignature:\n\nfunc StringSlice(slice any) []string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar s = []any{"a", "b", "c"}\n\tres := slice.StringSlice(s)\n\tfmt.Println(res) //[]string{"a", "b", "c"}\n}\n\n\n\n# SymmetricDifference\n\nCreate a slice whose element is in given slices, but not in both slices.\n\nSignature:\n\nfunc SymmetricDifference[T comparable](slices ...[]T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3}\n\ts2 := []int{1, 2, 4}\n\ts3 := []int{1, 2, 3, 5}\n\n\tfmt.Println(slice.SymmetricDifference(s1)) //[]int{1, 2, 3}\n\tfmt.Println(slice.SymmetricDifference(s1, s2)) //[]int{3, 4}\n\tfmt.Println(slice.SymmetricDifference(s1, s2, s3)) //[]int{3, 4, 5}\n}\n\n\n\n# ToSlice\n\nReturns a slices of a variable parameter transformation\n\nSignature:\n\nfunc ToSlice[T any](value ...T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.ToSlice("a", "b")\n\tfmt.Println(res) //{"a", "b"}\n}\n\n\n\n# ToSlicePointer\n\nReturns a pointer to the slices of a variable parameter transformation\n\nSignature:\n\nfunc ToSlicePointer[T any](value ...T) []*T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tstr1 := "a"\n\tstr2 := "b"\n\tres := slice.ToSlicePointer(str1, str2)\n\tfmt.Println(res) // res -> []*string{&str1, &str2}\n}\n\n\n\n# Unique\n\nRemove duplicate elements in slice.\n\nSignature:\n\nfunc Unique[T comparable](slice []T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.Unique([]int{1, 2, 2, 3})\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# UniqueBy\n\nCall iteratee func with every item of slice, then remove duplicated.\n\nSignature:\n\nfunc UniqueBy[T comparable](slice []T, iteratee func(item T) T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/slice"\n)\n\nfunc main() {\n\tres := slice.UniqueBy([]int{1, 2, 3, 4, 5, 6}, func(val int) int {\n\t\treturn val % 4\n\t})\n\tfmt.Println(res) //[]int{1, 2, 3, 0}\n}\n\n\n\n# Union\n\nCreates a slice of unique values, in order, from all given slices. using == for equality comparisons.\n\nSignature:\n\nfunc Union[T comparable](slices ...[]T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 3, 4, 6}\n\ts2 := []int{1, 2, 5, 6}\n\tres := slice.Union(s1, s2)\n\n\tfmt.Println(res) //[]int{1, 3, 4, 6, 2, 5}\n}\n\n\n\n# UpdateAt\n\nUpdate the slice element at index. if param index < 0 or index >= len(slice), will return error.\n\nSignature:\n\nfunc UpdateAt[T any](slice []T, index int, value T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts := []string{"a", "b", "c"}\n\n\tres1, _ := slice.UpdateAt(s, 0, "1")\n\tfmt.Println(res1) //[]string{"1", "b", "c"}\n}\n\n\n\n# Without\n\nCreates a slice excluding all given values.\n\nSignature:\n\nfunc Without[T comparable](slice []T, values ...T) []T\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.Without([]int{1, 2, 3, 4, 5}, 1, 2)\n\tfmt.Println(res) //[]int{3, 4, 5}\n}\n',normalizedContent:'# slice\n\npackage slice implements some functions to manipulate slice.\n\n\n\n\n# source:\n\n * https://github.com/duke-git/lancet/blob/main/slice/slice.go\n\n\n\n\n# usage:\n\nimport (\n    "github.com/duke-git/lancet/v2/slice"\n)\n\n\n\n\n\n# documentation\n\n\n# appendifabsent\n\nif slice doesn\'t contain the value, append it to the slice.\n\nsignature:\n\nfunc appendifabsent[t comparable](slice []t, value t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tstrs := []string{"a", "b"}\n\tres1 := slice.appendifabsent(strs, "a")\n\tfmt.println(res1) //[]string{"a", "b"}\n\n\tres2 := slice.appendifabsent(strs, "cannot")\n\tfmt.println(res2"}\n}\n\n\n\n# contain\n\ncheck if the value is in the slice or not.\n\nsignature:\n\nfunc contain[t comparable](slice []t, value t) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.contain([]string{"a", "b", "c"}, "a")\n\tfmt.println(res) //true\n}\n\n\n\n# containsubslice\n\ncheck if the slice contain subslice or not.\n\nsignature:\n\nfunc containsubslice[t comparable](slice, subslice []t) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.containsubslice([]string{"a", "b", "c"}, []string{"a", "b"})\n\tfmt.println(res) //true\n}\n\n\n\n# chunk\n\ncreates an slice of elements split into groups the length of `size`.\n\nsignature:\n\nfunc chunk[t any](slice []t, size int) [][]t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "b", "c", "d", "e"}\n\tres := slice.chunk(interfaceslice(arr), 3)\n\tfmt.println(res) //[][]any{{"a", "b", "c"}, {"d", "e"}}\n}\n\n\n\n# compact\n\ncreates an slice with all falsey values removed. the values false, nil, 0, and "" are falsey.\n\nsignature:\n\nfunc compact[t any](slice []t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.compact([]int{0, 1, 2, 3})\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# concat\n\ncreates a new slice concatenating slice with any additional slices and/or values.\n\nsignature:\n\nfunc concat[t any](slice []t, values ...[]t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.concat([]int{1, 2, 3}, 4, 5)\n\tfmt.println(res1) //[]int{1, 2, 3, 4, 5}\n\n\tres2 := slice.concat([]int{1, 2, 3}, []int{4, 5})\n\tfmt.println(res2) //[]int{1, 2, 3, 4, 5}\n}\n\n\n\n# count\n\ncount iterates over elements of slice, returns a count of all matched elements.\n\nsignature:\n\nfunc count[t any](slice []t, predicate func(index int, t t) bool) int\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tevenfunc := func(i, num int) bool {\n\t\treturn (num % 2) == 0\n\t}\n\n\tres := slice.count(nums, evenfunc)\n\tfmt.println(res) //3\n}\n\n\n\n# difference\n\ncreates an slice of whose element not included in the other given slice.\n\nsignature:\n\nfunc difference[t comparable](slice, comparedslice []t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6}\n\n\tres := slice.difference(s1, s2)\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# differenceby\n\ndifferenceby accepts iteratee func which is invoked for each element of slice and values to generate the criterion by which they\'re compared.\n\nsignature:\n\nfunc differenceby[t comparable](slice []t, comparedslice []t, iteratee func(index int, item t) t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6}\n\taddone := func(i int, v int) int {\n\t\treturn v + 1\n\t}\n\n\tres := slice.differenceby(s1, s2, addone)\n\tfmt.println(res) //[]int{1, 2}\n}\n\n\n\n# differencewith\n\ndifferencewith accepts comparator which is invoked to compare elements of slice to values. the order and references of result values are determined by the first slice.\n\nsignature:\n\nfunc differencewith[t any](slice []t, comparedslice []t, comparator func(value, othervalue t) bool) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6, 7, 8}\n\tisdouble := func(v1, v2 int) bool {\n\t\treturn v2 == 2*v1\n\t}\n\n\tres := slice.differencewith(s1, s2, isdouble)\n\tfmt.println(res) //[]int{1, 5}\n}\n\n\n\n# deleteat\n\ndelete the element of slice from start index to end index - 1.\n\nsignature:\n\nfunc deleteat[t any](slice []t, start int, end ...int)\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.deleteat([]string{"a", "b", "c", "d", "e"}, 3)\n\tfmt.println(res1) //[]string{"a", "b", "c", "e"}\n\n\tres2 := slice.deleteat([]string{"a", "b", "c", "d", "e"}, 0, 2)\n\tfmt.println(res2) //[]string{"c", "d", "e"}\n\n}\n\n\n\n# drop\n\ncreates a slice with `n` elements dropped from the beginning when n > 0, or `n` elements dropped from the ending when n < 0.\n\nsignature:\n\nfunc drop[t any](slice []t, n int) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.drop([]int{}, 0)\n\tfmt.println(res1) //[]int{}\n\n\tres2 := slice.drop([]int{1, 2, 3, 4, 5}, 1)\n\tfmt.println(res2) //[]int{2, 3, 4, 5}\n\n\tres3 := slice.drop([]int{1, 2, 3, 4, 5}, -1)\n\tfmt.println(res3) //[]int{1, 2, 3, 4}\n}\n\n\n\n# equal\n\ncheck if two slices are equal: the same length and all elements\' order and value are equal.\n\nsignature:\n\nfunc equal[t comparable](slice1, slice2 []t) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tslice1 := []int{1, 2, 3}\n\tslice2 := []int{1, 2, 3}\n\tslice3 := []int{3, 2, 1}\n\n\tres1 := slice.equal(slice1, slice2)\n\tres2 := slice.equal(slice1, slice3)\n\n\tfmt.println(res1) //true\n\tfmt.println(res2) //false\n}\n\n\n\n# equalwith\n\ncheck if two slices are equal with comparator func.\n\nsignature:\n\nfunc equalwith[t, u any](slice1 []t, slice2 []u, comparator func(t, u) bool) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tslice1 := []int{1, 2, 3}\n\tslice2 := []int{2, 4, 6}\n\n\tisdouble := func(a, b int) bool {\n\t\treturn b == a*2\n\t}\n\n\tres := slice.equalwith(slice1, slice2, isdouble)\n\n\tfmt.println(res) //true\n}\n\n\n\n# every\n\nreturn true if all of the values in the slice pass the predicate function.\n\nsignature:\n\nfunc every[t any](slice []t, predicate func(index int, item t) bool) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.every(nums, iseven)\n\tfmt.println(res) //false\n}\n\n\n\n# filter\n\nreturn all elements which match the function.\n\nsignature:\n\nfunc filter[t any](slice []t, predicate func(index int, item t) bool) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.filter(nums, iseven)\n\tfmt.println(res) //[]int{2, 4}\n}\n\n\n\n# find\n\niterates over elements of slice, returning the first one that passes a truth test on function.\n\nsignature:\n\nfunc find[t any](slice []t, predicate func(index int, item t) bool) (*t, bool)\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres, ok := slice.find(nums, even)\n\tfmt.println(res) //2\n\tfmt.println(ok) //true\n}\n\n\n\n# findlast\n\niterates over elements of slice from end to begin, returning the last one that passes a truth test on function.\n\nsignature:\n\nfunc findlast[t any](slice []t, predicate func(index int, item t) bool) (*t, bool)\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres, ok := slice.findlast(nums, even)\n\tfmt.println(res) //4\n\tfmt.println(ok) //true\n}\n\n\n\n# flatten\n\nflatten slice with one level.\n\nsignature:\n\nfunc flatten(slice any) any\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := [][][]string{{{"a", "b"}}, {{"c", "d"}}}\n\tres := slice.flatten(arr)\n\tfmt.println(res) //{{"a", "b"}, {"c", "d"}}\n}\n\n\n\n# flattendeep\n\nflattens slice recursive.\n\nsignature:\n\nfunc flattendeep(slice any) any\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := [][][]string{{{"a", "b"}}, {{"c", "d"}}}\n\tres := slice.flattendeep(arr)\n\tfmt.println(res) //{"a", "b", "c", "d"}\n}\n\n\n\n# foreach\n\niterates over elements of slice and invokes function for each element.\n\nsignature:\n\nfunc foreach[t any](slice []t, iteratee func(index int, item t))\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tvar numbersaddtwo []int\n\tslice.foreach(numbers, func(index int, value int) {\n\t\tnumbersaddtwo = append(numbersaddtwo, value+2)\n\t})\n\tfmt.println(numbersaddtwo) //[]int{3, 4, 5, 6, 7}\n}\n\n\n\n# groupby\n\niterates over elements of the slice, each element will be group by criteria, returns two slices.\n\nsignature:\n\nfunc groupby[t any](slice []t, groupfn func(index int, item t) bool) ([]t, []t)\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tevenfunc := func(i, num int) bool {\n\t\treturn (num % 2) == 0\n\t}\n\teven, odd := slice.groupby(nums, evenfunc)\n\n\tfmt.println(even) //[]int{2, 4, 6}\n\tfmt.println(odd) //]int{1, 3, 5}\n}\n\n\n\n# groupwith\n\nreturn a map composed of keys generated from the results of running each element of slice thru iteratee.\n\nsignature:\n\nfunc groupwith[t any, u comparable](slice []t, iteratee func(t) u) map[u][]t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []float64{6.1, 4.2, 6.3}\n\tfloor := func(num float64) float64 {\n\t\treturn math.floor(num)\n\t}\n\tres := slice.groupwith(nums, floor)\n\tfmt.println(res) //map[float64][]float64{ 4: {4.2}, 6: {6.1, 6.3},}\n}\n\n\n\n# intslice\n\nconvert interface slice to int slice.\n\nsignature:\n\nfunc intslice(slice any) []int\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar nums = []any{1, 2, 3}\n\tres := slice.intslice(nums)\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# interfaceslice\n\nconvert value to interface slice.\n\nsignature:\n\nfunc interfaceslice(slice any) []any\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar nums = []int{}{1, 2, 3}\n\tres := slice.interfaceslice(nums)\n\tfmt.println(res) //[]any{1, 2, 3}\n}\n\n\n\n# intersection\n\ncreates a slice of unique values that included by all slices.\n\nsignature:\n\nfunc intersection[t comparable](slices ...[]t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 2, 3}\n\ts2 := []int{1, 2, 3, 4}\n\tres := slice.intersection(s1, s2),\n\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# insertat\n\ninsert the element into slice at index.\n\nsignature:\n\nfunc insertat[t any](slice []t, index int, value any) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts := []string{"a", "b", "c"}\n\n\tres1, _ := slice.insertat(s, 0, "1")\n\tfmt.println(res1) //[]string{"1", "a", "b", "c"}\n\n\tres2, _ := slice.insertat(s, 3, []string{"1", "2", "3"})\n\tfmt.println(res2) //[]string{"a", "b", "c", "1", "2", "3"}\n}\n\n\n\n# indexof\n\nreturns the index at which the first occurrence of a value is found in a slice or return -1 if the value cannot be found.\n\nsignature:\n\nfunc indexof[t comparable](slice []t, value t) int\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "a", "b", "c"}\n\tres1 := slice.indexof(arr, "a")\n\tfmt.println(res1) //0\n\n\tres2 := slice.indexof(arr, "d")\n\tfmt.println(res2) //-1\n}\n\n\n\n# lastindexof\n\nreturns the index at which the last occurrence of a value is found in a slice or return -1 if the value cannot be found.\n\nsignature:\n\nfunc lastindexof[t comparable](slice []t, value t) int\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "a", "b", "c"}\n\tres1 := slice.lastindexof(arr, "a")\n\tfmt.println(res1) //1\n\n\tres2 := slice.lastindexof(arr, "d")\n\tfmt.println(res2) //-1\n}\n\n\n\n# map\n\ncreates an slice of values by running each element in slice thru function.\n\nsignature:\n\nfunc map[t any, u any](slice []t, iteratee func(index int, item t) u) []u\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tmultiplytwo := func(i, num int) int {\n\t\treturn num * 2\n\t}\n\tres := slice.map(nums, multiplytwo)\n\tfmt.println(res) //[]int{2, 4, 6, 8}\n}\n\n\n\n# reverse\n\nreverse the elements order in slice.\n\nsignature:\n\nfunc reverse[t any](slice []t)\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tslice.reverse(nums)\n\tfmt.println(res) //[]int{4, 3, 2, 1}\n}\n\n\n\n# reduce\n\nreduce slice.\n\nsignature:\n\nfunc reduce[t any](slice []t, iteratee func(index int, item1, item2 t) t, initial t) t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\treducefunc := func(i, v1, v2 int) int {\n\t\treturn v1 + v2\n\t}\n\tres := slice.reduce(nums, reducefunc, 0)\n\tfmt.println(res) //10\n}\n\n\n\n# shuffle\n\ncreates an slice of shuffled values.\n\nsignature:\n\nfunc shuffle[t any](slice []t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5}\n\tres := slice.shuffle(nums)\n\tfmt.println(res) //3,1,5,4,2\n}\n\n\n\n# sortbyfield\n\nsort struct slice by field. slice element should be struct, field type should be int, uint, string, or bool. default sort type is ascending (asc), if descending order, set sorttype to desc\n\nsignature:\n\nfunc sortbyfield(slice any, field string, sorttype ...string) error\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ttype student struct {\n\t\tname string\n\t\tage  int\n\t}\n\tstudents := []student{\n\t\t{"a", 10},\n\t\t{"b", 15},\n\t\t{"c", 5},\n\t\t{"d", 6},\n\t}\n\terr := slice.sortbyfield(students, "age", "desc")\n\tif err != nil {\n\t\tfmt.println(err)\n\t}\n\tfmt.println(students)\n\t// []students{\n\t// \t{"b", 15},\n\t// \t{"a", 10},\n\t// \t{"d", 6},\n\t// \t{"c", 5},\n\t// }\n}\n\n\n\n# some\n\nreturn true if any of the values in the list pass the predicate function.\n\nsignature:\n\nfunc some[t any](slice []t, predicate func(index int, item t) bool) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.some(nums, iseven)\n\tfmt.println(res) //true\n}\n\n\n\n# stringslice\n\nconvert interface slice to string slice.\n\nsignature:\n\nfunc stringslice(slice any) []string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar s = []any{"a", "b", "c"}\n\tres := slice.stringslice(s)\n\tfmt.println(res) //[]string{"a", "b", "c"}\n}\n\n\n\n# symmetricdifference\n\ncreate a slice whose element is in given slices, but not in both slices.\n\nsignature:\n\nfunc symmetricdifference[t comparable](slices ...[]t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3}\n\ts2 := []int{1, 2, 4}\n\ts3 := []int{1, 2, 3, 5}\n\n\tfmt.println(slice.symmetricdifference(s1)) //[]int{1, 2, 3}\n\tfmt.println(slice.symmetricdifference(s1, s2)) //[]int{3, 4}\n\tfmt.println(slice.symmetricdifference(s1, s2, s3)) //[]int{3, 4, 5}\n}\n\n\n\n# toslice\n\nreturns a slices of a variable parameter transformation\n\nsignature:\n\nfunc toslice[t any](value ...t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.toslice("a", "b")\n\tfmt.println(res) //{"a", "b"}\n}\n\n\n\n# toslicepointer\n\nreturns a pointer to the slices of a variable parameter transformation\n\nsignature:\n\nfunc toslicepointer[t any](value ...t) []*t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tstr1 := "a"\n\tstr2 := "b"\n\tres := slice.toslicepointer(str1, str2)\n\tfmt.println(res) // res -> []*string{&str1, &str2}\n}\n\n\n\n# unique\n\nremove duplicate elements in slice.\n\nsignature:\n\nfunc unique[t comparable](slice []t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.unique([]int{1, 2, 2, 3})\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# uniqueby\n\ncall iteratee func with every item of slice, then remove duplicated.\n\nsignature:\n\nfunc uniqueby[t comparable](slice []t, iteratee func(item t) t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/slice"\n)\n\nfunc main() {\n\tres := slice.uniqueby([]int{1, 2, 3, 4, 5, 6}, func(val int) int {\n\t\treturn val % 4\n\t})\n\tfmt.println(res) //[]int{1, 2, 3, 0}\n}\n\n\n\n# union\n\ncreates a slice of unique values, in order, from all given slices. using == for equality comparisons.\n\nsignature:\n\nfunc union[t comparable](slices ...[]t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 3, 4, 6}\n\ts2 := []int{1, 2, 5, 6}\n\tres := slice.union(s1, s2)\n\n\tfmt.println(res) //[]int{1, 3, 4, 6, 2, 5}\n}\n\n\n\n# updateat\n\nupdate the slice element at index. if param index < 0 or index >= len(slice), will return error.\n\nsignature:\n\nfunc updateat[t any](slice []t, index int, value t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts := []string{"a", "b", "c"}\n\n\tres1, _ := slice.updateat(s, 0, "1")\n\tfmt.println(res1) //[]string{"1", "b", "c"}\n}\n\n\n\n# without\n\ncreates a slice excluding all given values.\n\nsignature:\n\nfunc without[t comparable](slice []t, values ...t) []t\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.without([]int{1, 2, 3, 4, 5}, 1, 2)\n\tfmt.println(res) //[]int{3, 4, 5}\n}\n',charsets:{}},{title:"Random",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/random/",relativePath:"random/README.md",key:"v-09e82d2b",path:"/random/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:59},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:135},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:201},{level:3,title:"RandBytes",slug:"randbytes",normalizedTitle:"randbytes",charIndex:208},{level:3,title:"RandInt",slug:"randint",normalizedTitle:"randint",charIndex:435},{level:3,title:"RandInt",slug:"randint-2",normalizedTitle:"randint",charIndex:435},{level:3,title:"UUIdV4",slug:"uuidv4",normalizedTitle:"uuidv4",charIndex:891}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 RandBytes RandInt RandInt UUIdV4",content:'# Random\n\nrandom 随机数生成器包，可以生成随机[]bytes, int, string。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/random/random.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/random"\n)\n\n\n\n\n\n# 文档\n\n\n# RandBytes\n\n生成随机字节切片\n\n函数签名:\n\nfunc RandBytes(length int) []byte\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trandBytes := random.RandBytes(4)\n\tfmt.Println(randBytes)\n}\n\n\n\n# RandInt\n\n生成随机int, 范围[min, max)\n\n函数签名:\n\nfunc RandInt(min, max int) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trInt := random.RandInt(1, 10)\n\tfmt.Println(rInt)\n}\n\n\n\n# RandInt\n\n生成随机给定长度的随机字符串\n\n函数签名:\n\nfunc RandString(length int) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trandStr := random.RandString(6)\n\tfmt.Println(randStr)\n}\n\n\n\n# UUIdV4\n\n生成UUID v4字符串\n\n函数签名:\n\nfunc UUIdV4() (string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\tuuid, err := random.UUIdV4()\n    if err != nil {\n        return\n    }\n\tfmt.Println(uuid)\n}\n',normalizedContent:'# random\n\nrandom 随机数生成器包，可以生成随机[]bytes, int, string。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/random/random.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/random"\n)\n\n\n\n\n\n# 文档\n\n\n# randbytes\n\n生成随机字节切片\n\n函数签名:\n\nfunc randbytes(length int) []byte\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trandbytes := random.randbytes(4)\n\tfmt.println(randbytes)\n}\n\n\n\n# randint\n\n生成随机int, 范围[min, max)\n\n函数签名:\n\nfunc randint(min, max int) int\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trint := random.randint(1, 10)\n\tfmt.println(rint)\n}\n\n\n\n# randint\n\n生成随机给定长度的随机字符串\n\n函数签名:\n\nfunc randstring(length int) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\trandstr := random.randstring(6)\n\tfmt.println(randstr)\n}\n\n\n\n# uuidv4\n\n生成uuid v4字符串\n\n函数签名:\n\nfunc uuidv4() (string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/random"\n)\n\nfunc main() {\n\tuuid, err := random.uuidv4()\n    if err != nil {\n        return\n    }\n\tfmt.println(uuid)\n}\n',charsets:{cjk:!0}},{title:"Maputil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/maputil/",relativePath:"maputil/README.md",key:"v-4877d186",path:"/maputil/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:42},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:116},{level:2,title:"API 文档:",slug:"api-文档",normalizedTitle:"api 文档:",charIndex:183},{level:3,title:"ForEach",slug:"foreach",normalizedTitle:"foreach",charIndex:195},{level:3,title:"Filter",slug:"filter",normalizedTitle:"filter",charIndex:597},{level:3,title:"Intersect",slug:"intersect",normalizedTitle:"intersect",charIndex:1155},{level:3,title:"Keys",slug:"keys",normalizedTitle:"keys",charIndex:1759},{level:3,title:"Merge",slug:"merge",normalizedTitle:"merge",charIndex:2103},{level:3,title:"Minus",slug:"minus",normalizedTitle:"minus",charIndex:2478},{level:3,title:"Values",slug:"values",normalizedTitle:"values",charIndex:2871},{level:3,title:"IsDisjoint",slug:"isdisjoint",normalizedTitle:"isdisjoint",charIndex:3246}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: API 文档: ForEach Filter Intersect Keys Merge Minus Values IsDisjoint",content:'# Maputil\n\nmaputil 包包括一些操作 map 的函数。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/maputil/map.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\n\n\n\n\n# API 文档:\n\n\n# ForEach\n\n对map中的每对key和value执行iteratee函数\n\n函数签名:\n\nfunc ForEach[K comparable, V any](m map[K]V, iteratee func(key K, value V))\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t\t"d": 4,\n\t}\n\n\tvar sum int\n\n\tmaputil.ForEach(m, func(_ string, value int) {\n\t\tsum += value\n\t})\n\tfmt.Println(sum) // 10\n}\n\n\n\n# Filter\n\n迭代map中的每对key和value, 返回符合predicate函数的key, value\n\n函数签名:\n\nfunc Filter[K comparable, V any](m map[K]V, predicate func(key K, value V) bool) map[K]V\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t\t"d": 4,\n\t\t"e": 5,\n\t}\n\tisEven := func(_ string, value int) bool {\n\t\treturn value%2 == 0\n\t}\n\n\tmaputil.Filter(m, func(_ string, value int) {\n\t\tsum += value\n\t})\n\tres := maputil.Filter(m, isEven)\n\tfmt.Println(res) // map[string]int{"b": 2, "d": 4,}\n}\n\n\n\n# Intersect\n\n多个map的交集操作\n\n函数签名:\n\nfunc Intersect[K comparable, V any](maps ...map[K]V) map[K]V\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t}\n\n\tm2 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 6,\n\t\t"d": 7,\n\t}\n\n\tm3 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 9,\n\t\t"e": 9,\n\t}\n\n\tfmt.Println(maputil.Intersect(m1)) // map[string]int{"a": 1, "b": 2, "c": 3}\n\n\tfmt.Println(maputil.Intersect(m1, m2)) // map[string]int{"a": 1, "b": 2}\n\n\tfmt.Println(maputil.Intersect(m1, m2, m3)) // map[string]int{"a": 1}\n}\n\n\n\n# Keys\n\n返回map中所有key的切片\n\n函数签名:\n\nfunc Keys[K comparable, V any](m map[K]V) []K\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tkeys := maputil.Keys(m)\n\tsort.Ints(keys)\n\tfmt.Println(keys) // []int{1, 2, 3, 4, 5}\n}\n\n\n\n# Merge\n\n合并多个maps, 相同的key会被后来的key覆盖\n\n函数签名:\n\nfunc Merge[K comparable, V any](maps ...map[K]V) map[K]V\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[int]string{\n\t\t1: "a",\n\t\t2: "b",\n\t}\n\tm2 := map[int]string{\n\t\t1: "1",\n\t\t3: "2",\n\t}\n\tfmt.Println(maputil.Merge(m1, m2)) // map[int]string{1:"1", 2:"b", 3:"2",}\n}\n\n\n\n# Minus\n\n返回一个map，其中的key存在于mapA，不存在于mapB.\n\n函数签名:\n\nfunc Minus[K comparable, V any](mapA, mapB map[K]V) map[K]V\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t}\n\n\tm2 := map[string]int{\n\t\t"a": 11,\n\t\t"b": 22,\n\t\t"d": 33,\n\t}\n\n\tfmt.Println(maputil.Minus(m1, m2)) //map[string]int{"c": 3}\n}\n\n\n\n# Values\n\n返回map中所有value的切片\n\n函数签名:\n\nfunc Values[K comparable, V any](m map[K]V) []V\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tvalues := maputil.Values(m)\n\tsort.Strings(values)\n\n\tfmt.Println(values) // []string{"a", "a", "b", "c", "d"}\n}\n\n\n\n# IsDisjoint\n\n验证两个map是否具有不同的key\n\n函数签名:\n\nfunc IsDisjoint[K comparable, V any](mapA, mapB map[K]V) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tm2 := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tm3 := map[int]string{\n\t\t6: "a",\n\t}\n\n\tok := maputil.IsDisjoint(m2, m1)\n\tfmt.Println(ok) // false\n\n\tok = maputil.IsDisjoint(m2, m3)\n\tfmt.Println(ok) // true\n}\n',normalizedContent:'# maputil\n\nmaputil 包包括一些操作 map 的函数。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/maputil/map.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\n\n\n\n\n# api 文档:\n\n\n# foreach\n\n对map中的每对key和value执行iteratee函数\n\n函数签名:\n\nfunc foreach[k comparable, v any](m map[k]v, iteratee func(key k, value v))\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t\t"d": 4,\n\t}\n\n\tvar sum int\n\n\tmaputil.foreach(m, func(_ string, value int) {\n\t\tsum += value\n\t})\n\tfmt.println(sum) // 10\n}\n\n\n\n# filter\n\n迭代map中的每对key和value, 返回符合predicate函数的key, value\n\n函数签名:\n\nfunc filter[k comparable, v any](m map[k]v, predicate func(key k, value v) bool) map[k]v\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t\t"d": 4,\n\t\t"e": 5,\n\t}\n\tiseven := func(_ string, value int) bool {\n\t\treturn value%2 == 0\n\t}\n\n\tmaputil.filter(m, func(_ string, value int) {\n\t\tsum += value\n\t})\n\tres := maputil.filter(m, iseven)\n\tfmt.println(res) // map[string]int{"b": 2, "d": 4,}\n}\n\n\n\n# intersect\n\n多个map的交集操作\n\n函数签名:\n\nfunc intersect[k comparable, v any](maps ...map[k]v) map[k]v\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t}\n\n\tm2 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 6,\n\t\t"d": 7,\n\t}\n\n\tm3 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 9,\n\t\t"e": 9,\n\t}\n\n\tfmt.println(maputil.intersect(m1)) // map[string]int{"a": 1, "b": 2, "c": 3}\n\n\tfmt.println(maputil.intersect(m1, m2)) // map[string]int{"a": 1, "b": 2}\n\n\tfmt.println(maputil.intersect(m1, m2, m3)) // map[string]int{"a": 1}\n}\n\n\n\n# keys\n\n返回map中所有key的切片\n\n函数签名:\n\nfunc keys[k comparable, v any](m map[k]v) []k\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tkeys := maputil.keys(m)\n\tsort.ints(keys)\n\tfmt.println(keys) // []int{1, 2, 3, 4, 5}\n}\n\n\n\n# merge\n\n合并多个maps, 相同的key会被后来的key覆盖\n\n函数签名:\n\nfunc merge[k comparable, v any](maps ...map[k]v) map[k]v\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[int]string{\n\t\t1: "a",\n\t\t2: "b",\n\t}\n\tm2 := map[int]string{\n\t\t1: "1",\n\t\t3: "2",\n\t}\n\tfmt.println(maputil.merge(m1, m2)) // map[int]string{1:"1", 2:"b", 3:"2",}\n}\n\n\n\n# minus\n\n返回一个map，其中的key存在于mapa，不存在于mapb.\n\n函数签名:\n\nfunc minus[k comparable, v any](mapa, mapb map[k]v) map[k]v\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[string]int{\n\t\t"a": 1,\n\t\t"b": 2,\n\t\t"c": 3,\n\t}\n\n\tm2 := map[string]int{\n\t\t"a": 11,\n\t\t"b": 22,\n\t\t"d": 33,\n\t}\n\n\tfmt.println(maputil.minus(m1, m2)) //map[string]int{"c": 3}\n}\n\n\n\n# values\n\n返回map中所有value的切片\n\n函数签名:\n\nfunc values[k comparable, v any](m map[k]v) []v\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tvalues := maputil.values(m)\n\tsort.strings(values)\n\n\tfmt.println(values) // []string{"a", "a", "b", "c", "d"}\n}\n\n\n\n# isdisjoint\n\n验证两个map是否具有不同的key\n\n函数签名:\n\nfunc isdisjoint[k comparable, v any](mapa, mapb map[k]v) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/maputil"\n)\n\nfunc main() {\n\tm1 := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tm2 := map[int]string{\n\t\t1: "a",\n\t\t2: "a",\n\t\t3: "b",\n\t\t4: "c",\n\t\t5: "d",\n\t}\n\n\tm3 := map[int]string{\n\t\t6: "a",\n\t}\n\n\tok := maputil.isdisjoint(m2, m1)\n\tfmt.println(ok) // false\n\n\tok = maputil.isdisjoint(m2, m3)\n\tfmt.println(ok) // true\n}\n',charsets:{cjk:!0}},{title:"System",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/system/",relativePath:"system/README.md",key:"v-92dc50aa",path:"/system/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:59},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:131},{level:2,title:"Documentation 文档",slug:"documentation-文档",normalizedTitle:"documentation 文档",charIndex:197},{level:3,title:"IsWindows",slug:"iswindows",normalizedTitle:"iswindows",charIndex:218},{level:3,title:"IsLinux",slug:"islinux",normalizedTitle:"islinux",charIndex:436},{level:3,title:"IsMac",slug:"ismac",normalizedTitle:"ismac",charIndex:642},{level:3,title:"GetOsEnv",slug:"getosenv",normalizedTitle:"getosenv",charIndex:836},{level:3,title:"SetOsEnv",slug:"setosenv",normalizedTitle:"setosenv",charIndex:1054},{level:3,title:"RemoveOsEnv",slug:"removeosenv",normalizedTitle:"removeosenv",charIndex:1286},{level:3,title:"CompareOsEnv",slug:"compareosenv",normalizedTitle:"compareosenv",charIndex:1521},{level:3,title:"ExecCommand",slug:"execcommand",normalizedTitle:"execcommand",charIndex:1828},{level:3,title:"GetOsBits",slug:"getosbits",normalizedTitle:"getosbits",charIndex:2171}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: Documentation 文档 IsWindows IsLinux IsMac GetOsEnv SetOsEnv RemoveOsEnv CompareOsEnv ExecCommand GetOsBits",content:'# System\n\nsystem 包含 os, runtime, shell command 相关函数。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/system/os.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/system"\n)\n\n\n\n\n\n# Documentation 文档\n\n\n# IsWindows\n\n检查当前操作系统是否是windows\n\nSignature:\n\nfunc IsWindows() bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisOsWindows := system.IsWindows()\n\tfmt.Println(isOsWindows)\n}\n\n\n\n# IsLinux\n\n检查当前操作系统是否是linux\n\nSignature:\n\nfunc IsLinux() bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisOsLinux := system.IsLinux()\n\tfmt.Println(isOsLinux)\n}\n\n\n\n# IsMac\n\n检查当前操作系统是否是macos\n\nSignature:\n\nfunc IsMac() bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisOsMac := system.IsMac\n\tfmt.Println(isOsMac)\n}\n\n\n\n# GetOsEnv\n\n获取key命名的环境变量的值\n\nSignature:\n\nfunc GetOsEnv(key string) string\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tfooEnv := system.GetOsEnv("foo")\n\tfmt.Println(fooEnv)\n}\n\n\n\n# SetOsEnv\n\n设置由key命名的环境变量的值\n\nSignature:\n\nfunc SetOsEnv(key, value string) error\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\terr := system.SetOsEnv("foo", "foo_value")\n\tfmt.Println(err)\n}\n\n\n\n# RemoveOsEnv\n\n删除单个环境变量\n\nSignature:\n\nfunc RemoveOsEnv(key string) error\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\terr := system.RemoveOsEnv("foo")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n\n\n\n# CompareOsEnv\n\n获取key命名的环境变量值并与compareEnv进行比较\n\nSignature:\n\nfunc CompareOsEnv(key, comparedEnv string) bool\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tsystem.SetOsEnv("foo", "foo_value")\n\tres := system.CompareOsEnv("foo", "foo_value")\n\tfmt.Println(res) //true\n}\n\n\n\n# ExecCommand\n\n使用shell /bin/bash -c(linux) 或 cmd (windows) 执行shell命令\n\nSignature:\n\nfunc ExecCommand(command string) (stdout, stderr string, err error)\n\n\nExample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tout, errout, err := system.ExecCommand("ls")\n\tfmt.Println(out)\n\tfmt.Println(errout)\n\tfmt.Println(err)\n}\n\n\n\n# GetOsBits\n\n获取当前操作系统位数，返回32或64\n\n函数签名:\n\nfunc GetOsBits() int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tosBit := system.GetOsBits()\n\tfmt.Println(osBit)\n}\n',normalizedContent:'# system\n\nsystem 包含 os, runtime, shell command 相关函数。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/system/os.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/system"\n)\n\n\n\n\n\n# documentation 文档\n\n\n# iswindows\n\n检查当前操作系统是否是windows\n\nsignature:\n\nfunc iswindows() bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisoswindows := system.iswindows()\n\tfmt.println(isoswindows)\n}\n\n\n\n# islinux\n\n检查当前操作系统是否是linux\n\nsignature:\n\nfunc islinux() bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisoslinux := system.islinux()\n\tfmt.println(isoslinux)\n}\n\n\n\n# ismac\n\n检查当前操作系统是否是macos\n\nsignature:\n\nfunc ismac() bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tisosmac := system.ismac\n\tfmt.println(isosmac)\n}\n\n\n\n# getosenv\n\n获取key命名的环境变量的值\n\nsignature:\n\nfunc getosenv(key string) string\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tfooenv := system.getosenv("foo")\n\tfmt.println(fooenv)\n}\n\n\n\n# setosenv\n\n设置由key命名的环境变量的值\n\nsignature:\n\nfunc setosenv(key, value string) error\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\terr := system.setosenv("foo", "foo_value")\n\tfmt.println(err)\n}\n\n\n\n# removeosenv\n\n删除单个环境变量\n\nsignature:\n\nfunc removeosenv(key string) error\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\terr := system.removeosenv("foo")\n\tif err != nil {\n\t\tfmt.println(err)\n\t}\n}\n\n\n\n# compareosenv\n\n获取key命名的环境变量值并与compareenv进行比较\n\nsignature:\n\nfunc compareosenv(key, comparedenv string) bool\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tsystem.setosenv("foo", "foo_value")\n\tres := system.compareosenv("foo", "foo_value")\n\tfmt.println(res) //true\n}\n\n\n\n# execcommand\n\n使用shell /bin/bash -c(linux) 或 cmd (windows) 执行shell命令\n\nsignature:\n\nfunc execcommand(command string) (stdout, stderr string, err error)\n\n\nexample:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tout, errout, err := system.execcommand("ls")\n\tfmt.println(out)\n\tfmt.println(errout)\n\tfmt.println(err)\n}\n\n\n\n# getosbits\n\n获取当前操作系统位数，返回32或64\n\n函数签名:\n\nfunc getosbits() int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/system"\n)\n\nfunc main() {\n\tosbit := system.getosbits()\n\tfmt.println(osbit)\n}\n',charsets:{cjk:!0}},{title:"Slice",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/slice/",relativePath:"slice/README.md",key:"v-5ad110d6",path:"/slice/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:35},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:109},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:174},{level:3,title:"AppendIfAbsent",slug:"appendifabsent",normalizedTitle:"appendifabsent",charIndex:181},{level:3,title:"Contain",slug:"contain",normalizedTitle:"contain",charIndex:546},{level:3,title:"ContainSubSlice",slug:"containsubslice",normalizedTitle:"containsubslice",charIndex:795},{level:3,title:"Chunk",slug:"chunk",normalizedTitle:"chunk",charIndex:1087},{level:3,title:"Compact",slug:"compact",normalizedTitle:"compact",charIndex:1392},{level:3,title:"Concat",slug:"concat",normalizedTitle:"concat",charIndex:1654},{level:3,title:"Count",slug:"count",normalizedTitle:"count",charIndex:2019},{level:3,title:"Difference",slug:"difference",normalizedTitle:"difference",charIndex:2391},{level:3,title:"DifferenceBy",slug:"differenceby",normalizedTitle:"differenceby",charIndex:2699},{level:3,title:"DifferenceWith",slug:"differencewith",normalizedTitle:"differencewith",charIndex:3157},{level:3,title:"DeleteAt",slug:"deleteat",normalizedTitle:"deleteat",charIndex:3628},{level:3,title:"Drop",slug:"drop",normalizedTitle:"drop",charIndex:4032},{level:3,title:"Every",slug:"every",normalizedTitle:"every",charIndex:4454},{level:3,title:"Equal",slug:"equal",normalizedTitle:"equal",charIndex:4840},{level:3,title:"EqualWith",slug:"equalwith",normalizedTitle:"equalwith",charIndex:5231},{level:3,title:"Filter",slug:"filter",normalizedTitle:"filter",charIndex:5652},{level:3,title:"Find",slug:"find",normalizedTitle:"find",charIndex:6009},{level:3,title:"FindLast",slug:"findlast",normalizedTitle:"findlast",charIndex:6389},{level:3,title:"Flatten",slug:"flatten",normalizedTitle:"flatten",charIndex:6790},{level:3,title:"FlattenDeep",slug:"flattendeep",normalizedTitle:"flattendeep",charIndex:7050},{level:3,title:"ForEach",slug:"foreach",normalizedTitle:"foreach",charIndex:7344},{level:3,title:"GroupBy",slug:"groupby",normalizedTitle:"groupby",charIndex:7753},{level:3,title:"GroupWith",slug:"groupwith",normalizedTitle:"groupwith",charIndex:8174},{level:3,title:"IntSlice",slug:"intslice",normalizedTitle:"intslice",charIndex:8675},{level:3,title:"InterfaceSlice",slug:"interfaceslice",normalizedTitle:"interfaceslice",charIndex:1304},{level:3,title:"Intersection",slug:"intersection",normalizedTitle:"intersection",charIndex:9171},{level:3,title:"InsertAt",slug:"insertat",normalizedTitle:"insertat",charIndex:9460},{level:3,title:"IndexOf",slug:"indexof",normalizedTitle:"indexof",charIndex:9874},{level:3,title:"LastIndexOf",slug:"lastindexof",normalizedTitle:"lastindexof",charIndex:10212},{level:3,title:"Map",slug:"map",normalizedTitle:"map",charIndex:10564},{level:3,title:"Reverse",slug:"reverse",normalizedTitle:"reverse",charIndex:10924},{level:3,title:"Reduce",slug:"reduce",normalizedTitle:"reduce",charIndex:11155},{level:3,title:"Shuffle",slug:"shuffle",normalizedTitle:"shuffle",charIndex:11526},{level:3,title:"SortByField",slug:"sortbyfield",normalizedTitle:"sortbyfield",charIndex:11765},{level:3,title:"Some",slug:"some",normalizedTitle:"some",charIndex:12362},{level:3,title:"StringSlice",slug:"stringslice",normalizedTitle:"stringslice",charIndex:12703},{level:3,title:"SymmetricDifference",slug:"symmetricdifference",normalizedTitle:"symmetricdifference",charIndex:12964},{level:3,title:"ToSlice",slug:"toslice",normalizedTitle:"toslice",charIndex:13440},{level:3,title:"ToSlicePointer",slug:"toslicepointer",normalizedTitle:"toslicepointer",charIndex:13652},{level:3,title:"Unique",slug:"unique",normalizedTitle:"unique",charIndex:13937},{level:3,title:"UniqueBy",slug:"uniqueby",normalizedTitle:"uniqueby",charIndex:14166},{level:3,title:"Union",slug:"union",normalizedTitle:"union",charIndex:14492},{level:3,title:"UpdateAt",slug:"updateat",normalizedTitle:"updateat",charIndex:14792},{level:3,title:"Without",slug:"without",normalizedTitle:"without",charIndex:15117}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 AppendIfAbsent Contain ContainSubSlice Chunk Compact Concat Count Difference DifferenceBy DifferenceWith DeleteAt Drop Every Equal EqualWith Filter Find FindLast Flatten FlattenDeep ForEach GroupBy GroupWith IntSlice InterfaceSlice Intersection InsertAt IndexOf LastIndexOf Map Reverse Reduce Shuffle SortByField Some StringSlice SymmetricDifference ToSlice ToSlicePointer Unique UniqueBy Union UpdateAt Without",content:'# Slice\n\nslice 包包含操作切片的方法集合。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/slice/slice.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/slice"\n)\n\n\n\n\n\n# 文档\n\n\n# AppendIfAbsent\n\n当前切片中不包含值时，将该值追加到切片中\n\n函数签名:\n\nfunc AppendIfAbsent[T comparable](slice []T, value T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tstrs := []string{"a", "b"}\n\tres1 := slice.AppendIfAbsent(strs, "a")\n\tfmt.Println(res1) //[]string{"a", "b"}\n\n\tres2 := slice.AppendIfAbsent(strs, "cannot")\n\tfmt.Println(res2"}\n}\n\n\n\n# Contain\n\n判断slice是否包含value\n\n函数签名:\n\nfunc Contain[T comparable](slice []T, value T) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.Contain([]string{"a", "b", "c"}, "a")\n\tfmt.Println(res) //true\n}\n\n\n\n# ContainSubSlice\n\n判断slice是否包含subslice\n\n函数签名:\n\nfunc ContainSubSlice[T comparable](slice, subslice []T) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.ContainSubSlice([]string{"a", "b", "c"}, []string{"a", "b"})\n\tfmt.Println(res) //true\n}\n\n\n\n# Chunk\n\n按照size参数均分slice\n\n函数签名:\n\nfunc Chunk[T any](slice []T, size int) [][]T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "b", "c", "d", "e"}\n\tres := slice.Chunk(InterfaceSlice(arr), 3)\n\tfmt.Println(res) //[][]any{{"a", "b", "c"}, {"d", "e"}}\n}\n\n\n\n# Compact\n\n去除slice中的假值（false values are false, nil, 0, ""）\n\n函数签名:\n\nfunc Compact[T any](slice []T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.Compact([]int{0, 1, 2, 3})\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# Concat\n\n连接values到slice中，values类型可以是切片或多个值\n\n函数签名:\n\nfunc Concat[T any](slice []T, values ...[]T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.Concat([]int{1, 2, 3}, 4, 5)\n\tfmt.Println(res1) //[]int{1, 2, 3, 4, 5}\n\n\tres2 := slice.Concat([]int{1, 2, 3}, []int{4, 5})\n\tfmt.Println(res2) //[]int{1, 2, 3, 4, 5}\n}\n\n\n\n# Count\n\n遍历切片，对每个元素执行函数function. 返回符合函数返回值为true的元素的个数\n\n函数签名:\n\nfunc Count[T any](slice []T, predicate func(index int, t T) bool) int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tevenFunc := func(i, num int) bool {\n\t\treturn (num % 2) == 0\n\t}\n\n\tres := slice.Count(nums, evenFunc)\n\tfmt.Println(res) //3\n}\n\n\n\n# Difference\n\n创建一个切片，其元素不包含在另一个给定切片中\n\n函数签名:\n\nfunc Difference[T comparable](slice, comparedSlice []T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6}\n\n\tres := slice.Difference(s1, s2)\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# DifferenceBy\n\n在slice和comparedSlice中的每个元素调用iteratee函数，并比较它们的返回值，如果不想等返回在slice中对应的值\n\n函数签名:\n\nfunc DifferenceBy[T comparable](slice []T, comparedSlice []T, iteratee func(index int, item T) T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6}\n\taddOne := func(i int, v int) int {\n\t\treturn v + 1\n\t}\n\n\tres := slice.DifferenceBy(s1, s2, addOne)\n\tfmt.Println(res) //[]int{1, 2}\n}\n\n\n\n# DifferenceWith\n\nDifferenceWith 接受比较器，该比较器被调用以将切片的元素与值进行比较。 结果值的顺序和引用由第一个切片确定\n\n函数签名:\n\nfunc DifferenceWith[T any](slice []T, comparedSlice []T, comparator func(value, otherValue T) bool) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6, 7, 8}\n\tisDouble := func(v1, v2 int) bool {\n\t\treturn v2 == 2*v1\n\t}\n\n\tres := slice.DifferenceWith(s1, s2, isDouble)\n\tfmt.Println(res) //[]int{1, 5}\n}\n\n\n\n# DeleteAt\n\n删除切片中从开始索引到结束索引-1的元素\n\n函数签名:\n\nfunc DeleteAt[T any](slice []T, start int, end ...int)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.DeleteAt([]string{"a", "b", "c", "d", "e"}, 3)\n\tfmt.Println(res1) //[]string{"a", "b", "c", "e"}\n\n\tres2 := slice.DeleteAt([]string{"a", "b", "c", "d", "e"}, 0, 2)\n\tfmt.Println(res2) //[]string{"c", "d", "e"}\n\n}\n\n\n\n# Drop\n\n创建一个切片，当 n > 0 时从开头删除 n 个元素，或者当 n < 0 时从结尾删除 n 个元素\n\n函数签名:\n\nfunc Drop[T any](slice []T, n int) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.Drop([]int{}, 0)\n\tfmt.Println(res1) //[]int{}\n\n\tres2 := slice.Drop([]int{1, 2, 3, 4, 5}, 1)\n\tfmt.Println(res2) //[]int{2, 3, 4, 5}\n\n\tres3 := slice.Drop([]int{1, 2, 3, 4, 5}, -1)\n\tfmt.Println(res3) //[]int{1, 2, 3, 4}\n}\n\n\n\n# Every\n\n如果切片中的所有值都通过谓词函数，则返回true。 函数签名应该是func(index int, value any) bool\n\n函数签名:\n\nfunc Every[T any](slice []T, predicate func(index int, item T) bool) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.Every(nums, isEven)\n\tfmt.Println(res) //false\n}\n\n\n\n# Equal\n\n检查两个切片是否相等，相等条件：切片长度相同，元素顺序和值都相同\n\n函数签名:\n\nfunc Equal[T comparable](slice1, slice2 []T) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tslice1 := []int{1, 2, 3}\n\tslice2 := []int{1, 2, 3}\n\tslice3 := []int{3, 2, 1}\n\n\tres1 := slice.Equal(slice1, slice2)\n\tres2 := slice.Equal(slice1, slice3)\n\n\tfmt.Println(res1) //true\n\tfmt.Println(res2) //false\n}\n\n\n\n# EqualWith\n\n检查两个切片是否相等，相等条件：对两个切片的元素调用比较函数comparator，返回true\n\n函数签名:\n\nfunc EqualWith[T, U any](slice1 []T, slice2 []U, comparator func(T, U) bool) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tslice1 := []int{1, 2, 3}\n\tslice2 := []int{2, 4, 6}\n\n\tisDouble := func(a, b int) bool {\n\t\treturn b == a*2\n\t}\n\n\tres := slice.EqualWith(slice1, slice2, isDouble)\n\n\tfmt.Println(res) //true\n}\n\n\n\n# Filter\n\n返回切片中通过predicate函数真值测试的所有元素\n\n函数签名:\n\nfunc Filter[T any](slice []T, predicate func(index int, item T) bool) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.Filter(nums, isEven)\n\tfmt.Println(res) //[]int{2, 4}\n}\n\n\n\n# Find\n\n遍历切片的元素，返回第一个通过predicate函数真值测试的元素\n\n函数签名:\n\nfunc Find[T any](slice []T, predicate func(index int, item T) bool) (*T, bool)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres, ok := slice.Find(nums, even)\n\tfmt.Println(res) //2\n\tfmt.Println(ok) //true\n}\n\n\n\n# FindLast\n\n从头到尾遍历slice的元素，返回最后一个通过predicate函数真值测试的元素。\n\n函数签名:\n\nfunc FindLast[T any](slice []T, predicate func(index int, item T) bool) (*T, bool)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres, ok := slice.FindLast(nums, even)\n\tfmt.Println(res) //4\n\tfmt.Println(ok) //true\n}\n\n\n\n# Flatten\n\n将切片压平一层\n\n函数签名:\n\nfunc Flatten(slice any) any\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := [][][]string{{{"a", "b"}}, {{"c", "d"}}}\n\tres := slice.Flatten(arr)\n\tfmt.Println(res) //{{"a", "b"}, {"c", "d"}}\n}\n\n\n\n# FlattenDeep\n\nflattens slice recursive.\n\n函数签名:\n\nfunc FlattenDeep(slice any) any\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := [][][]string{{{"a", "b"}}, {{"c", "d"}}}\n\tres := slice.FlattenDeep(arr)\n\tfmt.Println(res) //[]string{"a", "b", "c", "d"}\n}\n\n\n\n# ForEach\n\n遍历切片的元素并为每个元素调用iteratee函数\n\n函数签名:\n\nfunc ForEach[T any](slice []T, iteratee func(index int, item T))\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tvar numbersAddTwo []int\n\tslice.ForEach(numbers, func(index int, value int) {\n\t\tnumbersAddTwo = append(numbersAddTwo, value+2)\n\t})\n\tfmt.Println(numbersAddTwo) //[]int{3, 4, 5, 6, 7}\n}\n\n\n\n# GroupBy\n\n迭代切片的元素，每个元素将按条件分组，返回两个切片\n\n函数签名:\n\nfunc GroupBy[T any](slice []T, groupFn func(index int, item T) bool) ([]T, []T)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tevenFunc := func(i, num int) bool {\n\t\treturn (num % 2) == 0\n\t}\n\teven, odd := slice.GroupBy(nums, evenFunc)\n\n\tfmt.Println(even) //[]int{2, 4, 6}\n\tfmt.Println(odd) //]int{1, 3, 5}\n}\n\n\n\n# GroupWith\n\n创建一个map，key是iteratee遍历slice中的每个元素返回的结果。 分组值的顺序是由他们出现在slice中的顺序确定的。每个键对应的值负责生成key的元素组成的数组。iteratee调用1个参数： (value)\n\n函数签名:\n\nfunc GroupWith[T any, U comparable](slice []T, iteratee func(T) U) map[U][]T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []float64{6.1, 4.2, 6.3}\n\tfloor := func(num float64) float64 {\n\t\treturn math.Floor(num)\n\t}\n\tres := slice.GroupWith(nums, floor)\n\tfmt.Println(res) //map[float64][]float64{ 4: {4.2}, 6: {6.1, 6.3},}\n}\n\n\n\n# IntSlice\n\n将接口切片转换为int切片\n\n函数签名:\n\nfunc IntSlice(slice any) []int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar nums = []any{1, 2, 3}\n\tres := slice.IntSlice(nums)\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# InterfaceSlice\n\n将值转换为接口切片\n\n函数签名:\n\nfunc InterfaceSlice(slice any) []any\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar nums = []int{}{1, 2, 3}\n\tres := slice.InterfaceSlice(nums)\n\tfmt.Println(res) //[]any{1, 2, 3}\n}\n\n\n\n# Intersection\n\n多个切片的交集\n\n函数签名:\n\nfunc Intersection[T comparable](slices ...[]T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 2, 3}\n\ts2 := []int{1, 2, 3, 4}\n\tres := slice.Intersection(s1, s2),\n\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# InsertAt\n\n将元素插入到索引处的切片中\n\n函数签名:\n\nfunc InsertAt[T any](slice []T, index int, value any) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts := []string{"a", "b", "c"}\n\n\tres1, _ := slice.InsertAt(s, 0, "1")\n\tfmt.Println(res1) //[]string{"1", "a", "b", "c"}\n\n\tres2, _ := slice.InsertAt(s, 3, []string{"1", "2", "3"})\n\tfmt.Println(res2) //[]string{"a", "b", "c", "1", "2", "3"}\n}\n\n\n\n# IndexOf\n\n返回在切片中找到值的第一个匹配项的索引，如果找不到值，则返回-1\n\n函数签名:\n\nfunc IndexOf[T comparable](slice []T, value T) int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "a", "b", "c"}\n\tres1 := slice.IndexOf(arr, "a")\n\tfmt.Println(res1) //0\n\n\tres2 := slice.IndexOf(arr, "d")\n\tfmt.Println(res2) //-1\n}\n\n\n\n# LastIndexOf\n\n返回在切片中找到最后一个值的索引，如果找不到该值，则返回-1\n\n函数签名:\n\nfunc LastIndexOf[T comparable](slice []T, value T) int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "a", "b", "c"}\n\tres1 := slice.LastIndexOf(arr, "a")\n\tfmt.Println(res1) //1\n\n\tres2 := slice.LastIndexOf(arr, "d")\n\tfmt.Println(res2) //-1\n}\n\n\n\n# Map\n\n通过运行函数slice中的每个元素来创建一个新切片\n\n函数签名:\n\nfunc Map[T any, U any](slice []T, iteratee func(index int, item T) U) []U\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tmultiplyTwo := func(i, num int) int {\n\t\treturn num * 2\n\t}\n\tres := slice.Map(nums, multiplyTwo)\n\tfmt.Println(res) //[]int{2, 4, 6, 8}\n}\n\n\n\n# Reverse\n\n反转切片中的元素顺序\n\n函数签名:\n\nfunc Reverse[T any](slice []T)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tslice.Reverse(nums)\n\tfmt.Println(res) //[]int{4, 3, 2, 1}\n}\n\n\n\n# Reduce\n\n将切片中的元素依次运行iteratee函数，返回运行结果\n\n函数签名:\n\nfunc Reduce[T any](slice []T, iteratee func(index int, item1, item2 T) T, initial T) T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\treduceFunc := func(i, v1, v2 int) int {\n\t\treturn v1 + v2\n\t}\n\tres := slice.Reduce(nums, reduceFunc, 0)\n\tfmt.Println(res) //10\n}\n\n\n\n# Shuffle\n\n随机打乱切片中的元素顺序\n\n函数签名:\n\nfunc Shuffle[T any](slice []T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5}\n\tres := slice.Shuffle(nums)\n\tfmt.Println(res) //3,1,5,4,2\n}\n\n\n\n# SortByField\n\n按字段对结构切片进行排序。slice元素应为struct，字段类型应为int、uint、string或bool。 默认排序类型是升序（asc），如果是降序，设置 sortType 为 desc\n\n函数签名:\n\nfunc SortByField(slice any, field string, sortType ...string) error\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ttype student struct {\n\t\tname string\n\t\tage  int\n\t}\n\tstudents := []student{\n\t\t{"a", 10},\n\t\t{"b", 15},\n\t\t{"c", 5},\n\t\t{"d", 6},\n\t}\n\terr := slice.SortByField(students, "age", "desc")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(students)\n\t// []students{\n\t// \t{"b", 15},\n\t// \t{"a", 10},\n\t// \t{"d", 6},\n\t// \t{"c", 5},\n\t// }\n}\n\n\n\n# Some\n\n如果列表中的任何值通过谓词函数，则返回true\n\n函数签名:\n\nfunc Some[T any](slice []T, predicate func(index int, item T) bool) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tisEven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.Some(nums, isEven)\n\tfmt.Println(res) //true\n}\n\n\n\n# StringSlice\n\n将接口切片转换为字符串切片\n\n函数签名:\n\nfunc StringSlice(slice any) []string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar s = []any{"a", "b", "c"}\n\tres := slice.StringSlice(s)\n\tfmt.Println(res) //[]string{"a", "b", "c"}\n}\n\n\n\n# SymmetricDifference\n\n返回一个切片，其中的元素存在于参数切片中，但不同时存储在于参数切片中（交集取反）\n\n函数签名:\n\nfunc SymmetricDifference[T comparable](slices ...[]T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3}\n\ts2 := []int{1, 2, 4}\n\ts3 := []int{1, 2, 3, 5}\n\n\tfmt.Println(slice.SymmetricDifference(s1)) //[]int{1, 2, 3}\n\tfmt.Println(slice.SymmetricDifference(s1, s2)) //[]int{3, 4}\n\tfmt.Println(slice.SymmetricDifference(s1, s2, s3)) //[]int{3, 4, 5}\n}\n\n\n\n# ToSlice\n\n将可变参数转为切片\n\n函数签名:\n\nfunc ToSlice[T any](value ...T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.ToSlice("a", "b")\n\tfmt.Println(res) //{"a", "b"}\n}\n\n\n\n# ToSlicePointer\n\n将可变参数转为指针切片\n\n函数签名:\n\nfunc ToSlicePointer[T any](value ...T) []*T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tstr1 := "a"\n\tstr2 := "b"\n\tres := slice.ToSlicePointer(str1, str2)\n\tfmt.Println(res) // res -> []*string{&str1, &str2}\n}\n\n\n\n# Unique\n\n删除切片中的重复元素\n\n函数签名:\n\nfunc Unique[T comparable](slice []T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.Unique([]int{1, 2, 2, 3})\n\tfmt.Println(res) //[]int{1, 2, 3}\n}\n\n\n\n# UniqueBy\n\n对切片的每个元素调用iteratee函数，然后删除重复元素\n\n函数签名:\n\nfunc UniqueBy[T comparable](slice []T, iteratee func(item T) T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/slice"\n)\n\nfunc main() {\n\tres := slice.UniqueBy([]int{1, 2, 3, 4, 5, 6}, func(val int) int {\n\t\treturn val % 4\n\t})\n\tfmt.Println(res) //[]int{1, 2, 3, 0}\n}\n\n\n\n# Union\n\n从所有给定的切片按顺序创建一个唯一值切片，使用==进行相等比较\n\n函数签名:\n\nfunc Union[T comparable](slices ...[]T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 3, 4, 6}\n\ts2 := []int{1, 2, 5, 6}\n\tres := slice.Union(s1, s2)\n\n\tfmt.Println(res) //[]int{1, 3, 4, 6, 2, 5}\n}\n\n\n\n# UpdateAt\n\n更新索引处的切片元素。 如果index < 0或 index >= len(slice)，将返回错误\n\n函数签名:\n\nfunc UpdateAt[T any](slice []T, index int, value T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts := []string{"a", "b", "c"}\n\n\tres1, _ := slice.UpdateAt(s, 0, "1")\n\tfmt.Println(res1) //[]string{"1", "b", "c"}\n}\n\n\n\n# Without\n\n创建一个不包括所有给定值的切片\n\n函数签名:\n\nfunc Without[T comparable](slice []T, values ...T) []T\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.Without([]int{1, 2, 3, 4, 5}, 1, 2)\n\tfmt.Println(res) //[]int{3, 4, 5}\n}\n',normalizedContent:'# slice\n\nslice 包包含操作切片的方法集合。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/slice/slice.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/slice"\n)\n\n\n\n\n\n# 文档\n\n\n# appendifabsent\n\n当前切片中不包含值时，将该值追加到切片中\n\n函数签名:\n\nfunc appendifabsent[t comparable](slice []t, value t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tstrs := []string{"a", "b"}\n\tres1 := slice.appendifabsent(strs, "a")\n\tfmt.println(res1) //[]string{"a", "b"}\n\n\tres2 := slice.appendifabsent(strs, "cannot")\n\tfmt.println(res2"}\n}\n\n\n\n# contain\n\n判断slice是否包含value\n\n函数签名:\n\nfunc contain[t comparable](slice []t, value t) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.contain([]string{"a", "b", "c"}, "a")\n\tfmt.println(res) //true\n}\n\n\n\n# containsubslice\n\n判断slice是否包含subslice\n\n函数签名:\n\nfunc containsubslice[t comparable](slice, subslice []t) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.containsubslice([]string{"a", "b", "c"}, []string{"a", "b"})\n\tfmt.println(res) //true\n}\n\n\n\n# chunk\n\n按照size参数均分slice\n\n函数签名:\n\nfunc chunk[t any](slice []t, size int) [][]t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "b", "c", "d", "e"}\n\tres := slice.chunk(interfaceslice(arr), 3)\n\tfmt.println(res) //[][]any{{"a", "b", "c"}, {"d", "e"}}\n}\n\n\n\n# compact\n\n去除slice中的假值（false values are false, nil, 0, ""）\n\n函数签名:\n\nfunc compact[t any](slice []t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.compact([]int{0, 1, 2, 3})\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# concat\n\n连接values到slice中，values类型可以是切片或多个值\n\n函数签名:\n\nfunc concat[t any](slice []t, values ...[]t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.concat([]int{1, 2, 3}, 4, 5)\n\tfmt.println(res1) //[]int{1, 2, 3, 4, 5}\n\n\tres2 := slice.concat([]int{1, 2, 3}, []int{4, 5})\n\tfmt.println(res2) //[]int{1, 2, 3, 4, 5}\n}\n\n\n\n# count\n\n遍历切片，对每个元素执行函数function. 返回符合函数返回值为true的元素的个数\n\n函数签名:\n\nfunc count[t any](slice []t, predicate func(index int, t t) bool) int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tevenfunc := func(i, num int) bool {\n\t\treturn (num % 2) == 0\n\t}\n\n\tres := slice.count(nums, evenfunc)\n\tfmt.println(res) //3\n}\n\n\n\n# difference\n\n创建一个切片，其元素不包含在另一个给定切片中\n\n函数签名:\n\nfunc difference[t comparable](slice, comparedslice []t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6}\n\n\tres := slice.difference(s1, s2)\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# differenceby\n\n在slice和comparedslice中的每个元素调用iteratee函数，并比较它们的返回值，如果不想等返回在slice中对应的值\n\n函数签名:\n\nfunc differenceby[t comparable](slice []t, comparedslice []t, iteratee func(index int, item t) t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6}\n\taddone := func(i int, v int) int {\n\t\treturn v + 1\n\t}\n\n\tres := slice.differenceby(s1, s2, addone)\n\tfmt.println(res) //[]int{1, 2}\n}\n\n\n\n# differencewith\n\ndifferencewith 接受比较器，该比较器被调用以将切片的元素与值进行比较。 结果值的顺序和引用由第一个切片确定\n\n函数签名:\n\nfunc differencewith[t any](slice []t, comparedslice []t, comparator func(value, othervalue t) bool) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4, 5}\n\ts2 := []int{4, 5, 6, 7, 8}\n\tisdouble := func(v1, v2 int) bool {\n\t\treturn v2 == 2*v1\n\t}\n\n\tres := slice.differencewith(s1, s2, isdouble)\n\tfmt.println(res) //[]int{1, 5}\n}\n\n\n\n# deleteat\n\n删除切片中从开始索引到结束索引-1的元素\n\n函数签名:\n\nfunc deleteat[t any](slice []t, start int, end ...int)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.deleteat([]string{"a", "b", "c", "d", "e"}, 3)\n\tfmt.println(res1) //[]string{"a", "b", "c", "e"}\n\n\tres2 := slice.deleteat([]string{"a", "b", "c", "d", "e"}, 0, 2)\n\tfmt.println(res2) //[]string{"c", "d", "e"}\n\n}\n\n\n\n# drop\n\n创建一个切片，当 n > 0 时从开头删除 n 个元素，或者当 n < 0 时从结尾删除 n 个元素\n\n函数签名:\n\nfunc drop[t any](slice []t, n int) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres1 := slice.drop([]int{}, 0)\n\tfmt.println(res1) //[]int{}\n\n\tres2 := slice.drop([]int{1, 2, 3, 4, 5}, 1)\n\tfmt.println(res2) //[]int{2, 3, 4, 5}\n\n\tres3 := slice.drop([]int{1, 2, 3, 4, 5}, -1)\n\tfmt.println(res3) //[]int{1, 2, 3, 4}\n}\n\n\n\n# every\n\n如果切片中的所有值都通过谓词函数，则返回true。 函数签名应该是func(index int, value any) bool\n\n函数签名:\n\nfunc every[t any](slice []t, predicate func(index int, item t) bool) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.every(nums, iseven)\n\tfmt.println(res) //false\n}\n\n\n\n# equal\n\n检查两个切片是否相等，相等条件：切片长度相同，元素顺序和值都相同\n\n函数签名:\n\nfunc equal[t comparable](slice1, slice2 []t) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tslice1 := []int{1, 2, 3}\n\tslice2 := []int{1, 2, 3}\n\tslice3 := []int{3, 2, 1}\n\n\tres1 := slice.equal(slice1, slice2)\n\tres2 := slice.equal(slice1, slice3)\n\n\tfmt.println(res1) //true\n\tfmt.println(res2) //false\n}\n\n\n\n# equalwith\n\n检查两个切片是否相等，相等条件：对两个切片的元素调用比较函数comparator，返回true\n\n函数签名:\n\nfunc equalwith[t, u any](slice1 []t, slice2 []u, comparator func(t, u) bool) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tslice1 := []int{1, 2, 3}\n\tslice2 := []int{2, 4, 6}\n\n\tisdouble := func(a, b int) bool {\n\t\treturn b == a*2\n\t}\n\n\tres := slice.equalwith(slice1, slice2, isdouble)\n\n\tfmt.println(res) //true\n}\n\n\n\n# filter\n\n返回切片中通过predicate函数真值测试的所有元素\n\n函数签名:\n\nfunc filter[t any](slice []t, predicate func(index int, item t) bool) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.filter(nums, iseven)\n\tfmt.println(res) //[]int{2, 4}\n}\n\n\n\n# find\n\n遍历切片的元素，返回第一个通过predicate函数真值测试的元素\n\n函数签名:\n\nfunc find[t any](slice []t, predicate func(index int, item t) bool) (*t, bool)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres, ok := slice.find(nums, even)\n\tfmt.println(res) //2\n\tfmt.println(ok) //true\n}\n\n\n\n# findlast\n\n从头到尾遍历slice的元素，返回最后一个通过predicate函数真值测试的元素。\n\n函数签名:\n\nfunc findlast[t any](slice []t, predicate func(index int, item t) bool) (*t, bool)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres, ok := slice.findlast(nums, even)\n\tfmt.println(res) //4\n\tfmt.println(ok) //true\n}\n\n\n\n# flatten\n\n将切片压平一层\n\n函数签名:\n\nfunc flatten(slice any) any\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := [][][]string{{{"a", "b"}}, {{"c", "d"}}}\n\tres := slice.flatten(arr)\n\tfmt.println(res) //{{"a", "b"}, {"c", "d"}}\n}\n\n\n\n# flattendeep\n\nflattens slice recursive.\n\n函数签名:\n\nfunc flattendeep(slice any) any\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := [][][]string{{{"a", "b"}}, {{"c", "d"}}}\n\tres := slice.flattendeep(arr)\n\tfmt.println(res) //[]string{"a", "b", "c", "d"}\n}\n\n\n\n# foreach\n\n遍历切片的元素并为每个元素调用iteratee函数\n\n函数签名:\n\nfunc foreach[t any](slice []t, iteratee func(index int, item t))\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tvar numbersaddtwo []int\n\tslice.foreach(numbers, func(index int, value int) {\n\t\tnumbersaddtwo = append(numbersaddtwo, value+2)\n\t})\n\tfmt.println(numbersaddtwo) //[]int{3, 4, 5, 6, 7}\n}\n\n\n\n# groupby\n\n迭代切片的元素，每个元素将按条件分组，返回两个切片\n\n函数签名:\n\nfunc groupby[t any](slice []t, groupfn func(index int, item t) bool) ([]t, []t)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tevenfunc := func(i, num int) bool {\n\t\treturn (num % 2) == 0\n\t}\n\teven, odd := slice.groupby(nums, evenfunc)\n\n\tfmt.println(even) //[]int{2, 4, 6}\n\tfmt.println(odd) //]int{1, 3, 5}\n}\n\n\n\n# groupwith\n\n创建一个map，key是iteratee遍历slice中的每个元素返回的结果。 分组值的顺序是由他们出现在slice中的顺序确定的。每个键对应的值负责生成key的元素组成的数组。iteratee调用1个参数： (value)\n\n函数签名:\n\nfunc groupwith[t any, u comparable](slice []t, iteratee func(t) u) map[u][]t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []float64{6.1, 4.2, 6.3}\n\tfloor := func(num float64) float64 {\n\t\treturn math.floor(num)\n\t}\n\tres := slice.groupwith(nums, floor)\n\tfmt.println(res) //map[float64][]float64{ 4: {4.2}, 6: {6.1, 6.3},}\n}\n\n\n\n# intslice\n\n将接口切片转换为int切片\n\n函数签名:\n\nfunc intslice(slice any) []int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar nums = []any{1, 2, 3}\n\tres := slice.intslice(nums)\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# interfaceslice\n\n将值转换为接口切片\n\n函数签名:\n\nfunc interfaceslice(slice any) []any\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar nums = []int{}{1, 2, 3}\n\tres := slice.interfaceslice(nums)\n\tfmt.println(res) //[]any{1, 2, 3}\n}\n\n\n\n# intersection\n\n多个切片的交集\n\n函数签名:\n\nfunc intersection[t comparable](slices ...[]t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 2, 3}\n\ts2 := []int{1, 2, 3, 4}\n\tres := slice.intersection(s1, s2),\n\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# insertat\n\n将元素插入到索引处的切片中\n\n函数签名:\n\nfunc insertat[t any](slice []t, index int, value any) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts := []string{"a", "b", "c"}\n\n\tres1, _ := slice.insertat(s, 0, "1")\n\tfmt.println(res1) //[]string{"1", "a", "b", "c"}\n\n\tres2, _ := slice.insertat(s, 3, []string{"1", "2", "3"})\n\tfmt.println(res2) //[]string{"a", "b", "c", "1", "2", "3"}\n}\n\n\n\n# indexof\n\n返回在切片中找到值的第一个匹配项的索引，如果找不到值，则返回-1\n\n函数签名:\n\nfunc indexof[t comparable](slice []t, value t) int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "a", "b", "c"}\n\tres1 := slice.indexof(arr, "a")\n\tfmt.println(res1) //0\n\n\tres2 := slice.indexof(arr, "d")\n\tfmt.println(res2) //-1\n}\n\n\n\n# lastindexof\n\n返回在切片中找到最后一个值的索引，如果找不到该值，则返回-1\n\n函数签名:\n\nfunc lastindexof[t comparable](slice []t, value t) int\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tarr := []string{"a", "a", "b", "c"}\n\tres1 := slice.lastindexof(arr, "a")\n\tfmt.println(res1) //1\n\n\tres2 := slice.lastindexof(arr, "d")\n\tfmt.println(res2) //-1\n}\n\n\n\n# map\n\n通过运行函数slice中的每个元素来创建一个新切片\n\n函数签名:\n\nfunc map[t any, u any](slice []t, iteratee func(index int, item t) u) []u\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tmultiplytwo := func(i, num int) int {\n\t\treturn num * 2\n\t}\n\tres := slice.map(nums, multiplytwo)\n\tfmt.println(res) //[]int{2, 4, 6, 8}\n}\n\n\n\n# reverse\n\n反转切片中的元素顺序\n\n函数签名:\n\nfunc reverse[t any](slice []t)\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tslice.reverse(nums)\n\tfmt.println(res) //[]int{4, 3, 2, 1}\n}\n\n\n\n# reduce\n\n将切片中的元素依次运行iteratee函数，返回运行结果\n\n函数签名:\n\nfunc reduce[t any](slice []t, iteratee func(index int, item1, item2 t) t, initial t) t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\treducefunc := func(i, v1, v2 int) int {\n\t\treturn v1 + v2\n\t}\n\tres := slice.reduce(nums, reducefunc, 0)\n\tfmt.println(res) //10\n}\n\n\n\n# shuffle\n\n随机打乱切片中的元素顺序\n\n函数签名:\n\nfunc shuffle[t any](slice []t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5}\n\tres := slice.shuffle(nums)\n\tfmt.println(res) //3,1,5,4,2\n}\n\n\n\n# sortbyfield\n\n按字段对结构切片进行排序。slice元素应为struct，字段类型应为int、uint、string或bool。 默认排序类型是升序（asc），如果是降序，设置 sorttype 为 desc\n\n函数签名:\n\nfunc sortbyfield(slice any, field string, sorttype ...string) error\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ttype student struct {\n\t\tname string\n\t\tage  int\n\t}\n\tstudents := []student{\n\t\t{"a", 10},\n\t\t{"b", 15},\n\t\t{"c", 5},\n\t\t{"d", 6},\n\t}\n\terr := slice.sortbyfield(students, "age", "desc")\n\tif err != nil {\n\t\tfmt.println(err)\n\t}\n\tfmt.println(students)\n\t// []students{\n\t// \t{"b", 15},\n\t// \t{"a", 10},\n\t// \t{"d", 6},\n\t// \t{"c", 5},\n\t// }\n}\n\n\n\n# some\n\n如果列表中的任何值通过谓词函数，则返回true\n\n函数签名:\n\nfunc some[t any](slice []t, predicate func(index int, item t) bool) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tnums := []int{1, 2, 3, 5}\n\tiseven := func(i, num int) bool {\n\t\treturn num%2 == 0\n\t}\n\n\tres := slice.some(nums, iseven)\n\tfmt.println(res) //true\n}\n\n\n\n# stringslice\n\n将接口切片转换为字符串切片\n\n函数签名:\n\nfunc stringslice(slice any) []string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tvar s = []any{"a", "b", "c"}\n\tres := slice.stringslice(s)\n\tfmt.println(res) //[]string{"a", "b", "c"}\n}\n\n\n\n# symmetricdifference\n\n返回一个切片，其中的元素存在于参数切片中，但不同时存储在于参数切片中（交集取反）\n\n函数签名:\n\nfunc symmetricdifference[t comparable](slices ...[]t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 2, 3}\n\ts2 := []int{1, 2, 4}\n\ts3 := []int{1, 2, 3, 5}\n\n\tfmt.println(slice.symmetricdifference(s1)) //[]int{1, 2, 3}\n\tfmt.println(slice.symmetricdifference(s1, s2)) //[]int{3, 4}\n\tfmt.println(slice.symmetricdifference(s1, s2, s3)) //[]int{3, 4, 5}\n}\n\n\n\n# toslice\n\n将可变参数转为切片\n\n函数签名:\n\nfunc toslice[t any](value ...t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.toslice("a", "b")\n\tfmt.println(res) //{"a", "b"}\n}\n\n\n\n# toslicepointer\n\n将可变参数转为指针切片\n\n函数签名:\n\nfunc toslicepointer[t any](value ...t) []*t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tstr1 := "a"\n\tstr2 := "b"\n\tres := slice.toslicepointer(str1, str2)\n\tfmt.println(res) // res -> []*string{&str1, &str2}\n}\n\n\n\n# unique\n\n删除切片中的重复元素\n\n函数签名:\n\nfunc unique[t comparable](slice []t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.unique([]int{1, 2, 2, 3})\n\tfmt.println(res) //[]int{1, 2, 3}\n}\n\n\n\n# uniqueby\n\n对切片的每个元素调用iteratee函数，然后删除重复元素\n\n函数签名:\n\nfunc uniqueby[t comparable](slice []t, iteratee func(item t) t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/slice"\n)\n\nfunc main() {\n\tres := slice.uniqueby([]int{1, 2, 3, 4, 5, 6}, func(val int) int {\n\t\treturn val % 4\n\t})\n\tfmt.println(res) //[]int{1, 2, 3, 0}\n}\n\n\n\n# union\n\n从所有给定的切片按顺序创建一个唯一值切片，使用==进行相等比较\n\n函数签名:\n\nfunc union[t comparable](slices ...[]t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts1 := []int{1, 3, 4, 6}\n\ts2 := []int{1, 2, 5, 6}\n\tres := slice.union(s1, s2)\n\n\tfmt.println(res) //[]int{1, 3, 4, 6, 2, 5}\n}\n\n\n\n# updateat\n\n更新索引处的切片元素。 如果index < 0或 index >= len(slice)，将返回错误\n\n函数签名:\n\nfunc updateat[t any](slice []t, index int, value t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\ts := []string{"a", "b", "c"}\n\n\tres1, _ := slice.updateat(s, 0, "1")\n\tfmt.println(res1) //[]string{"1", "b", "c"}\n}\n\n\n\n# without\n\n创建一个不包括所有给定值的切片\n\n函数签名:\n\nfunc without[t comparable](slice []t, values ...t) []t\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/slice"\n)\n\nfunc main() {\n\tres := slice.without([]int{1, 2, 3, 4, 5}, 1, 2)\n\tfmt.println(res) //[]int{3, 4, 5}\n}\n',charsets:{cjk:!0}},{title:"Strutil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/strutil/",relativePath:"strutil/README.md",key:"v-0e3c0313",path:"/strutil/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:39},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:116},{level:2,title:"Documentation 文档",slug:"documentation-文档",normalizedTitle:"documentation 文档",charIndex:183},{level:3,title:"After",slug:"after",normalizedTitle:"after",charIndex:204},{level:3,title:"AfterLast",slug:"afterlast",normalizedTitle:"afterlast",charIndex:597},{level:3,title:"Before",slug:"before",normalizedTitle:"before",charIndex:1012},{level:3,title:"BeforeLast",slug:"beforelast",normalizedTitle:"beforelast",charIndex:1413},{level:3,title:"CamelCase",slug:"camelcase",normalizedTitle:"camelcase",charIndex:1850},{level:3,title:"Capitalize",slug:"capitalize",normalizedTitle:"capitalize",charIndex:2254},{level:3,title:"IsString",slug:"isstring",normalizedTitle:"isstring",charIndex:2580},{level:3,title:"KebabCase",slug:"kebabcase",normalizedTitle:"kebabcase",charIndex:2954},{level:3,title:"LowerFirst",slug:"lowerfirst",normalizedTitle:"lowerfirst",charIndex:3374},{level:3,title:"UpperFirst",slug:"upperfirst",normalizedTitle:"upperfirst",charIndex:3760},{level:3,title:"PadEnd",slug:"padend",normalizedTitle:"padend",charIndex:4146},{level:3,title:"PadStart",slug:"padstart",normalizedTitle:"padstart",charIndex:4579},{level:3,title:"Reverse",slug:"reverse",normalizedTitle:"reverse",charIndex:5024},{level:3,title:"SnakeCase",slug:"snakecase",normalizedTitle:"snakecase",charIndex:5295},{level:3,title:"SplitEx",slug:"splitex",normalizedTitle:"splitex",charIndex:5799},{level:3,title:"Wrap",slug:"wrap",normalizedTitle:"wrap",charIndex:6486},{level:3,title:"Unwrap",slug:"unwrap",normalizedTitle:"unwrap",charIndex:6924}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: Documentation 文档 After AfterLast Before BeforeLast CamelCase Capitalize IsString KebabCase LowerFirst UpperFirst PadEnd PadStart Reverse SnakeCase SplitEx Wrap Unwrap",content:'# Strutil\n\nstrutil 包含处理字符串的相关函数。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/strutil/string.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/strutil"\n)\n\n\n\n\n\n# Documentation 文档\n\n\n# After\n\n截取源字符串中char首次出现时的位置之后的子字符串\n\n函数签名:\n\nfunc After(s, char string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.After("lancet", "")\n\tfmt.Println(s1) //lancet\n\n\ts2 := strutil.After("github.com/test/lancet", "/")\n\tfmt.Println(s2) //test/lancet\n\n\ts3 := strutil.After("github.com/test/lancet", "test")\n\tfmt.Println(s3) // /lancet\n}\n\n\n\n# AfterLast\n\n截取源字符串中char最后一次出现时的位置之后的子字符串\n\n函数签名:\n\nfunc AfterLast(s, char string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.AfterLast("lancet", "")\n\tfmt.Println(s1) //lancet\n\n\ts2 := strutil.AfterLast("github.com/test/lancet", "/")\n\tfmt.Println(s2) //lancet\n\n\ts3 := strutil.AfterLast("github.com/test/test/lancet", "test")\n\tfmt.Println(s3) // /lancet\n}\n\n\n\n# Before\n\n截取源字符串中char首次出现时的位置之前的子字符串\n\n函数签名:\n\nfunc Before(s, char string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.Before("lancet", "")\n\tfmt.Println(s1) //lancet\n\n\ts2 := strutil.Before("github.com/test/lancet", "/")\n\tfmt.Println(s2) //github.com\n\n\ts3 := strutil.Before("github.com/test/lancet", "test")\n\tfmt.Println(s3) // github.com/\n}\n\n\n\n# BeforeLast\n\n截取源字符串中char最后一次出现时的位置之前的子字符串\n\n函数签名:\n\nfunc BeforeLast(s, char string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.BeforeLast("lancet", "")\n\tfmt.Println(s1) //lancet\n\n\ts2 := strutil.BeforeLast("github.com/test/lancet", "/")\n\tfmt.Println(s2) //github.com/test\n\n\ts3 := strutil.BeforeLast("github.com/test/test/lancet", "test")\n\tfmt.Println(s3) //github.com/test/\n}\n\n\n\n# CamelCase\n\n将字符串转换为驼峰式字符串\n\n函数签名:\n\nfunc CamelCase(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.CamelCase("foo_bar")\n\tfmt.Println(s1) //fooBar\n\n\ts2 := strutil.CamelCase("Foo-Bar")\n\tfmt.Println(s2) //fooBar\n\n\ts3 := strutil.CamelCase("Foo&bar")\n\tfmt.Println(s3) //fooBar\n\n\ts4 := strutil.CamelCase("foo bar")\n\tfmt.Println(s4) //fooBar\n}\n\n\n\n# Capitalize\n\n将字符串的第一个字符转换为大写\n\n函数签名:\n\nfunc Capitalize(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.Capitalize("foo")\n\tfmt.Println(s1) //foo\n\n\ts2 := strutil.Capitalize("Foo")\n\tfmt.Println(s2) //foo\n\n\ts3 := strutil.Capitalize("FOo"\n\tfmt.Println(s3) //fOo\n}\n\n\n\n# IsString\n\n检查值的数据类型是否为字符串\n\n函数签名:\n\nfunc IsString(v any) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\tfmt.Println(strutil.IsString("lancet")) //true\n\tfmt.Println(strutil.IsString("")) //true\n\n\tfmt.Println(strutil.IsString(1)) //false\n\tfmt.Println(strutil.IsString("")) //false\n\tfmt.Println(strutil.IsString([]string{})) //false\n}\n\n\n\n# KebabCase\n\n将字符串转换为kebab-case\n\n函数签名:\n\nfunc KebabCase(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.KebabCase("Foo Bar-")\n\tfmt.Println(s1) //foo-bar\n\n\ts2 := strutil.KebabCase("foo_Bar")\n\tfmt.Println(s2) //foo-bar\n\n\ts3 := strutil.KebabCase("fooBar")\n\tfmt.Println(s3) //foo-bar\n\n\ts4 := strutil.KebabCase("__FOO_BAR__")\n\tfmt.Println(s4) //f-o-o-b-a-r\n}\n\n\n\n# LowerFirst\n\n将字符串的第一个字符转换为小写\n\n函数签名:\n\nfunc LowerFirst(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.LowerFirst("foo")\n\tfmt.Println(s1) //foo\n\n\ts2 := strutil.LowerFirst("BAR")\n\tfmt.Println(s2) //bAR\n\n\ts3 := strutil.LowerFirst("FOo")\n\tfmt.Println(s3) //fOo\n\n\ts4 := strutil.LowerFirst("fOo大")\n\tfmt.Println(s4) //fOo大\n}\n\n\n\n# UpperFirst\n\n将字符串的第一个字符转换为大写\n\n函数签名:\n\nfunc UpperFirst(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.UpperFirst("foo")\n\tfmt.Println(s1) //Foo\n\n\ts2 := strutil.UpperFirst("bAR")\n\tfmt.Println(s2) //BAR\n\n\ts3 := strutil.UpperFirst("FOo")\n\tfmt.Println(s3) //FOo\n\n\ts4 := strutil.UpperFirst("fOo大")\n\tfmt.Println(s4) //FOo大\n}\n\n\n\n# PadEnd\n\n如果字符串长度短于size，则在右侧填充字符串\n\n函数签名:\n\nfunc PadEnd(source string, size int, padStr string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.PadEnd("a", 1, "b")\n\tfmt.Println(s1) //a\n\n\ts2 := strutil.PadEnd("a", 2, "b")\n\tfmt.Println(s2) //ab\n\n\ts3 := strutil.PadEnd("abcd", 6, "mno")\n\tfmt.Println(s3) //abcdmn\n\n\ts4 := strutil.PadEnd("abc", 6, "ab")\n\tfmt.Println(s4) //abcaba\n}\n\n\n\n# PadStart\n\n如果字符串长度短于size，则在左侧填充字符串\n\n函数签名:\n\nfunc PadStart(source string, size int, padStr string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.PadStart("a", 1, "b")\n\tfmt.Println(s1) //a\n\n\ts2 := strutil.PadStart("a", 2, "b")\n\tfmt.Println(s2) //ba\n\n\ts3 := strutil.PadStart("abcd", 6, "mno")\n\tfmt.Println(s3) //mnabcd\n\n\ts4 := strutil.PadStart("abc", 6, "ab")\n\tfmt.Println(s4) //abaabc\n}\n\n\n\n# Reverse\n\n返回字符顺序与给定字符串相反的字符串\n\n函数签名:\n\nfunc Reverse(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.ReverseStr("abc")\n\tfmt.Println(s1) //cba\n\n\ts2 := strutil.ReverseStr("12345")\n\tfmt.Println(s2) //54321\n}\n\n\n\n# SnakeCase\n\n将字符串转换为snake_case形式\n\n函数签名:\n\nfunc SnakeCase(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.SnakeCase("Foo Bar-")\n\tfmt.Println(s1) //foo_bar\n\n\ts2 := strutil.SnakeCase("foo_Bar")\n\tfmt.Println(s2) //foo_bar\n\n\ts3 := strutil.SnakeCase("fooBar")\n\tfmt.Println(s3) //foo_bar\n\n\ts4 := strutil.SnakeCase("__FOO_BAR__")\n\tfmt.Println(s4) //f_o_o_b_a_r\n\n\ts5 := strutil.SnakeCase("aBbc-s$@a&%_B.B^C")\n\tfmt.Println(s5) //a_bbc_s_a_b_b_c\n}\n\n\n\n# SplitEx\n\n分割字符串为切片，removeEmptyString参数指定是否去除空字符串\n\n函数签名:\n\nfunc SplitEx(s, sep string, removeEmptyString bool) []string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\tarr1 := strutil.SplitEx(" a b c ", "", true)\n\tfmt.Println(arr1) //[]string{}\n\n\tarr2 := strutil.SplitEx(" a b c ", " ", false)\n\tfmt.Println(arr2) //[]string{"", "a", "b", "c", ""}\n\n\tarr3 := strutil.SplitEx(" a b c ", " ", true)\n\tfmt.Println(arr3) //[]string{"a", "b", "c"}\n\n\tarr4 := strutil.SplitEx(" a = b = c = ", " = ", false)\n\tfmt.Println(arr4) //[]string{" a", "b", "c", ""}\n\n\tarr5 := strutil.SplitEx(" a = b = c = ", " = ", true)\n\tfmt.Println(arr5) //[]string{" a", "b", "c"}\n}\n\n\n\n# Wrap\n\n用另一个字符串包裹一个字符串\n\n函数签名:\n\nfunc Wrap(str string, wrapWith string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.Wrap("ab", "")\n\tfmt.Println(s1) //ab\n\n\ts2 := strutil.Wrap("", "*")\n\tfmt.Println(s2) //""\n\n\ts3 := strutil.Wrap("ab", "*")\n\tfmt.Println(s3) //*ab*\n\n\ts4 := strutil.Wrap("ab", "\\"")\n\tfmt.Println(s4) //\\"ab\\"\n\n\ts5 := strutil.Wrap("ab", "\'")\n\tfmt.Println(s5) //\'ab\'\n}\n\n\n\n# Unwrap\n\n用另一个字符串解开包裹一个字符串\n\n函数签名:\n\nfunc Unwrap(str string, wrapToken string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.Unwrap("ab", "")\n\tfmt.Println(s1) //ab\n\n\ts2 := strutil.Unwrap("ab", "*")\n\tfmt.Println(s2) //ab\n\n\ts3 := strutil.Unwrap("**ab**", "*")\n\tfmt.Println(s3) //*ab*\n\n\ts4 := strutil.Unwrap("*ab", "*")\n\tfmt.Println(s4) //*ab\n\n\ts5 := strutil.Unwrap("***", "**")\n\tfmt.Println(s5) //***\n}\n',normalizedContent:'# strutil\n\nstrutil 包含处理字符串的相关函数。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/strutil/string.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/strutil"\n)\n\n\n\n\n\n# documentation 文档\n\n\n# after\n\n截取源字符串中char首次出现时的位置之后的子字符串\n\n函数签名:\n\nfunc after(s, char string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.after("lancet", "")\n\tfmt.println(s1) //lancet\n\n\ts2 := strutil.after("github.com/test/lancet", "/")\n\tfmt.println(s2) //test/lancet\n\n\ts3 := strutil.after("github.com/test/lancet", "test")\n\tfmt.println(s3) // /lancet\n}\n\n\n\n# afterlast\n\n截取源字符串中char最后一次出现时的位置之后的子字符串\n\n函数签名:\n\nfunc afterlast(s, char string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.afterlast("lancet", "")\n\tfmt.println(s1) //lancet\n\n\ts2 := strutil.afterlast("github.com/test/lancet", "/")\n\tfmt.println(s2) //lancet\n\n\ts3 := strutil.afterlast("github.com/test/test/lancet", "test")\n\tfmt.println(s3) // /lancet\n}\n\n\n\n# before\n\n截取源字符串中char首次出现时的位置之前的子字符串\n\n函数签名:\n\nfunc before(s, char string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.before("lancet", "")\n\tfmt.println(s1) //lancet\n\n\ts2 := strutil.before("github.com/test/lancet", "/")\n\tfmt.println(s2) //github.com\n\n\ts3 := strutil.before("github.com/test/lancet", "test")\n\tfmt.println(s3) // github.com/\n}\n\n\n\n# beforelast\n\n截取源字符串中char最后一次出现时的位置之前的子字符串\n\n函数签名:\n\nfunc beforelast(s, char string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.beforelast("lancet", "")\n\tfmt.println(s1) //lancet\n\n\ts2 := strutil.beforelast("github.com/test/lancet", "/")\n\tfmt.println(s2) //github.com/test\n\n\ts3 := strutil.beforelast("github.com/test/test/lancet", "test")\n\tfmt.println(s3) //github.com/test/\n}\n\n\n\n# camelcase\n\n将字符串转换为驼峰式字符串\n\n函数签名:\n\nfunc camelcase(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.camelcase("foo_bar")\n\tfmt.println(s1) //foobar\n\n\ts2 := strutil.camelcase("foo-bar")\n\tfmt.println(s2) //foobar\n\n\ts3 := strutil.camelcase("foo&bar")\n\tfmt.println(s3) //foobar\n\n\ts4 := strutil.camelcase("foo bar")\n\tfmt.println(s4) //foobar\n}\n\n\n\n# capitalize\n\n将字符串的第一个字符转换为大写\n\n函数签名:\n\nfunc capitalize(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.capitalize("foo")\n\tfmt.println(s1) //foo\n\n\ts2 := strutil.capitalize("foo")\n\tfmt.println(s2) //foo\n\n\ts3 := strutil.capitalize("foo"\n\tfmt.println(s3) //foo\n}\n\n\n\n# isstring\n\n检查值的数据类型是否为字符串\n\n函数签名:\n\nfunc isstring(v any) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\tfmt.println(strutil.isstring("lancet")) //true\n\tfmt.println(strutil.isstring("")) //true\n\n\tfmt.println(strutil.isstring(1)) //false\n\tfmt.println(strutil.isstring("")) //false\n\tfmt.println(strutil.isstring([]string{})) //false\n}\n\n\n\n# kebabcase\n\n将字符串转换为kebab-case\n\n函数签名:\n\nfunc kebabcase(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.kebabcase("foo bar-")\n\tfmt.println(s1) //foo-bar\n\n\ts2 := strutil.kebabcase("foo_bar")\n\tfmt.println(s2) //foo-bar\n\n\ts3 := strutil.kebabcase("foobar")\n\tfmt.println(s3) //foo-bar\n\n\ts4 := strutil.kebabcase("__foo_bar__")\n\tfmt.println(s4) //f-o-o-b-a-r\n}\n\n\n\n# lowerfirst\n\n将字符串的第一个字符转换为小写\n\n函数签名:\n\nfunc lowerfirst(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.lowerfirst("foo")\n\tfmt.println(s1) //foo\n\n\ts2 := strutil.lowerfirst("bar")\n\tfmt.println(s2) //bar\n\n\ts3 := strutil.lowerfirst("foo")\n\tfmt.println(s3) //foo\n\n\ts4 := strutil.lowerfirst("foo大")\n\tfmt.println(s4) //foo大\n}\n\n\n\n# upperfirst\n\n将字符串的第一个字符转换为大写\n\n函数签名:\n\nfunc upperfirst(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.upperfirst("foo")\n\tfmt.println(s1) //foo\n\n\ts2 := strutil.upperfirst("bar")\n\tfmt.println(s2) //bar\n\n\ts3 := strutil.upperfirst("foo")\n\tfmt.println(s3) //foo\n\n\ts4 := strutil.upperfirst("foo大")\n\tfmt.println(s4) //foo大\n}\n\n\n\n# padend\n\n如果字符串长度短于size，则在右侧填充字符串\n\n函数签名:\n\nfunc padend(source string, size int, padstr string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.padend("a", 1, "b")\n\tfmt.println(s1) //a\n\n\ts2 := strutil.padend("a", 2, "b")\n\tfmt.println(s2) //ab\n\n\ts3 := strutil.padend("abcd", 6, "mno")\n\tfmt.println(s3) //abcdmn\n\n\ts4 := strutil.padend("abc", 6, "ab")\n\tfmt.println(s4) //abcaba\n}\n\n\n\n# padstart\n\n如果字符串长度短于size，则在左侧填充字符串\n\n函数签名:\n\nfunc padstart(source string, size int, padstr string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.padstart("a", 1, "b")\n\tfmt.println(s1) //a\n\n\ts2 := strutil.padstart("a", 2, "b")\n\tfmt.println(s2) //ba\n\n\ts3 := strutil.padstart("abcd", 6, "mno")\n\tfmt.println(s3) //mnabcd\n\n\ts4 := strutil.padstart("abc", 6, "ab")\n\tfmt.println(s4) //abaabc\n}\n\n\n\n# reverse\n\n返回字符顺序与给定字符串相反的字符串\n\n函数签名:\n\nfunc reverse(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.reversestr("abc")\n\tfmt.println(s1) //cba\n\n\ts2 := strutil.reversestr("12345")\n\tfmt.println(s2) //54321\n}\n\n\n\n# snakecase\n\n将字符串转换为snake_case形式\n\n函数签名:\n\nfunc snakecase(s string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.snakecase("foo bar-")\n\tfmt.println(s1) //foo_bar\n\n\ts2 := strutil.snakecase("foo_bar")\n\tfmt.println(s2) //foo_bar\n\n\ts3 := strutil.snakecase("foobar")\n\tfmt.println(s3) //foo_bar\n\n\ts4 := strutil.snakecase("__foo_bar__")\n\tfmt.println(s4) //f_o_o_b_a_r\n\n\ts5 := strutil.snakecase("abbc-s$@a&%_b.b^c")\n\tfmt.println(s5) //a_bbc_s_a_b_b_c\n}\n\n\n\n# splitex\n\n分割字符串为切片，removeemptystring参数指定是否去除空字符串\n\n函数签名:\n\nfunc splitex(s, sep string, removeemptystring bool) []string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\tarr1 := strutil.splitex(" a b c ", "", true)\n\tfmt.println(arr1) //[]string{}\n\n\tarr2 := strutil.splitex(" a b c ", " ", false)\n\tfmt.println(arr2) //[]string{"", "a", "b", "c", ""}\n\n\tarr3 := strutil.splitex(" a b c ", " ", true)\n\tfmt.println(arr3) //[]string{"a", "b", "c"}\n\n\tarr4 := strutil.splitex(" a = b = c = ", " = ", false)\n\tfmt.println(arr4) //[]string{" a", "b", "c", ""}\n\n\tarr5 := strutil.splitex(" a = b = c = ", " = ", true)\n\tfmt.println(arr5) //[]string{" a", "b", "c"}\n}\n\n\n\n# wrap\n\n用另一个字符串包裹一个字符串\n\n函数签名:\n\nfunc wrap(str string, wrapwith string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.wrap("ab", "")\n\tfmt.println(s1) //ab\n\n\ts2 := strutil.wrap("", "*")\n\tfmt.println(s2) //""\n\n\ts3 := strutil.wrap("ab", "*")\n\tfmt.println(s3) //*ab*\n\n\ts4 := strutil.wrap("ab", "\\"")\n\tfmt.println(s4) //\\"ab\\"\n\n\ts5 := strutil.wrap("ab", "\'")\n\tfmt.println(s5) //\'ab\'\n}\n\n\n\n# unwrap\n\n用另一个字符串解开包裹一个字符串\n\n函数签名:\n\nfunc unwrap(str string, wraptoken string) string\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/strutil"\n)\n\nfunc main() {\n\ts1 := strutil.unwrap("ab", "")\n\tfmt.println(s1) //ab\n\n\ts2 := strutil.unwrap("ab", "*")\n\tfmt.println(s2) //ab\n\n\ts3 := strutil.unwrap("**ab**", "*")\n\tfmt.println(s3) //*ab*\n\n\ts4 := strutil.unwrap("*ab", "*")\n\tfmt.println(s4) //*ab\n\n\ts5 := strutil.unwrap("***", "**")\n\tfmt.println(s5) //***\n}\n',charsets:{cjk:!0}},{title:"Xerror",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/xerror/",relativePath:"xerror/README.md",key:"v-2df7ad8b",path:"/xerror/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:32},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:108},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:174},{level:3,title:"Unwrap",slug:"unwrap",normalizedTitle:"unwrap",charIndex:181}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 Unwrap",content:'# Xerror\n\nxerror 错误处理逻辑封装\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/xerror/xerror.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/xerror"\n)\n\n\n\n\n\n# 文档\n\n\n# Unwrap\n\n如果err为nil则展开，则它返回一个有效值。 如果err不是nil则Unwrap使用err发生恐慌。\n\n函数签名:\n\nfunc Unwrap[T any](val T, err error) T\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/xerror"\n)\n\nfunc main() {\n\t_, err := strconv.Atoi("4o2")\n\tdefer func() {\n\t\tv := recover()\n\t\tfmt.Println(err.Error()) // err.Error() == v.(*strconv.NumError).Error()\n\t}()\n\n\txerror.Unwrap(strconv.Atoi("4o2"))\n}\n',normalizedContent:'# xerror\n\nxerror 错误处理逻辑封装\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/xerror/xerror.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/xerror"\n)\n\n\n\n\n\n# 文档\n\n\n# unwrap\n\n如果err为nil则展开，则它返回一个有效值。 如果err不是nil则unwrap使用err发生恐慌。\n\n函数签名:\n\nfunc unwrap[t any](val t, err error) t\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/xerror"\n)\n\nfunc main() {\n\t_, err := strconv.atoi("4o2")\n\tdefer func() {\n\t\tv := recover()\n\t\tfmt.println(err.error()) // err.error() == v.(*strconv.numerror).error()\n\t}()\n\n\txerror.unwrap(strconv.atoi("4o2"))\n}\n',charsets:{cjk:!0}},{title:"Validator",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/validator/",relativePath:"validator/README.md",key:"v-a9b572d6",path:"/validator/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:49},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:131},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:200},{level:3,title:"ContainChinese",slug:"containchinese",normalizedTitle:"containchinese",charIndex:207},{level:3,title:"ContainLetter",slug:"containletter",normalizedTitle:"containletter",charIndex:579},{level:3,title:"ContainLower",slug:"containlower",normalizedTitle:"containlower",charIndex:953},{level:3,title:"ContainUpper",slug:"containupper",normalizedTitle:"containupper",charIndex:1319},{level:3,title:"IsAlpha",slug:"isalpha",normalizedTitle:"isalpha",charIndex:1686},{level:3,title:"IsAllUpper",slug:"isallupper",normalizedTitle:"isallupper",charIndex:2017},{level:3,title:"IsAllLower",slug:"isalllower",normalizedTitle:"isalllower",charIndex:2304},{level:3,title:"IsBase64",slug:"isbase64",normalizedTitle:"isbase64",charIndex:2591},{level:3,title:"IsChineseMobile",slug:"ischinesemobile",normalizedTitle:"ischinesemobile",charIndex:2882},{level:3,title:"IsChineseIdNum",slug:"ischineseidnum",normalizedTitle:"ischineseidnum",charIndex:3208},{level:3,title:"IsChinesePhone",slug:"ischinesephone",normalizedTitle:"ischinesephone",charIndex:3528},{level:3,title:"IsCreditCard",slug:"iscreditcard",normalizedTitle:"iscreditcard",charIndex:3849},{level:3,title:"IsDns",slug:"isdns",normalizedTitle:"isdns",charIndex:4165},{level:3,title:"IsEmail",slug:"isemail",normalizedTitle:"isemail",charIndex:4509},{level:3,title:"IsEmptyString",slug:"isemptystring",normalizedTitle:"isemptystring",charIndex:4800},{level:3,title:"IsFloatStr",slug:"isfloatstr",normalizedTitle:"isfloatstr",charIndex:5091},{level:3,title:"IsNumberStr",slug:"isnumberstr",normalizedTitle:"isnumberstr",charIndex:5540},{level:3,title:"IsJSON",slug:"isjson",normalizedTitle:"isjson",charIndex:5998},{level:3,title:"IsRegexMatch",slug:"isregexmatch",normalizedTitle:"isregexmatch",charIndex:6432},{level:3,title:"IsIntStr",slug:"isintstr",normalizedTitle:"isintstr",charIndex:6798},{level:3,title:"IsIp",slug:"isip",normalizedTitle:"isip",charIndex:7138},{level:3,title:"IsIpV4",slug:"isipv4",normalizedTitle:"isipv4",charIndex:7480},{level:3,title:"IsIpV6",slug:"isipv6",normalizedTitle:"isipv6",charIndex:7837},{level:3,title:"IsStrongPassword",slug:"isstrongpassword",normalizedTitle:"isstrongpassword",charIndex:8194},{level:3,title:"IsUrl",slug:"isurl",normalizedTitle:"isurl",charIndex:8759},{level:3,title:"IsWeakPassword",slug:"isweakpassword",normalizedTitle:"isweakpassword",charIndex:9100},{level:3,title:"IsZeroValue",slug:"iszerovalue",normalizedTitle:"iszerovalue",charIndex:9552}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 ContainChinese ContainLetter ContainLower ContainUpper IsAlpha IsAllUpper IsAllLower IsBase64 IsChineseMobile IsChineseIdNum IsChinesePhone IsCreditCard IsDns IsEmail IsEmptyString IsFloatStr IsNumberStr IsJSON IsRegexMatch IsIntStr IsIp IsIpV4 IsIpV6 IsStrongPassword IsUrl IsWeakPassword IsZeroValue",content:'# Validator\n\nvalidator 验证器包，包含常用字符串格式验证函数。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/validator/validator.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/validator"\n)\n\n\n\n\n\n# 文档\n\n\n# ContainChinese\n\n验证字符串是否包含中文字符\n\n函数签名:\n\nfunc ContainChinese(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ContainChinese("你好")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.ContainChinese("你好hello")\n\tfmt.Println(res2) //true\n\n\tres3 := validator.ContainChinese("hello")\n\tfmt.Println(res3) //false\n}\n\n\n\n# ContainLetter\n\n验证字符串是否包含至少一个英文字母\n\n函数签名:\n\nfunc ContainLetter(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ContainLetter("1bc")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.ContainLetter("123")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.ContainLetter("&@#$%^&*")\n\tfmt.Println(res3) //false\n}\n\n\n\n# ContainLower\n\n验证字符串是否包含至少一个英文小写字母\n\n函数签名:\n\nfunc ContainLower(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ContainLower("1bc")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.ContainLower("123")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.ContainLower("1BC")\n\tfmt.Println(res3) //false\n}\n\n\n\n# ContainUpper\n\n验证字符串是否包含至少一个英文大写字母.\n\n函数签名:\n\nfunc ContainUpper(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ContainUpper("1bc")\n\tfmt.Println(res1) //false\n\n\tres2 := validator.ContainUpper("123")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.ContainUpper("1BC")\n\tfmt.Println(res3) //true\n}\n\n\n\n# IsAlpha\n\n验证字符串是否只包含英文字母\n\n函数签名:\n\nfunc IsAlpha(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsAlpha("abc")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsAlpha("1bc")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.IsAlpha("")\n\tfmt.Println(res3) //false\n}\n\n\n\n# IsAllUpper\n\n验证字符串是否全是大写英文字母\n\n函数签名:\n\nfunc IsAllUpper(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsAllUpper("ABC")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsAllUpper("aBC")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsAllLower\n\n验证字符串是否全是小写英文字母\n\n函数签名:\n\nfunc IsAllLower(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsAllLower("abc")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsAllLower("abC")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsBase64\n\n验证字符串是否是base64编码\n\n函数签名:\n\nfunc IsBase64(base64 string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsBase64("aGVsbG8=")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsBase64("123456")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsChineseMobile\n\n验证字符串是否是中国手机号码\n\n函数签名:\n\nfunc IsChineseMobile(mobileNum string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsChineseMobile("13263527980")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsChineseMobile("434324324")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsChineseIdNum\n\n验证字符串是否是中国身份证号码\n\n函数签名:\n\nfunc IsChineseIdNum(id string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsChineseIdNum("210911192105130715")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsChineseIdNum("123456")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsChinesePhone\n\n验证字符串是否是中国电话座机号码\n\n函数签名:\n\nfunc IsChinesePhone(phone string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsChinesePhone("010-32116675")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsChinesePhone("123-87562")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsCreditCard\n\n验证字符串是否是信用卡号码\n\n函数签名:\n\nfunc IsCreditCard(creditCart string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsCreditCard("4111111111111111")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsCreditCard("123456")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsDns\n\n验证字符串是否是有效dns\n\n函数签名:\n\nfunc IsDns(dns string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsDns("abc.com")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsDns("a.b.com")\n\tfmt.Println(res2) //false\n\n\tres3 := validator.IsDns("http://abc.com")\n\tfmt.Println(res3) //false\n}\n\n\n\n# IsEmail\n\n验证字符串是否是有效电子邮件地址\n\n函数签名:\n\nfunc IsEmail(email string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsEmail("abc@xyz.com")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsEmail("a.b@@com")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsEmptyString\n\n验证字符串是否是空字符串\n\n函数签名:\n\nfunc IsEmptyString(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.IsEmptyString("")\n\tfmt.Println(res1) //true\n\n\tres2 := validator.IsEmptyString("abc")\n\tfmt.Println(res2) //false\n}\n\n\n\n# IsFloatStr\n\n验证字符串是否是可以转换为浮点数\n\n函数签名:\n\nfunc IsFloatStr(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsFloatStr("")) //false\n\tfmt.Println(validator.IsFloatStr("12a")) //false\n\tfmt.Println(validator.IsFloatStr("3.")) //true\n\tfmt.Println(validator.IsFloatStr("+3.")) //true\n\tfmt.Println(validator.IsFloatStr("-3.")) //true\n\tfmt.Println(validator.IsFloatStr("12")) //true\n}\n\n\n\n# IsNumberStr\n\n验证字符串是否是可以转换为数字\n\n函数签名:\n\nfunc IsNumberStr(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsNumberStr("")) //false\n\tfmt.Println(validator.IsNumberStr("12a")) //false\n\tfmt.Println(validator.IsNumberStr("3.")) //true\n\tfmt.Println(validator.IsNumberStr("+3.")) //true\n\tfmt.Println(validator.IsNumberStr("-3.")) //true\n\tfmt.Println(validator.IsNumberStr("+3e2")) //true\n}\n\n\n\n# IsJSON\n\n验证字符串是否是有效json\n\n函数签名:\n\nfunc IsJSON(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsJSON("")) //false\n\tfmt.Println(validator.IsJSON("abc")) //false\n\tfmt.Println(validator.IsJSON("{}")) //true\n\tfmt.Println(validator.IsJSON("[]")) //true\n\tfmt.Println(validator.IsJSON("123")) //true\n\tfmt.Println(validator.IsJSON("{\\"name\\": \\"test\\"}")) //true\n}\n\n\n\n# IsRegexMatch\n\n验证字符串是否可以匹配正则表达式\n\n函数签名:\n\nfunc IsRegexMatch(s, regex string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsRegexMatch("abc", `^[a-zA-Z]+$`)) //true\n\tfmt.Println(validator.IsRegexMatch("1ab", `^[a-zA-Z]+$`)) //false\n\tfmt.Println(validator.IsRegexMatch("", `^[a-zA-Z]+$`)) //false\n}\n\n\n\n# IsIntStr\n\n验证字符串是否是可以转换为整数\n\n函数签名:\n\nfunc IsIntStr(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsIntStr("+3")) //true\n\tfmt.Println(validator.IsIntStr("-3")) //true\n\tfmt.Println(validator.IsIntStr("3.")) //false\n\tfmt.Println(validator.IsIntStr("abc")) //false\n}\n\n\n\n# IsIp\n\n验证字符串是否是ip地址\n\n函数签名:\n\nfunc IsIp(ipstr string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsIp("127.0.0.1")) //true\n\tfmt.Println(validator.IsIp("::0:0:0:0:0:0:1")) //true\n\tfmt.Println(validator.IsIp("127.0.0")) //false\n\tfmt.Println(validator.IsIp("127")) //false\n}\n\n\n\n# IsIpV4\n\n验证字符串是否是ipv4地址\n\n函数签名:\n\nfunc IsIpV4(ipstr string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsIpV4("127.0.0.1")) //true\n\tfmt.Println(validator.IsIpV4("::0:0:0:0:0:0:1")) //false\n\tfmt.Println(validator.IsIpV4("127.0.0")) //false\n\tfmt.Println(validator.IsIpV4("127")) //false\n}\n\n\n\n# IsIpV6\n\n验证字符串是否是ipv6地址\n\n函数签名:\n\nfunc IsIpV6(ipstr string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsIpV6("127.0.0.1")) //false\n\tfmt.Println(validator.IsIpV6("::0:0:0:0:0:0:1")) //true\n\tfmt.Println(validator.IsIpV6("127.0.0")) //false\n\tfmt.Println(validator.IsIpV6("127")) //false\n}\n\n\n\n# IsStrongPassword\n\n验证字符串是否是强密码：(alpha(lower+upper) + number + special chars(!@#$%^&*()?><))\n\n函数签名:\n\nfunc IsStrongPassword(password string, length int) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsStrongPassword("abc", 3)) //false\n\tfmt.Println(validator.IsStrongPassword("abc123", 6)) //false\n\tfmt.Println(validator.IsStrongPassword("abcABC", 6)) //false\n\tfmt.Println(validator.IsStrongPassword("abcABC123@#$", 16)) //false\n\tfmt.Println(validator.IsStrongPassword("abcABC123@#$", 12)) //true\n}\n\n\n\n# IsUrl\n\n验证字符串是否是url\n\n函数签名:\n\nfunc IsUrl(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsUrl("http://abc.com")) //true\n\tfmt.Println(validator.IsUrl("abc.com")) //true\n\tfmt.Println(validator.IsUrl("a.b.com")) //true\n\tfmt.Println(validator.IsUrl("abc")) //false\n}\n\n\n\n# IsWeakPassword\n\n验证字符串是否是弱密码：（only letter or only number or letter + number） .\n\n函数签名:\n\nfunc IsWeakPassword(password string, length int) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsWeakPassword("abc")) //true\n\tfmt.Println(validator.IsWeakPassword("123")) //true\n\tfmt.Println(validator.IsWeakPassword("abc123")) //true\n\tfmt.Println(validator.IsWeakPassword("abc123@#$")) //false\n}\n\n\n\n# IsZeroValue\n\n判断传入的参数值是否为零值\n\n函数签名:\n\nfunc IsZeroValue(value any) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.Println(validator.IsZeroValue(nil)) //true\n\tfmt.Println(validator.IsZeroValue(0)) //true\n\tfmt.Println(validator.IsZeroValue("")) //true\n\tfmt.Println(validator.IsZeroValue([]int)) //true\n\tfmt.Println(validator.IsZeroValue(interface{})) //true\n\n\tfmt.Println(validator.IsZeroValue("0")) //false\n\tfmt.Println(validator.IsZeroValue("nil")) //false\n}\n',normalizedContent:'# validator\n\nvalidator 验证器包，包含常用字符串格式验证函数。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/validator/validator.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/validator"\n)\n\n\n\n\n\n# 文档\n\n\n# containchinese\n\n验证字符串是否包含中文字符\n\n函数签名:\n\nfunc containchinese(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.containchinese("你好")\n\tfmt.println(res1) //true\n\n\tres2 := validator.containchinese("你好hello")\n\tfmt.println(res2) //true\n\n\tres3 := validator.containchinese("hello")\n\tfmt.println(res3) //false\n}\n\n\n\n# containletter\n\n验证字符串是否包含至少一个英文字母\n\n函数签名:\n\nfunc containletter(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.containletter("1bc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.containletter("123")\n\tfmt.println(res2) //false\n\n\tres3 := validator.containletter("&@#$%^&*")\n\tfmt.println(res3) //false\n}\n\n\n\n# containlower\n\n验证字符串是否包含至少一个英文小写字母\n\n函数签名:\n\nfunc containlower(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.containlower("1bc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.containlower("123")\n\tfmt.println(res2) //false\n\n\tres3 := validator.containlower("1bc")\n\tfmt.println(res3) //false\n}\n\n\n\n# containupper\n\n验证字符串是否包含至少一个英文大写字母.\n\n函数签名:\n\nfunc containupper(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.containupper("1bc")\n\tfmt.println(res1) //false\n\n\tres2 := validator.containupper("123")\n\tfmt.println(res2) //false\n\n\tres3 := validator.containupper("1bc")\n\tfmt.println(res3) //true\n}\n\n\n\n# isalpha\n\n验证字符串是否只包含英文字母\n\n函数签名:\n\nfunc isalpha(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isalpha("abc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isalpha("1bc")\n\tfmt.println(res2) //false\n\n\tres3 := validator.isalpha("")\n\tfmt.println(res3) //false\n}\n\n\n\n# isallupper\n\n验证字符串是否全是大写英文字母\n\n函数签名:\n\nfunc isallupper(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isallupper("abc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isallupper("abc")\n\tfmt.println(res2) //false\n}\n\n\n\n# isalllower\n\n验证字符串是否全是小写英文字母\n\n函数签名:\n\nfunc isalllower(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isalllower("abc")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isalllower("abc")\n\tfmt.println(res2) //false\n}\n\n\n\n# isbase64\n\n验证字符串是否是base64编码\n\n函数签名:\n\nfunc isbase64(base64 string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isbase64("agvsbg8=")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isbase64("123456")\n\tfmt.println(res2) //false\n}\n\n\n\n# ischinesemobile\n\n验证字符串是否是中国手机号码\n\n函数签名:\n\nfunc ischinesemobile(mobilenum string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ischinesemobile("13263527980")\n\tfmt.println(res1) //true\n\n\tres2 := validator.ischinesemobile("434324324")\n\tfmt.println(res2) //false\n}\n\n\n\n# ischineseidnum\n\n验证字符串是否是中国身份证号码\n\n函数签名:\n\nfunc ischineseidnum(id string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ischineseidnum("210911192105130715")\n\tfmt.println(res1) //true\n\n\tres2 := validator.ischineseidnum("123456")\n\tfmt.println(res2) //false\n}\n\n\n\n# ischinesephone\n\n验证字符串是否是中国电话座机号码\n\n函数签名:\n\nfunc ischinesephone(phone string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.ischinesephone("010-32116675")\n\tfmt.println(res1) //true\n\n\tres2 := validator.ischinesephone("123-87562")\n\tfmt.println(res2) //false\n}\n\n\n\n# iscreditcard\n\n验证字符串是否是信用卡号码\n\n函数签名:\n\nfunc iscreditcard(creditcart string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.iscreditcard("4111111111111111")\n\tfmt.println(res1) //true\n\n\tres2 := validator.iscreditcard("123456")\n\tfmt.println(res2) //false\n}\n\n\n\n# isdns\n\n验证字符串是否是有效dns\n\n函数签名:\n\nfunc isdns(dns string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isdns("abc.com")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isdns("a.b.com")\n\tfmt.println(res2) //false\n\n\tres3 := validator.isdns("http://abc.com")\n\tfmt.println(res3) //false\n}\n\n\n\n# isemail\n\n验证字符串是否是有效电子邮件地址\n\n函数签名:\n\nfunc isemail(email string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isemail("abc@xyz.com")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isemail("a.b@@com")\n\tfmt.println(res2) //false\n}\n\n\n\n# isemptystring\n\n验证字符串是否是空字符串\n\n函数签名:\n\nfunc isemptystring(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tres1 := validator.isemptystring("")\n\tfmt.println(res1) //true\n\n\tres2 := validator.isemptystring("abc")\n\tfmt.println(res2) //false\n}\n\n\n\n# isfloatstr\n\n验证字符串是否是可以转换为浮点数\n\n函数签名:\n\nfunc isfloatstr(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isfloatstr("")) //false\n\tfmt.println(validator.isfloatstr("12a")) //false\n\tfmt.println(validator.isfloatstr("3.")) //true\n\tfmt.println(validator.isfloatstr("+3.")) //true\n\tfmt.println(validator.isfloatstr("-3.")) //true\n\tfmt.println(validator.isfloatstr("12")) //true\n}\n\n\n\n# isnumberstr\n\n验证字符串是否是可以转换为数字\n\n函数签名:\n\nfunc isnumberstr(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isnumberstr("")) //false\n\tfmt.println(validator.isnumberstr("12a")) //false\n\tfmt.println(validator.isnumberstr("3.")) //true\n\tfmt.println(validator.isnumberstr("+3.")) //true\n\tfmt.println(validator.isnumberstr("-3.")) //true\n\tfmt.println(validator.isnumberstr("+3e2")) //true\n}\n\n\n\n# isjson\n\n验证字符串是否是有效json\n\n函数签名:\n\nfunc isjson(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isjson("")) //false\n\tfmt.println(validator.isjson("abc")) //false\n\tfmt.println(validator.isjson("{}")) //true\n\tfmt.println(validator.isjson("[]")) //true\n\tfmt.println(validator.isjson("123")) //true\n\tfmt.println(validator.isjson("{\\"name\\": \\"test\\"}")) //true\n}\n\n\n\n# isregexmatch\n\n验证字符串是否可以匹配正则表达式\n\n函数签名:\n\nfunc isregexmatch(s, regex string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isregexmatch("abc", `^[a-za-z]+$`)) //true\n\tfmt.println(validator.isregexmatch("1ab", `^[a-za-z]+$`)) //false\n\tfmt.println(validator.isregexmatch("", `^[a-za-z]+$`)) //false\n}\n\n\n\n# isintstr\n\n验证字符串是否是可以转换为整数\n\n函数签名:\n\nfunc isintstr(s string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isintstr("+3")) //true\n\tfmt.println(validator.isintstr("-3")) //true\n\tfmt.println(validator.isintstr("3.")) //false\n\tfmt.println(validator.isintstr("abc")) //false\n}\n\n\n\n# isip\n\n验证字符串是否是ip地址\n\n函数签名:\n\nfunc isip(ipstr string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isip("127.0.0.1")) //true\n\tfmt.println(validator.isip("::0:0:0:0:0:0:1")) //true\n\tfmt.println(validator.isip("127.0.0")) //false\n\tfmt.println(validator.isip("127")) //false\n}\n\n\n\n# isipv4\n\n验证字符串是否是ipv4地址\n\n函数签名:\n\nfunc isipv4(ipstr string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isipv4("127.0.0.1")) //true\n\tfmt.println(validator.isipv4("::0:0:0:0:0:0:1")) //false\n\tfmt.println(validator.isipv4("127.0.0")) //false\n\tfmt.println(validator.isipv4("127")) //false\n}\n\n\n\n# isipv6\n\n验证字符串是否是ipv6地址\n\n函数签名:\n\nfunc isipv6(ipstr string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isipv6("127.0.0.1")) //false\n\tfmt.println(validator.isipv6("::0:0:0:0:0:0:1")) //true\n\tfmt.println(validator.isipv6("127.0.0")) //false\n\tfmt.println(validator.isipv6("127")) //false\n}\n\n\n\n# isstrongpassword\n\n验证字符串是否是强密码：(alpha(lower+upper) + number + special chars(!@#$%^&*()?><))\n\n函数签名:\n\nfunc isstrongpassword(password string, length int) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isstrongpassword("abc", 3)) //false\n\tfmt.println(validator.isstrongpassword("abc123", 6)) //false\n\tfmt.println(validator.isstrongpassword("abcabc", 6)) //false\n\tfmt.println(validator.isstrongpassword("abcabc123@#$", 16)) //false\n\tfmt.println(validator.isstrongpassword("abcabc123@#$", 12)) //true\n}\n\n\n\n# isurl\n\n验证字符串是否是url\n\n函数签名:\n\nfunc isurl(str string) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isurl("http://abc.com")) //true\n\tfmt.println(validator.isurl("abc.com")) //true\n\tfmt.println(validator.isurl("a.b.com")) //true\n\tfmt.println(validator.isurl("abc")) //false\n}\n\n\n\n# isweakpassword\n\n验证字符串是否是弱密码：（only letter or only number or letter + number） .\n\n函数签名:\n\nfunc isweakpassword(password string, length int) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.isweakpassword("abc")) //true\n\tfmt.println(validator.isweakpassword("123")) //true\n\tfmt.println(validator.isweakpassword("abc123")) //true\n\tfmt.println(validator.isweakpassword("abc123@#$")) //false\n}\n\n\n\n# iszerovalue\n\n判断传入的参数值是否为零值\n\n函数签名:\n\nfunc iszerovalue(value any) bool\n\n\n例子:\n\nimport (\n\t"fmt"\n\t"github.com/duke-git/lancet/v2/validator"\n)\n\nfunc main() {\n\tfmt.println(validator.iszerovalue(nil)) //true\n\tfmt.println(validator.iszerovalue(0)) //true\n\tfmt.println(validator.iszerovalue("")) //true\n\tfmt.println(validator.iszerovalue([]int)) //true\n\tfmt.println(validator.iszerovalue(interface{})) //true\n\n\tfmt.println(validator.iszerovalue("0")) //false\n\tfmt.println(validator.iszerovalue("nil")) //false\n}\n',charsets:{cjk:!0}},{title:"Netutil",frontmatter:{sidebarDepth:3,sidebar:"auto"},regularPath:"/netutil/",relativePath:"netutil/README.md",key:"v-20b2563b",path:"/netutil/",headers:[{level:2,title:"源码:",slug:"源码",normalizedTitle:"源码:",charIndex:51},{level:2,title:"用法:",slug:"用法",normalizedTitle:"用法:",charIndex:262},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:329},{level:3,title:"ConvertMapToQueryString",slug:"convertmaptoquerystring",normalizedTitle:"convertmaptoquerystring",charIndex:336},{level:3,title:"EncodeUrl",slug:"encodeurl",normalizedTitle:"encodeurl",charIndex:685},{level:3,title:"GetInternalIp",slug:"getinternalip",normalizedTitle:"getinternalip",charIndex:1074},{level:3,title:"GetIps",slug:"getips",normalizedTitle:"getips",charIndex:1349},{level:3,title:"GetMacAddrs",slug:"getmacaddrs",normalizedTitle:"getmacaddrs",charIndex:1573},{level:3,title:"GetPublicIpInfo",slug:"getpublicipinfo",normalizedTitle:"getpublicipinfo",charIndex:1800},{level:3,title:"GetRequestPublicIp",slug:"getrequestpublicip",normalizedTitle:"getrequestpublicip",charIndex:2567},{level:3,title:"IsPublicIP",slug:"ispublicip",normalizedTitle:"ispublicip",charIndex:3170},{level:3,title:"IsInternalIP",slug:"isinternalip",normalizedTitle:"isinternalip",charIndex:3512},{level:3,title:"HttpRequest",slug:"httprequest",normalizedTitle:"httprequest",charIndex:3862},{level:3,title:"HttpClient",slug:"httpclient",normalizedTitle:"httpclient",charIndex:4511},{level:3,title:"SendRequest",slug:"sendrequest",normalizedTitle:"sendrequest",charIndex:5276},{level:3,title:"DecodeResponse",slug:"decoderesponse",normalizedTitle:"decoderesponse",charIndex:5967},{level:3,title:"StructToUrlValues",slug:"structtourlvalues",normalizedTitle:"structtourlvalues",charIndex:6778},{level:3,title:"HttpGet (Deprecated: use SendRequest for replacement)",slug:"httpget-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httpget (deprecated: use sendrequest for replacement)",charIndex:7280},{level:3,title:"HttpPost (Deprecated: use SendRequest for replacement)",slug:"httppost-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httppost (deprecated: use sendrequest for replacement)",charIndex:8008},{level:3,title:"HttpPut (Deprecated: use SendRequest for replacement)",slug:"httpput-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httpput (deprecated: use sendrequest for replacement)",charIndex:8927},{level:3,title:"HttpDelete (Deprecated: use SendRequest for replacement)",slug:"httpdelete-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httpdelete (deprecated: use sendrequest for replacement)",charIndex:9875},{level:3,title:"HttpPatch (Deprecated: use SendRequest for replacement)",slug:"httppatch-deprecated-use-sendrequest-for-replacement",normalizedTitle:"httppatch (deprecated: use sendrequest for replacement)",charIndex:10552},{level:3,title:"ParseHttpResponse",slug:"parsehttpresponse",normalizedTitle:"parsehttpresponse",charIndex:11510}],lastUpdated:"2022/9/29 下午1:53:14",lastUpdatedTimestamp:1664430794e3,headersStr:"源码: 用法: 文档 ConvertMapToQueryString EncodeUrl GetInternalIp GetIps GetMacAddrs GetPublicIpInfo GetRequestPublicIp IsPublicIP IsInternalIP HttpRequest HttpClient SendRequest DecodeResponse StructToUrlValues HttpGet (Deprecated: use SendRequest for replacement) HttpPost (Deprecated: use SendRequest for replacement) HttpPut (Deprecated: use SendRequest for replacement) HttpDelete (Deprecated: use SendRequest for replacement) HttpPatch (Deprecated: use SendRequest for replacement) ParseHttpResponse",content:'# Netutil\n\nnetutil 网络包支持获取 ip 地址，发送 http 请求。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/netutil/net.go\n\n * https://github.com/duke-git/lancet/blob/main/netutil/http_client.go\n\n * https://github.com/duke-git/lancet/blob/main/netutil/http.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\n\n\n\n\n# 文档\n\n\n# ConvertMapToQueryString\n\n将map转换成http查询字符串.\n\n函数签名:\n\nfunc ConvertMapToQueryString(param map[string]any) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tvar m = map[string]any{\n\t\t"c": 3,\n\t\t"a": 1,\n\t\t"b": 2,\n\t}\n\tqs := netutil.ConvertMapToQueryString(m)\n\n\tfmt.Println(qs) //a=1&b=2&c=3\n}\n\n\n\n# EncodeUrl\n\n编码url query string的值\n\n函数签名:\n\nfunc EncodeUrl(urlStr string) (string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turlAddr := "http://www.lancet.com?a=1&b=[2]"\n\tencodedUrl, err := netutil.EncodeUrl(urlAddr)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(encodedUrl) //http://www.lancet.com?a=1&b=%5B2%5D\n}\n\n\n\n# GetInternalIp\n\n获取内部ip\n\n函数签名:\n\nfunc GetInternalIp() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tinternalIp := netutil.GetInternalIp()\n\tip := net.ParseIP(internalIp)\n\n\tfmt.Println(ip) //192.168.1.9\n}\n\n\n\n# GetIps\n\n获取ipv4地址列表\n\n函数签名:\n\nfunc GetIps() []string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tips := netutil.GetIps()\n\tfmt.Println(ips) //[192.168.1.9]\n}\n\n\n\n# GetMacAddrs\n\n获取mac地址列\n\n函数签名:\n\nfunc GetMacAddrs() []string {\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\taddrs := netutil.GetMacAddrs()\n\tfmt.Println(addrs)\n}\n\n\n\n# GetPublicIpInfo\n\n获取公网ip信息\n\n函数签名:\n\nfunc GetPublicIpInfo() (*PublicIpInfo, error)\ntype PublicIpInfo struct {\n\tStatus      string  `json:"status"`\n\tCountry     string  `json:"country"`\n\tCountryCode string  `json:"countryCode"`\n\tRegion      string  `json:"region"`\n\tRegionName  string  `json:"regionName"`\n\tCity        string  `json:"city"`\n\tLat         float64 `json:"lat"`\n\tLon         float64 `json:"lon"`\n\tIsp         string  `json:"isp"`\n\tOrg         string  `json:"org"`\n\tAs          string  `json:"as"`\n\tIp          string  `json:"query"`\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tpublicIpInfo, err := netutil.GetPublicIpInfo()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(publicIpInfo)\n}\n\n\n\n# GetRequestPublicIp\n\n获取http请求ip\n\n函数签名:\n\nfunc GetRequestPublicIp(req *http.Request) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip := "36.112.24.10"\n\n\trequest1 := http.Request{\n\t\tMethod: "GET",\n\t\tHeader: http.Header{\n\t\t\t"X-Forwarded-For": {ip},\n\t\t},\n\t}\n\tpublicIp1 := netutil.GetRequestPublicIp(&request1)\n\tfmt.Println(publicIp1) //36.112.24.10\n\n\trequest2 := http.Request{\n\t\tMethod: "GET",\n\t\tHeader: http.Header{\n\t\t\t"X-Real-Ip": {ip},\n\t\t},\n\t}\n\tpublicIp2 := netutil.GetRequestPublicIp(&request2)\n\tfmt.Println(publicIp2) //36.112.24.10\n}\n\n\n\n# IsPublicIP\n\n判断ip是否是公共ip\n\n函数签名:\n\nfunc IsPublicIP(IP net.IP) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip1 := net.ParseIP("192.168.0.1")\n\tip2 := net.ParseIP("36.112.24.10")\n\n\tfmt.Println(netutil.IsPublicIP(ip1)) //false\n\tfmt.Println(netutil.IsPublicIP(ip2)) //true\n}\n\n\n\n# IsInternalIP\n\n判断ip是否是局域网ip.\n\n函数签名:\n\nfunc IsInternalIP(IP net.IP) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip1 := net.ParseIP("127.0.0.1")\n\tip2 := net.ParseIP("36.112.24.10")\n\n\tfmt.Println(netutil.IsInternalIP(ip1)) //true\n\tfmt.Println(netutil.IsInternalIP(ip2)) //false\n}\n\n\n\n# HttpRequest\n\nHttpRequest用于抽象HTTP请求实体的结构\n\n函数签名:\n\ntype HttpRequest struct {\n\tRawURL      string\n\tMethod      string\n\tHeaders     http.Header\n\tQueryParams url.Values\n\tFormData    url.Values\n\tBody        []byte\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\theader := http.Header{}\n\theader.Add("Content-Type", "multipart/form-data")\n\n\tpostData := url.Values{}\n\tpostData.Add("userId", "1")\n\tpostData.Add("title", "testItem")\n\n\trequest := &netutil.HttpRequest{\n\t\tRawURL:   "https://jsonplaceholder.typicode.com/todos",\n\t\tMethod:   "POST",\n\t\tHeaders:  header,\n\t\tFormData: postData,\n\t}\n}\n\n\n\n# HttpClient\n\nHttpClient是用于发送HTTP请求的结构体。它可以用一些配置参数或无配置实例化.\n\n函数签名:\n\ntype HttpClient struct {\n\t*http.Client\n\tTLS     *tls.Config\n\tRequest *http.Request\n\tConfig  HttpClientConfig\n}\n\ntype HttpClientConfig struct {\n\tSSLEnabled       bool\n\tTLSConfig        *tls.Config\n\tCompressed       bool\n\tHandshakeTimeout time.Duration\n\tResponseTimeout  time.Duration\n\tVerbose          bool\n}\n\nfunc NewHttpClient() *HttpClient\n\nfunc NewHttpClientWithConfig(config *HttpClientConfig) *HttpClient\n\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\thttpClientCfg := netutil.HttpClientConfig{\n\t\tSSLEnabled: true,\n\t\tHandshakeTimeout:10 * time.Second\n\t}\n\thttpClient := netutil.NewHttpClientWithConfig(&httpClientCfg)\n}\n\n\n\n# SendRequest\n\nHttpClient发送http请求\n\n函数签名:\n\nfunc (client *HttpClient) SendRequest(request *HttpRequest) (*http.Response, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\trequest := &netutil.HttpRequest{\n\t\tRawURL: "https://jsonplaceholder.typicode.com/todos/1",\n\t\tMethod: "GET",\n\t}\n\n\thttpClient := netutil.NewHttpClient()\n\tresp, err := httpClient.SendRequest(request)\n\tif err != nil || resp.StatusCode != 200 {\n\t\tlog.Fatal(err)\n\t}\n\n\ttype Todo struct {\n\t\tUserId    int    `json:"userId"`\n\t\tId        int    `json:"id"`\n\t\tTitle     string `json:"title"`\n\t\tCompleted bool   `json:"completed"`\n\t}\n\n\tvar todo Todo\n\thttpClient.DecodeResponse(resp, &todo)\n\n\tfmt.Println(todo.Id) //1\n}\n\n\n\n# DecodeResponse\n\n解析http响应体到目标结构体\n\n函数签名:\n\nfunc (client *HttpClient) DecodeResponse(resp *http.Response, target any) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\trequest := &netutil.HttpRequest{\n\t\tRawURL: "https://jsonplaceholder.typicode.com/todos/1",\n\t\tMethod: "GET",\n\t}\n\n\thttpClient := netutil.NewHttpClient()\n\tresp, err := httpClient.SendRequest(request)\n\tif err != nil || resp.StatusCode != 200 {\n\t\tlog.Fatal(err)\n\t}\n\n\ttype Todo struct {\n\t\tUserId    int    `json:"userId"`\n\t\tId        int    `json:"id"`\n\t\tTitle     string `json:"title"`\n\t\tCompleted bool   `json:"completed"`\n\t}\n\n\tvar todo Todo\n\thttpClient.DecodeResponse(resp, &todo)\n\n\tfmt.Println(todo.Id) //1\n}\n\n\n\n# StructToUrlValues\n\n将结构体转为url values, 仅转化结构体导出字段并且包含`json` tag.\n\n函数签名:\n\nfunc StructToUrlValues(targetStruct any) url.Values\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\ttype TodoQuery struct {\n\t\tId     int `json:"id"`\n\t\tUserId int `json:"userId"`\n\t}\n\ttodoQuery := TodoQuery{\n\t\tId:     1,\n\t\tUserId: 2,\n\t}\n\ttodoValues := netutil.StructToUrlValues(todoQuery)\n\n\tfmt.Println(todoValues.Get("id")) //1\n\tfmt.Println(todoValues.Get("userId")) //2\n}\n\n\n\n# HttpGet (Deprecated: use SendRequest for replacement)\n\n发送http get请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.Header或者map[string]string\n// params[1] http查询字符串，类型必须是url.Values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.Client\nfunc HttpGet(url string, params ...any) (*http.Response, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\n\tresp, err := netutil.HttpGet(url, header)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# HttpPost (Deprecated: use SendRequest for replacement)\n\n发送http post请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.Header或者map[string]string\n// params[1] http查询字符串，类型必须是url.Values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.Client\nfunc HttpPost(url string, params ...any) (*http.Response, error)\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\ttype Todo struct {\n\t\tUserId int    `json:"userId"`\n\t\tTitle  string `json:"title"`\n\t}\n\ttodo := Todo{1, "TestAddToDo"}\n\tbodyParams, _ := json.Marshal(todo)\n\n\tresp, err := netutil.HttpPost(url, header, nil, bodyParams)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# HttpPut (Deprecated: use SendRequest for replacement)\n\n发送http put请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.Header或者map[string]string\n// params[1] http查询字符串，类型必须是url.Values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.Client\nfunc HttpPut(url string, params ...any) (*http.Response, error)\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\ttype Todo struct {\n\t\tId     int    `json:"id"`\n\t\tUserId int    `json:"userId"`\n\t\tTitle  string `json:"title"`\n\t}\n\ttodo := Todo{1, 1, "TestPutToDo"}\n\tbodyParams, _ := json.Marshal(todo)\n\n\tresp, err := netutil.HttpPut(url, header, nil, bodyParams)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# HttpDelete (Deprecated: use SendRequest for replacement)\n\n发送http delete请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.Header或者map[string]string\n// params[1] http查询字符串，类型必须是url.Values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.Client\nfunc HttpDelete(url string, params ...any) (*http.Response, error)\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\tresp, err := netutil.HttpDelete(url)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# HttpPatch (Deprecated: use SendRequest for replacement)\n\n发送http patch请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.Header或者map[string]string\n// params[1] http查询字符串，类型必须是url.Values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.Client\nfunc HttpPatch(url string, params ...any) (*http.Response, error)\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\ttype Todo struct {\n\t\tId     int    `json:"id"`\n\t\tUserId int    `json:"userId"`\n\t\tTitle  string `json:"title"`\n\t}\n\ttodo := Todo{1, 1, "TestPatchToDo"}\n\tbodyParams, _ := json.Marshal(todo)\n\n\tresp, err := netutil.HttpPatch(url, header, nil, bodyParams)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(body)\n}\n\n\n\n# ParseHttpResponse\n\n将http请求响应解码成特定struct值\n\n函数签名:\n\nfunc ParseHttpResponse(resp *http.Response, obj any) error\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"Content-Type": "application/json",\n\t}\n\n\tresp, err := netutil.HttpGet(url, header)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\ttype Todo struct {\n\t\tId        int    `json:"id"`\n\t\tUserId    int    `json:"userId"`\n\t\tTitle     string `json:"title"`\n\t\tCompleted bool   `json:"completed"`\n\t}\n\n\ttoDoResp := &Todo{}\n\terr = netutil.ParseHttpResponse(resp, toDoResp)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(toDoResp)\n}\n',normalizedContent:'# netutil\n\nnetutil 网络包支持获取 ip 地址，发送 http 请求。\n\n\n\n\n# 源码:\n\n * https://github.com/duke-git/lancet/blob/main/netutil/net.go\n\n * https://github.com/duke-git/lancet/blob/main/netutil/http_client.go\n\n * https://github.com/duke-git/lancet/blob/main/netutil/http.go\n\n\n\n\n# 用法:\n\nimport (\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\n\n\n\n\n# 文档\n\n\n# convertmaptoquerystring\n\n将map转换成http查询字符串.\n\n函数签名:\n\nfunc convertmaptoquerystring(param map[string]any) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tvar m = map[string]any{\n\t\t"c": 3,\n\t\t"a": 1,\n\t\t"b": 2,\n\t}\n\tqs := netutil.convertmaptoquerystring(m)\n\n\tfmt.println(qs) //a=1&b=2&c=3\n}\n\n\n\n# encodeurl\n\n编码url query string的值\n\n函数签名:\n\nfunc encodeurl(urlstr string) (string, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turladdr := "http://www.lancet.com?a=1&b=[2]"\n\tencodedurl, err := netutil.encodeurl(urladdr)\n\tif err != nil {\n\t\tfmt.println(err)\n\t}\n\tfmt.println(encodedurl) //http://www.lancet.com?a=1&b=%5b2%5d\n}\n\n\n\n# getinternalip\n\n获取内部ip\n\n函数签名:\n\nfunc getinternalip() string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tinternalip := netutil.getinternalip()\n\tip := net.parseip(internalip)\n\n\tfmt.println(ip) //192.168.1.9\n}\n\n\n\n# getips\n\n获取ipv4地址列表\n\n函数签名:\n\nfunc getips() []string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tips := netutil.getips()\n\tfmt.println(ips) //[192.168.1.9]\n}\n\n\n\n# getmacaddrs\n\n获取mac地址列\n\n函数签名:\n\nfunc getmacaddrs() []string {\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\taddrs := netutil.getmacaddrs()\n\tfmt.println(addrs)\n}\n\n\n\n# getpublicipinfo\n\n获取公网ip信息\n\n函数签名:\n\nfunc getpublicipinfo() (*publicipinfo, error)\ntype publicipinfo struct {\n\tstatus      string  `json:"status"`\n\tcountry     string  `json:"country"`\n\tcountrycode string  `json:"countrycode"`\n\tregion      string  `json:"region"`\n\tregionname  string  `json:"regionname"`\n\tcity        string  `json:"city"`\n\tlat         float64 `json:"lat"`\n\tlon         float64 `json:"lon"`\n\tisp         string  `json:"isp"`\n\torg         string  `json:"org"`\n\tas          string  `json:"as"`\n\tip          string  `json:"query"`\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tpublicipinfo, err := netutil.getpublicipinfo()\n\tif err != nil {\n\t\tfmt.println(err)\n\t}\n\n\tfmt.println(publicipinfo)\n}\n\n\n\n# getrequestpublicip\n\n获取http请求ip\n\n函数签名:\n\nfunc getrequestpublicip(req *http.request) string\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip := "36.112.24.10"\n\n\trequest1 := http.request{\n\t\tmethod: "get",\n\t\theader: http.header{\n\t\t\t"x-forwarded-for": {ip},\n\t\t},\n\t}\n\tpublicip1 := netutil.getrequestpublicip(&request1)\n\tfmt.println(publicip1) //36.112.24.10\n\n\trequest2 := http.request{\n\t\tmethod: "get",\n\t\theader: http.header{\n\t\t\t"x-real-ip": {ip},\n\t\t},\n\t}\n\tpublicip2 := netutil.getrequestpublicip(&request2)\n\tfmt.println(publicip2) //36.112.24.10\n}\n\n\n\n# ispublicip\n\n判断ip是否是公共ip\n\n函数签名:\n\nfunc ispublicip(ip net.ip) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip1 := net.parseip("192.168.0.1")\n\tip2 := net.parseip("36.112.24.10")\n\n\tfmt.println(netutil.ispublicip(ip1)) //false\n\tfmt.println(netutil.ispublicip(ip2)) //true\n}\n\n\n\n# isinternalip\n\n判断ip是否是局域网ip.\n\n函数签名:\n\nfunc isinternalip(ip net.ip) bool\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\tip1 := net.parseip("127.0.0.1")\n\tip2 := net.parseip("36.112.24.10")\n\n\tfmt.println(netutil.isinternalip(ip1)) //true\n\tfmt.println(netutil.isinternalip(ip2)) //false\n}\n\n\n\n# httprequest\n\nhttprequest用于抽象http请求实体的结构\n\n函数签名:\n\ntype httprequest struct {\n\trawurl      string\n\tmethod      string\n\theaders     http.header\n\tqueryparams url.values\n\tformdata    url.values\n\tbody        []byte\n}\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\theader := http.header{}\n\theader.add("content-type", "multipart/form-data")\n\n\tpostdata := url.values{}\n\tpostdata.add("userid", "1")\n\tpostdata.add("title", "testitem")\n\n\trequest := &netutil.httprequest{\n\t\trawurl:   "https://jsonplaceholder.typicode.com/todos",\n\t\tmethod:   "post",\n\t\theaders:  header,\n\t\tformdata: postdata,\n\t}\n}\n\n\n\n# httpclient\n\nhttpclient是用于发送http请求的结构体。它可以用一些配置参数或无配置实例化.\n\n函数签名:\n\ntype httpclient struct {\n\t*http.client\n\ttls     *tls.config\n\trequest *http.request\n\tconfig  httpclientconfig\n}\n\ntype httpclientconfig struct {\n\tsslenabled       bool\n\ttlsconfig        *tls.config\n\tcompressed       bool\n\thandshaketimeout time.duration\n\tresponsetimeout  time.duration\n\tverbose          bool\n}\n\nfunc newhttpclient() *httpclient\n\nfunc newhttpclientwithconfig(config *httpclientconfig) *httpclient\n\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\thttpclientcfg := netutil.httpclientconfig{\n\t\tsslenabled: true,\n\t\thandshaketimeout:10 * time.second\n\t}\n\thttpclient := netutil.newhttpclientwithconfig(&httpclientcfg)\n}\n\n\n\n# sendrequest\n\nhttpclient发送http请求\n\n函数签名:\n\nfunc (client *httpclient) sendrequest(request *httprequest) (*http.response, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\trequest := &netutil.httprequest{\n\t\trawurl: "https://jsonplaceholder.typicode.com/todos/1",\n\t\tmethod: "get",\n\t}\n\n\thttpclient := netutil.newhttpclient()\n\tresp, err := httpclient.sendrequest(request)\n\tif err != nil || resp.statuscode != 200 {\n\t\tlog.fatal(err)\n\t}\n\n\ttype todo struct {\n\t\tuserid    int    `json:"userid"`\n\t\tid        int    `json:"id"`\n\t\ttitle     string `json:"title"`\n\t\tcompleted bool   `json:"completed"`\n\t}\n\n\tvar todo todo\n\thttpclient.decoderesponse(resp, &todo)\n\n\tfmt.println(todo.id) //1\n}\n\n\n\n# decoderesponse\n\n解析http响应体到目标结构体\n\n函数签名:\n\nfunc (client *httpclient) decoderesponse(resp *http.response, target any) error\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"net"\n\t"time"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\trequest := &netutil.httprequest{\n\t\trawurl: "https://jsonplaceholder.typicode.com/todos/1",\n\t\tmethod: "get",\n\t}\n\n\thttpclient := netutil.newhttpclient()\n\tresp, err := httpclient.sendrequest(request)\n\tif err != nil || resp.statuscode != 200 {\n\t\tlog.fatal(err)\n\t}\n\n\ttype todo struct {\n\t\tuserid    int    `json:"userid"`\n\t\tid        int    `json:"id"`\n\t\ttitle     string `json:"title"`\n\t\tcompleted bool   `json:"completed"`\n\t}\n\n\tvar todo todo\n\thttpclient.decoderesponse(resp, &todo)\n\n\tfmt.println(todo.id) //1\n}\n\n\n\n# structtourlvalues\n\n将结构体转为url values, 仅转化结构体导出字段并且包含`json` tag.\n\n函数签名:\n\nfunc structtourlvalues(targetstruct any) url.values\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\ttype todoquery struct {\n\t\tid     int `json:"id"`\n\t\tuserid int `json:"userid"`\n\t}\n\ttodoquery := todoquery{\n\t\tid:     1,\n\t\tuserid: 2,\n\t}\n\ttodovalues := netutil.structtourlvalues(todoquery)\n\n\tfmt.println(todovalues.get("id")) //1\n\tfmt.println(todovalues.get("userid")) //2\n}\n\n\n\n# httpget (deprecated: use sendrequest for replacement)\n\n发送http get请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.header或者map[string]string\n// params[1] http查询字符串，类型必须是url.values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.client\nfunc httpget(url string, params ...any) (*http.response, error)\n\n\n例子:\n\npackage main\n\nimport (\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\n\tresp, err := netutil.httpget(url, header)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# httppost (deprecated: use sendrequest for replacement)\n\n发送http post请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.header或者map[string]string\n// params[1] http查询字符串，类型必须是url.values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.client\nfunc httppost(url string, params ...any) (*http.response, error)\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\ttype todo struct {\n\t\tuserid int    `json:"userid"`\n\t\ttitle  string `json:"title"`\n\t}\n\ttodo := todo{1, "testaddtodo"}\n\tbodyparams, _ := json.marshal(todo)\n\n\tresp, err := netutil.httppost(url, header, nil, bodyparams)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# httpput (deprecated: use sendrequest for replacement)\n\n发送http put请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.header或者map[string]string\n// params[1] http查询字符串，类型必须是url.values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.client\nfunc httpput(url string, params ...any) (*http.response, error)\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\ttype todo struct {\n\t\tid     int    `json:"id"`\n\t\tuserid int    `json:"userid"`\n\t\ttitle  string `json:"title"`\n\t}\n\ttodo := todo{1, 1, "testputtodo"}\n\tbodyparams, _ := json.marshal(todo)\n\n\tresp, err := netutil.httpput(url, header, nil, bodyparams)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# httpdelete (deprecated: use sendrequest for replacement)\n\n发送http delete请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.header或者map[string]string\n// params[1] http查询字符串，类型必须是url.values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.client\nfunc httpdelete(url string, params ...any) (*http.response, error)\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\tresp, err := netutil.httpdelete(url)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# httppatch (deprecated: use sendrequest for replacement)\n\n发送http patch请求\n\n函数签名:\n\n// params[0] http请求header，类型必须是http.header或者map[string]string\n// params[1] http查询字符串，类型必须是url.values或者map[string]string\n// params[2] post请求体，类型必须是[]byte\n// params[3] http client，类型必须是http.client\nfunc httppatch(url string, params ...any) (*http.response, error)\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\ttype todo struct {\n\t\tid     int    `json:"id"`\n\t\tuserid int    `json:"userid"`\n\t\ttitle  string `json:"title"`\n\t}\n\ttodo := todo{1, 1, "testpatchtodo"}\n\tbodyparams, _ := json.marshal(todo)\n\n\tresp, err := netutil.httppatch(url, header, nil, bodyparams)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tbody, _ := ioutil.readall(resp.body)\n\tfmt.println(body)\n}\n\n\n\n# parsehttpresponse\n\n将http请求响应解码成特定struct值\n\n函数签名:\n\nfunc parsehttpresponse(resp *http.response, obj any) error\n\n\n例子:\n\npackage main\n\nimport (\n\t"encoding/json"\n    "fmt"\n\t"io/ioutil"\n\t"log"\n    "github.com/duke-git/lancet/v2/netutil"\n)\n\nfunc main() {\n\turl := "https://jsonplaceholder.typicode.com/todos/1"\n\theader := map[string]string{\n\t\t"content-type": "application/json",\n\t}\n\n\tresp, err := netutil.httpget(url, header)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\ttype todo struct {\n\t\tid        int    `json:"id"`\n\t\tuserid    int    `json:"userid"`\n\t\ttitle     string `json:"title"`\n\t\tcompleted bool   `json:"completed"`\n\t}\n\n\ttodoresp := &todo{}\n\terr = netutil.parsehttpresponse(resp, todoresp)\n\tif err != nil {\n\t\tlog.fatal(err)\n\t}\n\n\tfmt.println(todoresp)\n}\n',charsets:{cjk:!0}}],themeConfig:{logo:"/logo.png",algolia:{apiKey:"a3f46ff80bff13787592c3da8470dd7b",indexName:"lancet",appId:"87KGOED78R"},locales:{"/":{selectText:"选择语言",label:"简体中文",editLinkText:"在 GitHub 上编辑此页",nav:[{text:"首页",link:"/"},{text:"文档",items:[{text:"algorithm",link:"/algorithm/"},{text:"concurrency",link:"/concurrency/"},{text:"condition",link:"/condition/"},{text:"convertor",link:"/convertor/"},{text:"cryptor",link:"/cryptor/"},{text:"datastructure",link:"/datastructure/"},{text:"fileutil",link:"/fileutil/"},{text:"formatter",link:"/formatter/"},{text:"function",link:"/function/"},{text:"maputil",link:"/maputil/"},{text:"mathutil",link:"/mathutil/"},{text:"netutil",link:"/netutil/"},{text:"random",link:"/random/"},{text:"retry",link:"/retry/"},{text:"slice",link:"/slice/"},{text:"strutil",link:"/strutil/"},{text:"system",link:"/system/"},{text:"validator",link:"/validator/"},{text:"xerror",link:"/xerror/"}]},{text:"Github",link:"https://github.com/UvDream/lancet-docs"},{text:"国内镜像",link:"https://uvdream.gitee.io/lancet-docs"}],sidebar:{"/datastructure/":["","linklist","stack","queue","set","tree","heap","hashmap"]},lastUpdated:"最后更新时间"},"/en/":{selectText:"Languages",label:"English",editLinkText:"Edit this page on GitHub",nav:[{text:"Home",link:"/en/"},{text:"Docs",items:[{text:"algorithm",link:"/en/algorithm/"},{text:"concurrency",link:"/en/concurrency/"},{text:"condition",link:"/en/condition/"},{text:"convertor",link:"/en/convertor/"},{text:"cryptor",link:"/en/cryptor/"},{text:"datastructure",link:"/en/datastructure/"},{text:"fileutil",link:"/en/fileutil/"},{text:"formatter",link:"/en/formatter/"},{text:"function",link:"/en/function/"},{text:"maputil",link:"/en/maputil/"},{text:"mathutil",link:"/en/mathutil/"},{text:"netutil",link:"/en/netutil/"},{text:"random",link:"/en/random/"},{text:"retry",link:"/en/retry/"},{text:"slice",link:"/en/slice/"},{text:"strutil",link:"/en/strutil/"},{text:"system",link:"/en/system/"},{text:"validator",link:"/en/validator/"},{text:"xerror",link:"/en/xerror/"}]},{text:"Github",link:"https://github.com/UvDream/lancet-docs"},{text:"domestic mirror",link:"https://uvdream.gitee.io/lancet-docs"}],sidebar:{"/datastructure/":["","linklist","stack","queue","set","tree","heap","hashmap"]},lastUpdated:"Last Updated"}}},locales:{"/":{lang:"zh-CN",title:"Lancet文档",description:"lancet（柳叶刀）是一个全面、高效、可复用的go语言工具函数库。 lancet受到了java apache common包和lodash.js的启发。",path:"/"},"/en/":{lang:"en-US",title:"Lancet-docs",description:"Lancet is a comprehensive, efficient, and reusable util function library of go. Inspired by the java apache common package and lodash.js.",path:"/en/"}}};e(237);Qe.component("Badge",()=>Promise.all([e.e(0),e.e(4)]).then(e.bind(null,355))),Qe.component("CodeBlock",()=>Promise.all([e.e(0),e.e(5)]).then(e.bind(null,297))),Qe.component("CodeGroup",()=>Promise.all([e.e(0),e.e(6)]).then(e.bind(null,298)));e(238);var Ro={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:()=>({scrollTop:null}),computed:{show(){return this.scrollTop>this.threshold}},mounted(){this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",Io()(()=>{this.scrollTop=this.getScrollTop()},100))},methods:{getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,scrollToTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},jo=(e(239),Object(zo.a)(Ro,(function(){var n=this._self._c;return n("transition",{attrs:{name:"fade"}},[this.show?n("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[n("g",{attrs:{transform:"translate(-229 -126.358)"}},[n("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),n("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"ad7e0a50",null).exports);class Fo{constructor(n){Object.defineProperty(this,"registration",{value:n,configurable:!0,writable:!0})}update(){return this.registration.update()}skipWaiting(){const n=this.registration.waiting;return n?(console.log("[vuepress:sw] Doing worker.skipWaiting()."),new Promise((t,e)=>{const i=new MessageChannel;i.port1.onmessage=n=>{console.log("[vuepress:sw] Done worker.skipWaiting()."),n.data.error?e(n.data.error):t(n.data)},n.postMessage({type:"skip-waiting"},[i.port2])})):Promise.resolve()}}var Mo=new Qe;var Bo=[{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:n})=>{n.component("CodeCopy",_o)},({Vue:n})=>{n.component("BackToTop",jo)},async({router:n,isServer:t})=>{if(!t){const{register:t}=await e.e(64).then(e.bind(null,292));n.onReady(()=>{t("/lancet-docs/service-worker.js",{registrationOptions:{},ready(){console.log("[vuepress:sw] Service worker is active."),Mo.$emit("sw-ready")},cached(n){console.log("[vuepress:sw] Content has been cached for offline use."),Mo.$emit("sw-cached",new Fo(n))},updated(n){console.log("[vuepress:sw] Content updated."),Mo.$emit("sw-updated",new Fo(n))},offline(){console.log("[vuepress:sw] No internet connection found. App is running in offline mode."),Mo.$emit("sw-offline")},error(n){console.error("[vuepress:sw] Error during service worker registration:",n),Mo.$emit("sw-error",n),GA_ID&&ga("send","exception",{exDescription:n.message,exFatal:!1})}})})}}],Uo=["BackToTop"];class Ho extends class{constructor(){this.store=new Qe({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,t){Qe.set(this.store.state,n,t)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(Ho.prototype,{getPageAsyncComponent:oo,getLayoutAsyncComponent:uo,getAsyncComponent:co,getVueComponent:so});var Vo={install(n){const t=new Ho;n.$vuepress=t,n.prototype.$vuepress=t}};function $o(n,t){const e=t.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===e)}var Go={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const t=this.pageKey||this.$parent.$page.key;return po("pageKey",t),Qe.component(t)||Qe.component(t,oo(t)),Qe.component(t)?n(t):n("")}},Qo={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:t,slots:e})=>n("div",{class:["content__"+t.slotKey]},e()[t.slotKey])},Wo={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Ko=(e(240),e(241),Object(zo.a)(Wo,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Zo={functional:!0,render(n,{parent:t,children:e}){if(t._isMounted)return e;t.$once("hook:mounted",()=>{t.$forceUpdate()})}};Qe.config.productionTip=!1,Qe.use($l),Qe.use(Vo),Qe.mixin(function(n,t,e=Qe){!function(n){n.locales&&Object.keys(n.locales).forEach(t=>{n.locales[t].path=t});Object.freeze(n)}(t),e.$vuepress.$set("siteData",t);const i=new(n(e.$vuepress.$get("siteData"))),a=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(i)),r={};return Object.keys(a).reduce((n,t)=>(t.startsWith("$")&&(n[t]=a[t].get),n),r),{computed:r}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let t,e;for(const i in n)"/"===i?e=n[i]:0===this.$page.path.indexOf(i)&&(t=n[i]);return t||e||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:t}=this.$page.frontmatter;if("string"==typeof t)return t;const e=this.$siteTitle,i=n.frontmatter.home?null:n.frontmatter.title||n.title;return e?i?i+" | "+e:e:i||"VuePress"}get $description(){const n=function(n){if(n){const t=n.filter(n=>"description"===n.name)[0];if(t)return t.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,t){for(let e=0;e<n.length;e++){const i=n[e];if(i.path.toLowerCase()===t.toLowerCase())return i}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},Oo)),Qe.component("Content",Go),Qe.component("ContentSlotsDistributor",Qo),Qe.component("OutboundLink",Ko),Qe.component("ClientOnly",Zo),Qe.component("Layout",uo("Layout")),Qe.component("NotFound",uo("NotFound")),Qe.prototype.$withBase=function(n){const t=this.$site.base;return"/"===n.charAt(0)?t+n.slice(1):n},window.__VUEPRESS__={version:"1.9.7",hash:"5789f103"},async function(n){const t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Oo.routerBase||Oo.base,e=new $l({base:t,mode:"history",fallback:!1,routes:No,scrollBehavior:(n,t,e)=>e||(n.hash?!Qe.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((t,e,i)=>{if($o(n,t.path))i();else if(/(\/|\.html)$/.test(t.path))if(/\/$/.test(t.path)){const e=t.path.replace(/\/$/,"")+".html";$o(n,e)?i(e):i()}else i();else{const e=t.path+"/",a=t.path+".html";$o(n,a)?i(a):$o(n,e)?i(e):i()}})}(e);const i={};try{await Promise.all(Bo.filter(n=>"function"==typeof n).map(t=>t({Vue:Qe,options:i,router:e,siteData:Oo,isServer:n})))}catch(n){console.error(n)}return{app:new Qe(Object.assign(i,{router:e,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Uo.map(t=>n(t)))])})),router:e}}(!1).then(({app:n,router:t})=>{t.onReady(()=>{n.$mount("#app")})})}]);